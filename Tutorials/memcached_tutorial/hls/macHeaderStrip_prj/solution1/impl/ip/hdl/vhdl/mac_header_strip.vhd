-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_header_strip is
port (
    dataIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    dataIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    dataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dataIn_TUSER : IN STD_LOGIC_VECTOR (111 downto 0);
    IPdataOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    IPdataOut_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    IPdataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    IPdataOut_TUSER : OUT STD_LOGIC_VECTOR (111 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    dataIn_TVALID : IN STD_LOGIC;
    dataIn_TREADY : OUT STD_LOGIC;
    IPdataOut_TVALID : OUT STD_LOGIC;
    IPdataOut_TREADY : IN STD_LOGIC );
end;


architecture behav of mac_header_strip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mac_header_strip,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.865000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1523,HLS_SYN_LUT=1826,HLS_VERSION=2018_3}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal detect_mac_protocol_U0_ap_start : STD_LOGIC;
    signal detect_mac_protocol_U0_ap_done : STD_LOGIC;
    signal detect_mac_protocol_U0_ap_continue : STD_LOGIC;
    signal detect_mac_protocol_U0_ap_idle : STD_LOGIC;
    signal detect_mac_protocol_U0_ap_ready : STD_LOGIC;
    signal detect_mac_protocol_U0_ipDataFifo_V_din : STD_LOGIC_VECTOR (184 downto 0);
    signal detect_mac_protocol_U0_ipDataFifo_V_write : STD_LOGIC;
    signal detect_mac_protocol_U0_start_out : STD_LOGIC;
    signal detect_mac_protocol_U0_start_write : STD_LOGIC;
    signal detect_mac_protocol_U0_dataIn_TREADY : STD_LOGIC;
    signal strip_mac_header_U0_ap_start : STD_LOGIC;
    signal strip_mac_header_U0_ap_done : STD_LOGIC;
    signal strip_mac_header_U0_ap_continue : STD_LOGIC;
    signal strip_mac_header_U0_ap_idle : STD_LOGIC;
    signal strip_mac_header_U0_ap_ready : STD_LOGIC;
    signal strip_mac_header_U0_ipDataFifo_V_read : STD_LOGIC;
    signal strip_mac_header_U0_IPdataOut_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal strip_mac_header_U0_IPdataOut_TVALID : STD_LOGIC;
    signal strip_mac_header_U0_IPdataOut_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal strip_mac_header_U0_IPdataOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal strip_mac_header_U0_IPdataOut_TUSER : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ipDataFifo_V_full_n : STD_LOGIC;
    signal ipDataFifo_V_dout : STD_LOGIC_VECTOR (184 downto 0);
    signal ipDataFifo_V_empty_n : STD_LOGIC;
    signal start_for_strip_mac_header_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_strip_mac_header_U0_full_n : STD_LOGIC;
    signal start_for_strip_mac_header_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_strip_mac_header_U0_empty_n : STD_LOGIC;
    signal strip_mac_header_U0_start_full_n : STD_LOGIC;
    signal strip_mac_header_U0_start_write : STD_LOGIC;

    component detect_mac_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataIn_TVALID : IN STD_LOGIC;
        ipDataFifo_V_din : OUT STD_LOGIC_VECTOR (184 downto 0);
        ipDataFifo_V_full_n : IN STD_LOGIC;
        ipDataFifo_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        dataIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        dataIn_TREADY : OUT STD_LOGIC;
        dataIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        dataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        dataIn_TUSER : IN STD_LOGIC_VECTOR (111 downto 0);
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component strip_mac_header IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataFifo_V_dout : IN STD_LOGIC_VECTOR (184 downto 0);
        ipDataFifo_V_empty_n : IN STD_LOGIC;
        ipDataFifo_V_read : OUT STD_LOGIC;
        IPdataOut_TREADY : IN STD_LOGIC;
        IPdataOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        IPdataOut_TVALID : OUT STD_LOGIC;
        IPdataOut_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        IPdataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        IPdataOut_TUSER : OUT STD_LOGIC_VECTOR (111 downto 0) );
    end component;


    component fifo_w185_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (184 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (184 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_strip_mac_header_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    detect_mac_protocol_U0 : component detect_mac_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_mac_protocol_U0_ap_start,
        start_full_n => start_for_strip_mac_header_U0_full_n,
        ap_done => detect_mac_protocol_U0_ap_done,
        ap_continue => detect_mac_protocol_U0_ap_continue,
        ap_idle => detect_mac_protocol_U0_ap_idle,
        ap_ready => detect_mac_protocol_U0_ap_ready,
        dataIn_TVALID => dataIn_TVALID,
        ipDataFifo_V_din => detect_mac_protocol_U0_ipDataFifo_V_din,
        ipDataFifo_V_full_n => ipDataFifo_V_full_n,
        ipDataFifo_V_write => detect_mac_protocol_U0_ipDataFifo_V_write,
        start_out => detect_mac_protocol_U0_start_out,
        start_write => detect_mac_protocol_U0_start_write,
        dataIn_TDATA => dataIn_TDATA,
        dataIn_TREADY => detect_mac_protocol_U0_dataIn_TREADY,
        dataIn_TKEEP => dataIn_TKEEP,
        dataIn_TLAST => dataIn_TLAST,
        dataIn_TUSER => dataIn_TUSER,
        myMacAddress_V => myMacAddress_V);

    strip_mac_header_U0 : component strip_mac_header
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => strip_mac_header_U0_ap_start,
        ap_done => strip_mac_header_U0_ap_done,
        ap_continue => strip_mac_header_U0_ap_continue,
        ap_idle => strip_mac_header_U0_ap_idle,
        ap_ready => strip_mac_header_U0_ap_ready,
        ipDataFifo_V_dout => ipDataFifo_V_dout,
        ipDataFifo_V_empty_n => ipDataFifo_V_empty_n,
        ipDataFifo_V_read => strip_mac_header_U0_ipDataFifo_V_read,
        IPdataOut_TREADY => IPdataOut_TREADY,
        IPdataOut_TDATA => strip_mac_header_U0_IPdataOut_TDATA,
        IPdataOut_TVALID => strip_mac_header_U0_IPdataOut_TVALID,
        IPdataOut_TKEEP => strip_mac_header_U0_IPdataOut_TKEEP,
        IPdataOut_TLAST => strip_mac_header_U0_IPdataOut_TLAST,
        IPdataOut_TUSER => strip_mac_header_U0_IPdataOut_TUSER);

    ipDataFifo_V_U : component fifo_w185_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_mac_protocol_U0_ipDataFifo_V_din,
        if_full_n => ipDataFifo_V_full_n,
        if_write => detect_mac_protocol_U0_ipDataFifo_V_write,
        if_dout => ipDataFifo_V_dout,
        if_empty_n => ipDataFifo_V_empty_n,
        if_read => strip_mac_header_U0_ipDataFifo_V_read);

    start_for_strip_mac_header_U0_U : component start_for_strip_mac_header_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_strip_mac_header_U0_din,
        if_full_n => start_for_strip_mac_header_U0_full_n,
        if_write => detect_mac_protocol_U0_start_write,
        if_dout => start_for_strip_mac_header_U0_dout,
        if_empty_n => start_for_strip_mac_header_U0_empty_n,
        if_read => strip_mac_header_U0_ap_ready);




    IPdataOut_TDATA <= strip_mac_header_U0_IPdataOut_TDATA;
    IPdataOut_TKEEP <= strip_mac_header_U0_IPdataOut_TKEEP;
    IPdataOut_TLAST <= strip_mac_header_U0_IPdataOut_TLAST;
    IPdataOut_TUSER <= strip_mac_header_U0_IPdataOut_TUSER;
    IPdataOut_TVALID <= strip_mac_header_U0_IPdataOut_TVALID;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    dataIn_TREADY <= detect_mac_protocol_U0_dataIn_TREADY;
    detect_mac_protocol_U0_ap_continue <= ap_const_logic_1;
    detect_mac_protocol_U0_ap_start <= ap_const_logic_1;
    start_for_strip_mac_header_U0_din <= (0=>ap_const_logic_1, others=>'-');
    strip_mac_header_U0_ap_continue <= ap_const_logic_1;
    strip_mac_header_U0_ap_start <= start_for_strip_mac_header_U0_empty_n;
    strip_mac_header_U0_start_full_n <= ap_const_logic_1;
    strip_mac_header_U0_start_write <= ap_const_logic_0;
end behav;
