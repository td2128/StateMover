// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mac_header_strip,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.865000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1523,HLS_SYN_LUT=1826,HLS_VERSION=2018_3}" *)

module mac_header_strip (
        dataIn_TDATA,
        dataIn_TKEEP,
        dataIn_TLAST,
        dataIn_TUSER,
        IPdataOut_TDATA,
        IPdataOut_TKEEP,
        IPdataOut_TLAST,
        IPdataOut_TUSER,
        myMacAddress_V,
        ap_clk,
        ap_rst_n,
        dataIn_TVALID,
        dataIn_TREADY,
        IPdataOut_TVALID,
        IPdataOut_TREADY
);


input  [63:0] dataIn_TDATA;
input  [7:0] dataIn_TKEEP;
input  [0:0] dataIn_TLAST;
input  [111:0] dataIn_TUSER;
output  [63:0] IPdataOut_TDATA;
output  [7:0] IPdataOut_TKEEP;
output  [0:0] IPdataOut_TLAST;
output  [111:0] IPdataOut_TUSER;
input  [47:0] myMacAddress_V;
input   ap_clk;
input   ap_rst_n;
input   dataIn_TVALID;
output   dataIn_TREADY;
output   IPdataOut_TVALID;
input   IPdataOut_TREADY;

 reg    ap_rst_n_inv;
wire    detect_mac_protocol_U0_ap_start;
wire    detect_mac_protocol_U0_ap_done;
wire    detect_mac_protocol_U0_ap_continue;
wire    detect_mac_protocol_U0_ap_idle;
wire    detect_mac_protocol_U0_ap_ready;
wire   [184:0] detect_mac_protocol_U0_ipDataFifo_V_din;
wire    detect_mac_protocol_U0_ipDataFifo_V_write;
wire    detect_mac_protocol_U0_start_out;
wire    detect_mac_protocol_U0_start_write;
wire    detect_mac_protocol_U0_dataIn_TREADY;
wire    strip_mac_header_U0_ap_start;
wire    strip_mac_header_U0_ap_done;
wire    strip_mac_header_U0_ap_continue;
wire    strip_mac_header_U0_ap_idle;
wire    strip_mac_header_U0_ap_ready;
wire    strip_mac_header_U0_ipDataFifo_V_read;
wire   [63:0] strip_mac_header_U0_IPdataOut_TDATA;
wire    strip_mac_header_U0_IPdataOut_TVALID;
wire   [7:0] strip_mac_header_U0_IPdataOut_TKEEP;
wire   [0:0] strip_mac_header_U0_IPdataOut_TLAST;
wire   [111:0] strip_mac_header_U0_IPdataOut_TUSER;
wire    ap_sync_continue;
wire    ipDataFifo_V_full_n;
wire   [184:0] ipDataFifo_V_dout;
wire    ipDataFifo_V_empty_n;
wire   [0:0] start_for_strip_mac_header_U0_din;
wire    start_for_strip_mac_header_U0_full_n;
wire   [0:0] start_for_strip_mac_header_U0_dout;
wire    start_for_strip_mac_header_U0_empty_n;
wire    strip_mac_header_U0_start_full_n;
wire    strip_mac_header_U0_start_write;

detect_mac_protocol detect_mac_protocol_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(detect_mac_protocol_U0_ap_start),
    .start_full_n(start_for_strip_mac_header_U0_full_n),
    .ap_done(detect_mac_protocol_U0_ap_done),
    .ap_continue(detect_mac_protocol_U0_ap_continue),
    .ap_idle(detect_mac_protocol_U0_ap_idle),
    .ap_ready(detect_mac_protocol_U0_ap_ready),
    .dataIn_TVALID(dataIn_TVALID),
    .ipDataFifo_V_din(detect_mac_protocol_U0_ipDataFifo_V_din),
    .ipDataFifo_V_full_n(ipDataFifo_V_full_n),
    .ipDataFifo_V_write(detect_mac_protocol_U0_ipDataFifo_V_write),
    .start_out(detect_mac_protocol_U0_start_out),
    .start_write(detect_mac_protocol_U0_start_write),
    .dataIn_TDATA(dataIn_TDATA),
    .dataIn_TREADY(detect_mac_protocol_U0_dataIn_TREADY),
    .dataIn_TKEEP(dataIn_TKEEP),
    .dataIn_TLAST(dataIn_TLAST),
    .dataIn_TUSER(dataIn_TUSER),
    .myMacAddress_V(myMacAddress_V)
);

strip_mac_header strip_mac_header_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(strip_mac_header_U0_ap_start),
    .ap_done(strip_mac_header_U0_ap_done),
    .ap_continue(strip_mac_header_U0_ap_continue),
    .ap_idle(strip_mac_header_U0_ap_idle),
    .ap_ready(strip_mac_header_U0_ap_ready),
    .ipDataFifo_V_dout(ipDataFifo_V_dout),
    .ipDataFifo_V_empty_n(ipDataFifo_V_empty_n),
    .ipDataFifo_V_read(strip_mac_header_U0_ipDataFifo_V_read),
    .IPdataOut_TREADY(IPdataOut_TREADY),
    .IPdataOut_TDATA(strip_mac_header_U0_IPdataOut_TDATA),
    .IPdataOut_TVALID(strip_mac_header_U0_IPdataOut_TVALID),
    .IPdataOut_TKEEP(strip_mac_header_U0_IPdataOut_TKEEP),
    .IPdataOut_TLAST(strip_mac_header_U0_IPdataOut_TLAST),
    .IPdataOut_TUSER(strip_mac_header_U0_IPdataOut_TUSER)
);

fifo_w185_d4_A ipDataFifo_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(detect_mac_protocol_U0_ipDataFifo_V_din),
    .if_full_n(ipDataFifo_V_full_n),
    .if_write(detect_mac_protocol_U0_ipDataFifo_V_write),
    .if_dout(ipDataFifo_V_dout),
    .if_empty_n(ipDataFifo_V_empty_n),
    .if_read(strip_mac_header_U0_ipDataFifo_V_read)
);

start_for_strip_mac_header_U0 start_for_strip_mac_header_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_strip_mac_header_U0_din),
    .if_full_n(start_for_strip_mac_header_U0_full_n),
    .if_write(detect_mac_protocol_U0_start_write),
    .if_dout(start_for_strip_mac_header_U0_dout),
    .if_empty_n(start_for_strip_mac_header_U0_empty_n),
    .if_read(strip_mac_header_U0_ap_ready)
);

assign IPdataOut_TDATA = strip_mac_header_U0_IPdataOut_TDATA;

assign IPdataOut_TKEEP = strip_mac_header_U0_IPdataOut_TKEEP;

assign IPdataOut_TLAST = strip_mac_header_U0_IPdataOut_TLAST;

assign IPdataOut_TUSER = strip_mac_header_U0_IPdataOut_TUSER;

assign IPdataOut_TVALID = strip_mac_header_U0_IPdataOut_TVALID;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign dataIn_TREADY = detect_mac_protocol_U0_dataIn_TREADY;

assign detect_mac_protocol_U0_ap_continue = 1'b1;

assign detect_mac_protocol_U0_ap_start = 1'b1;

assign start_for_strip_mac_header_U0_din = 1'b1;

assign strip_mac_header_U0_ap_continue = 1'b1;

assign strip_mac_header_U0_ap_start = start_for_strip_mac_header_U0_empty_n;

assign strip_mac_header_U0_start_full_n = 1'b1;

assign strip_mac_header_U0_start_write = 1'b0;

endmodule //mac_header_strip
