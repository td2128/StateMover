// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_header_strip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<64> mac_header_strip::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> mac_header_strip::ap_const_lv8_0 = "00000000";
const sc_lv<1> mac_header_strip::ap_const_lv1_0 = "0";
const sc_lv<112> mac_header_strip::ap_const_lv112_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic mac_header_strip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mac_header_strip::ap_const_logic_0 = sc_dt::Log_0;

mac_header_strip::mac_header_strip(sc_module_name name) : sc_module(name), mVcdFile(0) {
    detect_mac_protocol_U0 = new detect_mac_protocol("detect_mac_protocol_U0");
    detect_mac_protocol_U0->ap_clk(ap_clk);
    detect_mac_protocol_U0->ap_rst(ap_rst_n_inv);
    detect_mac_protocol_U0->ap_start(detect_mac_protocol_U0_ap_start);
    detect_mac_protocol_U0->start_full_n(start_for_strip_mac_header_U0_full_n);
    detect_mac_protocol_U0->ap_done(detect_mac_protocol_U0_ap_done);
    detect_mac_protocol_U0->ap_continue(detect_mac_protocol_U0_ap_continue);
    detect_mac_protocol_U0->ap_idle(detect_mac_protocol_U0_ap_idle);
    detect_mac_protocol_U0->ap_ready(detect_mac_protocol_U0_ap_ready);
    detect_mac_protocol_U0->dataIn_TVALID(dataIn_TVALID);
    detect_mac_protocol_U0->ipDataFifo_V_din(detect_mac_protocol_U0_ipDataFifo_V_din);
    detect_mac_protocol_U0->ipDataFifo_V_full_n(ipDataFifo_V_full_n);
    detect_mac_protocol_U0->ipDataFifo_V_write(detect_mac_protocol_U0_ipDataFifo_V_write);
    detect_mac_protocol_U0->start_out(detect_mac_protocol_U0_start_out);
    detect_mac_protocol_U0->start_write(detect_mac_protocol_U0_start_write);
    detect_mac_protocol_U0->dataIn_TDATA(dataIn_TDATA);
    detect_mac_protocol_U0->dataIn_TREADY(detect_mac_protocol_U0_dataIn_TREADY);
    detect_mac_protocol_U0->dataIn_TKEEP(dataIn_TKEEP);
    detect_mac_protocol_U0->dataIn_TLAST(dataIn_TLAST);
    detect_mac_protocol_U0->dataIn_TUSER(dataIn_TUSER);
    detect_mac_protocol_U0->myMacAddress_V(myMacAddress_V);
    strip_mac_header_U0 = new strip_mac_header("strip_mac_header_U0");
    strip_mac_header_U0->ap_clk(ap_clk);
    strip_mac_header_U0->ap_rst(ap_rst_n_inv);
    strip_mac_header_U0->ap_start(strip_mac_header_U0_ap_start);
    strip_mac_header_U0->ap_done(strip_mac_header_U0_ap_done);
    strip_mac_header_U0->ap_continue(strip_mac_header_U0_ap_continue);
    strip_mac_header_U0->ap_idle(strip_mac_header_U0_ap_idle);
    strip_mac_header_U0->ap_ready(strip_mac_header_U0_ap_ready);
    strip_mac_header_U0->ipDataFifo_V_dout(ipDataFifo_V_dout);
    strip_mac_header_U0->ipDataFifo_V_empty_n(ipDataFifo_V_empty_n);
    strip_mac_header_U0->ipDataFifo_V_read(strip_mac_header_U0_ipDataFifo_V_read);
    strip_mac_header_U0->IPdataOut_TREADY(IPdataOut_TREADY);
    strip_mac_header_U0->IPdataOut_TDATA(strip_mac_header_U0_IPdataOut_TDATA);
    strip_mac_header_U0->IPdataOut_TVALID(strip_mac_header_U0_IPdataOut_TVALID);
    strip_mac_header_U0->IPdataOut_TKEEP(strip_mac_header_U0_IPdataOut_TKEEP);
    strip_mac_header_U0->IPdataOut_TLAST(strip_mac_header_U0_IPdataOut_TLAST);
    strip_mac_header_U0->IPdataOut_TUSER(strip_mac_header_U0_IPdataOut_TUSER);
    ipDataFifo_V_U = new fifo_w185_d4_A("ipDataFifo_V_U");
    ipDataFifo_V_U->clk(ap_clk);
    ipDataFifo_V_U->reset(ap_rst_n_inv);
    ipDataFifo_V_U->if_read_ce(ap_var_for_const0);
    ipDataFifo_V_U->if_write_ce(ap_var_for_const0);
    ipDataFifo_V_U->if_din(detect_mac_protocol_U0_ipDataFifo_V_din);
    ipDataFifo_V_U->if_full_n(ipDataFifo_V_full_n);
    ipDataFifo_V_U->if_write(detect_mac_protocol_U0_ipDataFifo_V_write);
    ipDataFifo_V_U->if_dout(ipDataFifo_V_dout);
    ipDataFifo_V_U->if_empty_n(ipDataFifo_V_empty_n);
    ipDataFifo_V_U->if_read(strip_mac_header_U0_ipDataFifo_V_read);
    start_for_strip_mac_header_U0_U = new start_for_strip_mac_header_U0("start_for_strip_mac_header_U0_U");
    start_for_strip_mac_header_U0_U->clk(ap_clk);
    start_for_strip_mac_header_U0_U->reset(ap_rst_n_inv);
    start_for_strip_mac_header_U0_U->if_read_ce(ap_var_for_const0);
    start_for_strip_mac_header_U0_U->if_write_ce(ap_var_for_const0);
    start_for_strip_mac_header_U0_U->if_din(start_for_strip_mac_header_U0_din);
    start_for_strip_mac_header_U0_U->if_full_n(start_for_strip_mac_header_U0_full_n);
    start_for_strip_mac_header_U0_U->if_write(detect_mac_protocol_U0_start_write);
    start_for_strip_mac_header_U0_U->if_dout(start_for_strip_mac_header_U0_dout);
    start_for_strip_mac_header_U0_U->if_empty_n(start_for_strip_mac_header_U0_empty_n);
    start_for_strip_mac_header_U0_U->if_read(strip_mac_header_U0_ap_ready);

    SC_METHOD(thread_IPdataOut_TDATA);
    sensitive << ( strip_mac_header_U0_IPdataOut_TDATA );

    SC_METHOD(thread_IPdataOut_TKEEP);
    sensitive << ( strip_mac_header_U0_IPdataOut_TKEEP );

    SC_METHOD(thread_IPdataOut_TLAST);
    sensitive << ( strip_mac_header_U0_IPdataOut_TLAST );

    SC_METHOD(thread_IPdataOut_TUSER);
    sensitive << ( strip_mac_header_U0_IPdataOut_TUSER );

    SC_METHOD(thread_IPdataOut_TVALID);
    sensitive << ( strip_mac_header_U0_IPdataOut_TVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_dataIn_TREADY);
    sensitive << ( detect_mac_protocol_U0_dataIn_TREADY );

    SC_METHOD(thread_detect_mac_protocol_U0_ap_continue);

    SC_METHOD(thread_detect_mac_protocol_U0_ap_start);

    SC_METHOD(thread_start_for_strip_mac_header_U0_din);

    SC_METHOD(thread_strip_mac_header_U0_ap_continue);

    SC_METHOD(thread_strip_mac_header_U0_ap_start);
    sensitive << ( start_for_strip_mac_header_U0_empty_n );

    SC_METHOD(thread_strip_mac_header_U0_start_full_n);

    SC_METHOD(thread_strip_mac_header_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_header_strip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, dataIn_TDATA, "(port)dataIn_TDATA");
    sc_trace(mVcdFile, dataIn_TKEEP, "(port)dataIn_TKEEP");
    sc_trace(mVcdFile, dataIn_TLAST, "(port)dataIn_TLAST");
    sc_trace(mVcdFile, dataIn_TUSER, "(port)dataIn_TUSER");
    sc_trace(mVcdFile, IPdataOut_TDATA, "(port)IPdataOut_TDATA");
    sc_trace(mVcdFile, IPdataOut_TKEEP, "(port)IPdataOut_TKEEP");
    sc_trace(mVcdFile, IPdataOut_TLAST, "(port)IPdataOut_TLAST");
    sc_trace(mVcdFile, IPdataOut_TUSER, "(port)IPdataOut_TUSER");
    sc_trace(mVcdFile, myMacAddress_V, "(port)myMacAddress_V");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, dataIn_TVALID, "(port)dataIn_TVALID");
    sc_trace(mVcdFile, dataIn_TREADY, "(port)dataIn_TREADY");
    sc_trace(mVcdFile, IPdataOut_TVALID, "(port)IPdataOut_TVALID");
    sc_trace(mVcdFile, IPdataOut_TREADY, "(port)IPdataOut_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ap_start, "detect_mac_protocol_U0_ap_start");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ap_done, "detect_mac_protocol_U0_ap_done");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ap_continue, "detect_mac_protocol_U0_ap_continue");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ap_idle, "detect_mac_protocol_U0_ap_idle");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ap_ready, "detect_mac_protocol_U0_ap_ready");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ipDataFifo_V_din, "detect_mac_protocol_U0_ipDataFifo_V_din");
    sc_trace(mVcdFile, detect_mac_protocol_U0_ipDataFifo_V_write, "detect_mac_protocol_U0_ipDataFifo_V_write");
    sc_trace(mVcdFile, detect_mac_protocol_U0_start_out, "detect_mac_protocol_U0_start_out");
    sc_trace(mVcdFile, detect_mac_protocol_U0_start_write, "detect_mac_protocol_U0_start_write");
    sc_trace(mVcdFile, detect_mac_protocol_U0_dataIn_TREADY, "detect_mac_protocol_U0_dataIn_TREADY");
    sc_trace(mVcdFile, strip_mac_header_U0_ap_start, "strip_mac_header_U0_ap_start");
    sc_trace(mVcdFile, strip_mac_header_U0_ap_done, "strip_mac_header_U0_ap_done");
    sc_trace(mVcdFile, strip_mac_header_U0_ap_continue, "strip_mac_header_U0_ap_continue");
    sc_trace(mVcdFile, strip_mac_header_U0_ap_idle, "strip_mac_header_U0_ap_idle");
    sc_trace(mVcdFile, strip_mac_header_U0_ap_ready, "strip_mac_header_U0_ap_ready");
    sc_trace(mVcdFile, strip_mac_header_U0_ipDataFifo_V_read, "strip_mac_header_U0_ipDataFifo_V_read");
    sc_trace(mVcdFile, strip_mac_header_U0_IPdataOut_TDATA, "strip_mac_header_U0_IPdataOut_TDATA");
    sc_trace(mVcdFile, strip_mac_header_U0_IPdataOut_TVALID, "strip_mac_header_U0_IPdataOut_TVALID");
    sc_trace(mVcdFile, strip_mac_header_U0_IPdataOut_TKEEP, "strip_mac_header_U0_IPdataOut_TKEEP");
    sc_trace(mVcdFile, strip_mac_header_U0_IPdataOut_TLAST, "strip_mac_header_U0_IPdataOut_TLAST");
    sc_trace(mVcdFile, strip_mac_header_U0_IPdataOut_TUSER, "strip_mac_header_U0_IPdataOut_TUSER");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ipDataFifo_V_full_n, "ipDataFifo_V_full_n");
    sc_trace(mVcdFile, ipDataFifo_V_dout, "ipDataFifo_V_dout");
    sc_trace(mVcdFile, ipDataFifo_V_empty_n, "ipDataFifo_V_empty_n");
    sc_trace(mVcdFile, start_for_strip_mac_header_U0_din, "start_for_strip_mac_header_U0_din");
    sc_trace(mVcdFile, start_for_strip_mac_header_U0_full_n, "start_for_strip_mac_header_U0_full_n");
    sc_trace(mVcdFile, start_for_strip_mac_header_U0_dout, "start_for_strip_mac_header_U0_dout");
    sc_trace(mVcdFile, start_for_strip_mac_header_U0_empty_n, "start_for_strip_mac_header_U0_empty_n");
    sc_trace(mVcdFile, strip_mac_header_U0_start_full_n, "strip_mac_header_U0_start_full_n");
    sc_trace(mVcdFile, strip_mac_header_U0_start_write, "strip_mac_header_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mac_header_strip.hdltvin.dat");
    mHdltvoutHandle.open("mac_header_strip.hdltvout.dat");
}

mac_header_strip::~mac_header_strip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete detect_mac_protocol_U0;
    delete strip_mac_header_U0;
    delete ipDataFifo_V_U;
    delete start_for_strip_mac_header_U0_U;
}

void mac_header_strip::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mac_header_strip::thread_IPdataOut_TDATA() {
    IPdataOut_TDATA = strip_mac_header_U0_IPdataOut_TDATA.read();
}

void mac_header_strip::thread_IPdataOut_TKEEP() {
    IPdataOut_TKEEP = strip_mac_header_U0_IPdataOut_TKEEP.read();
}

void mac_header_strip::thread_IPdataOut_TLAST() {
    IPdataOut_TLAST = strip_mac_header_U0_IPdataOut_TLAST.read();
}

void mac_header_strip::thread_IPdataOut_TUSER() {
    IPdataOut_TUSER = strip_mac_header_U0_IPdataOut_TUSER.read();
}

void mac_header_strip::thread_IPdataOut_TVALID() {
    IPdataOut_TVALID = strip_mac_header_U0_IPdataOut_TVALID.read();
}

void mac_header_strip::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mac_header_strip::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void mac_header_strip::thread_dataIn_TREADY() {
    dataIn_TREADY = detect_mac_protocol_U0_dataIn_TREADY.read();
}

void mac_header_strip::thread_detect_mac_protocol_U0_ap_continue() {
    detect_mac_protocol_U0_ap_continue = ap_const_logic_1;
}

void mac_header_strip::thread_detect_mac_protocol_U0_ap_start() {
    detect_mac_protocol_U0_ap_start = ap_const_logic_1;
}

void mac_header_strip::thread_start_for_strip_mac_header_U0_din() {
    start_for_strip_mac_header_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mac_header_strip::thread_strip_mac_header_U0_ap_continue() {
    strip_mac_header_U0_ap_continue = ap_const_logic_1;
}

void mac_header_strip::thread_strip_mac_header_U0_ap_start() {
    strip_mac_header_U0_ap_start = start_for_strip_mac_header_U0_empty_n.read();
}

void mac_header_strip::thread_strip_mac_header_U0_start_full_n() {
    strip_mac_header_U0_start_full_n = ap_const_logic_1;
}

void mac_header_strip::thread_strip_mac_header_U0_start_write() {
    strip_mac_header_U0_start_write = ap_const_logic_0;
}

void mac_header_strip::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"dataIn_TDATA\" :  \"" << dataIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TKEEP\" :  \"" << dataIn_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TLAST\" :  \"" << dataIn_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TUSER\" :  \"" << dataIn_TUSER.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"IPdataOut_TDATA\" :  \"" << IPdataOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"IPdataOut_TKEEP\" :  \"" << IPdataOut_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"IPdataOut_TLAST\" :  \"" << IPdataOut_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"IPdataOut_TUSER\" :  \"" << IPdataOut_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myMacAddress_V\" :  \"" << myMacAddress_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TVALID\" :  \"" << dataIn_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataIn_TREADY\" :  \"" << dataIn_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"IPdataOut_TVALID\" :  \"" << IPdataOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"IPdataOut_TREADY\" :  \"" << IPdataOut_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

