// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "detect_mac_protocol.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic detect_mac_protocol::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic detect_mac_protocol::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> detect_mac_protocol::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> detect_mac_protocol::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> detect_mac_protocol::ap_ST_iter1_fsm_state0 = "1";
const bool detect_mac_protocol::ap_const_boolean_1 = true;
const sc_lv<32> detect_mac_protocol::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> detect_mac_protocol::ap_const_lv1_0 = "0";
const sc_lv<1> detect_mac_protocol::ap_const_lv1_1 = "1";
const sc_lv<32> detect_mac_protocol::ap_const_lv32_1 = "1";
const sc_lv<16> detect_mac_protocol::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> detect_mac_protocol::ap_const_lv2_0 = "00";
const sc_lv<2> detect_mac_protocol::ap_const_lv2_1 = "1";
const sc_lv<2> detect_mac_protocol::ap_const_lv2_2 = "10";
const sc_lv<32> detect_mac_protocol::ap_const_lv32_28 = "101000";
const sc_lv<32> detect_mac_protocol::ap_const_lv32_2F = "101111";
const sc_lv<32> detect_mac_protocol::ap_const_lv32_20 = "100000";
const sc_lv<32> detect_mac_protocol::ap_const_lv32_27 = "100111";

detect_mac_protocol::detect_mac_protocol(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );

    SC_METHOD(thread_ap_condition_100);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_condition_155);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_fsmState_V );

    SC_METHOD(thread_ap_condition_202);
    sensitive << ( real_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( cond_i_fu_205_p2 );

    SC_METHOD(thread_ap_condition_210);
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( tmp_last_V_2_fu_193_p1 );

    SC_METHOD(thread_ap_condition_221);
    sensitive << ( ap_done_reg );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_condition_244);
    sensitive << ( real_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( dmp_fsmState_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );

    SC_METHOD(thread_ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4);
    sensitive << ( dmp_macType_V );
    sensitive << ( ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119 );
    sensitive << ( demorgan_fu_224_p2 );
    sensitive << ( tmp_i_i_fu_250_p3 );
    sensitive << ( ap_condition_202 );

    SC_METHOD(thread_ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4);
    sensitive << ( tmp_last_V_2_fu_193_p1 );
    sensitive << ( ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4 );
    sensitive << ( ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149 );
    sensitive << ( ap_condition_244 );

    SC_METHOD(thread_ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4);
    sensitive << ( cond_i_fu_205_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128 );
    sensitive << ( tmp_36_i_fu_211_p2 );
    sensitive << ( ap_condition_244 );

    SC_METHOD(thread_ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4);
    sensitive << ( tmp_last_V_2_fu_193_p1 );
    sensitive << ( ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4 );
    sensitive << ( ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161 );
    sensitive << ( ap_condition_244 );

    SC_METHOD(thread_ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4);
    sensitive << ( cond_i_fu_205_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138 );
    sensitive << ( ap_condition_244 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138);

    SC_METHOD(thread_ap_predicate_op10_read_state1);
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( dmp_fsmState_V );

    SC_METHOD(thread_ap_predicate_op59_write_state2);
    sensitive << ( dmp_fsmState_V_load_reg_384 );
    sensitive << ( tmp_reg_394 );
    sensitive << ( cond_i_reg_413 );
    sensitive << ( tmp_38_i_reg_420 );
    sensitive << ( or_cond_i_reg_424 );

    SC_METHOD(thread_ap_predicate_op68_write_state2);
    sensitive << ( dmp_fsmState_V_load_reg_384 );
    sensitive << ( tmp_i_reg_428 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_cond_i_fu_205_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( dmp_wordCount_V );

    SC_METHOD(thread_dataIn_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );

    SC_METHOD(thread_dataIn_TREADY);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_demorgan_fu_224_p2);
    sensitive << ( tmp_36_i_fu_211_p2 );
    sensitive << ( tmp_37_i_fu_218_p2 );

    SC_METHOD(thread_dmp_fsmState_V_load_load_fu_172_p1);
    sensitive << ( real_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dmp_fsmState_V );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ipDataFifo_V_blk_n);
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ipDataFifo_V_din);
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( tmp9_fu_345_p5 );
    sensitive << ( tmp_118_fu_372_p5 );
    sensitive << ( ap_condition_221 );

    SC_METHOD(thread_ipDataFifo_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_or_cond_i_fu_277_p2);
    sensitive << ( tmp_36_i_fu_211_p2 );
    sensitive << ( tmp_39_i_fu_271_p2 );

    SC_METHOD(thread_p_Result_i_i_15_fu_240_p4);
    sensitive << ( dataIn_TDATA );

    SC_METHOD(thread_p_Result_i_i_fu_230_p4);
    sensitive << ( dataIn_TDATA );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_storemerge_i_fu_293_p1);
    sensitive << ( tmp_35_i_fu_287_p2 );

    SC_METHOD(thread_tmp9_fu_345_p5);
    sensitive << ( dmp_prevWord_keep_V );
    sensitive << ( dmp_prevWord_last_V );
    sensitive << ( dmp_prevWord_user_V );
    sensitive << ( tmp_data_V_reg_388 );

    SC_METHOD(thread_tmp_10_fu_283_p1);
    sensitive << ( dataIn_TDATA );

    SC_METHOD(thread_tmp_118_fu_372_p5);
    sensitive << ( dmp_prevWord_keep_V );
    sensitive << ( dmp_prevWord_last_V );
    sensitive << ( dmp_prevWord_user_V );
    sensitive << ( tmp_data_V_reg_388 );

    SC_METHOD(thread_tmp_35_i_fu_287_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( myMacAddress_V );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( cond_i_fu_205_p2 );
    sensitive << ( tmp_10_fu_283_p1 );

    SC_METHOD(thread_tmp_36_i_fu_211_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( dmp_wordCount_V );
    sensitive << ( cond_i_fu_205_p2 );

    SC_METHOD(thread_tmp_37_i_fu_218_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( dmp_macType_V );
    sensitive << ( cond_i_fu_205_p2 );

    SC_METHOD(thread_tmp_38_i_fu_265_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( cond_i_fu_205_p2 );
    sensitive << ( ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4 );

    SC_METHOD(thread_tmp_39_i_fu_271_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_86_p6 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dataIn_TDATA );
    sensitive << ( dmp_fsmState_V );
    sensitive << ( dmp_prevWord_data_V );
    sensitive << ( cond_i_fu_205_p2 );
    sensitive << ( tmp_38_i_fu_265_p2 );

    SC_METHOD(thread_tmp_i_fu_321_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( dmp_fsmState_V_load_load_fu_172_p1 );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( dmp_macType_V );

    SC_METHOD(thread_tmp_i_i_fu_250_p3);
    sensitive << ( p_Result_i_i_15_fu_240_p4 );
    sensitive << ( p_Result_i_i_fu_230_p4 );

    SC_METHOD(thread_tmp_last_V_2_fu_193_p1);
    sensitive << ( dataIn_TLAST );

    SC_METHOD(thread_tmp_nbreadreq_fu_86_p6);
    sensitive << ( dataIn_TVALID );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op10_read_state1 );
    sensitive << ( ipDataFifo_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_predicate_op68_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    dmp_fsmState_V = "0";
    dmp_macType_V = "0000000000000000";
    dmp_prevWord_data_V = "0000000000000000000000000000000000000000000000000000000000000000";
    dmp_prevWord_keep_V = "00000000";
    dmp_prevWord_last_V = "0";
    dmp_prevWord_user_V = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    dmp_wordCount_V = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "detect_mac_protocol_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dataIn_TVALID, "(port)dataIn_TVALID");
    sc_trace(mVcdFile, ipDataFifo_V_din, "(port)ipDataFifo_V_din");
    sc_trace(mVcdFile, ipDataFifo_V_full_n, "(port)ipDataFifo_V_full_n");
    sc_trace(mVcdFile, ipDataFifo_V_write, "(port)ipDataFifo_V_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, dataIn_TDATA, "(port)dataIn_TDATA");
    sc_trace(mVcdFile, dataIn_TREADY, "(port)dataIn_TREADY");
    sc_trace(mVcdFile, dataIn_TKEEP, "(port)dataIn_TKEEP");
    sc_trace(mVcdFile, dataIn_TLAST, "(port)dataIn_TLAST");
    sc_trace(mVcdFile, dataIn_TUSER, "(port)dataIn_TUSER");
    sc_trace(mVcdFile, myMacAddress_V, "(port)myMacAddress_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, dmp_fsmState_V_load_load_fu_172_p1, "dmp_fsmState_V_load_load_fu_172_p1");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_86_p6, "tmp_nbreadreq_fu_86_p6");
    sc_trace(mVcdFile, ap_predicate_op10_read_state1, "ap_predicate_op10_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, dmp_fsmState_V_load_reg_384, "dmp_fsmState_V_load_reg_384");
    sc_trace(mVcdFile, tmp_reg_394, "tmp_reg_394");
    sc_trace(mVcdFile, cond_i_reg_413, "cond_i_reg_413");
    sc_trace(mVcdFile, tmp_38_i_reg_420, "tmp_38_i_reg_420");
    sc_trace(mVcdFile, or_cond_i_reg_424, "or_cond_i_reg_424");
    sc_trace(mVcdFile, ap_predicate_op59_write_state2, "ap_predicate_op59_write_state2");
    sc_trace(mVcdFile, tmp_i_reg_428, "tmp_i_reg_428");
    sc_trace(mVcdFile, ap_predicate_op68_write_state2, "ap_predicate_op68_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, dmp_fsmState_V, "dmp_fsmState_V");
    sc_trace(mVcdFile, dmp_macType_V, "dmp_macType_V");
    sc_trace(mVcdFile, dmp_prevWord_data_V, "dmp_prevWord_data_V");
    sc_trace(mVcdFile, dmp_prevWord_keep_V, "dmp_prevWord_keep_V");
    sc_trace(mVcdFile, dmp_prevWord_last_V, "dmp_prevWord_last_V");
    sc_trace(mVcdFile, dmp_prevWord_user_V, "dmp_prevWord_user_V");
    sc_trace(mVcdFile, dmp_wordCount_V, "dmp_wordCount_V");
    sc_trace(mVcdFile, dataIn_TDATA_blk_n, "dataIn_TDATA_blk_n");
    sc_trace(mVcdFile, ipDataFifo_V_blk_n, "ipDataFifo_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_reg_388, "tmp_data_V_reg_388");
    sc_trace(mVcdFile, tmp_keep_V_5_reg_398, "tmp_keep_V_5_reg_398");
    sc_trace(mVcdFile, tmp_last_V_2_fu_193_p1, "tmp_last_V_2_fu_193_p1");
    sc_trace(mVcdFile, tmp_last_V_2_reg_403, "tmp_last_V_2_reg_403");
    sc_trace(mVcdFile, tmp_user_V_4_reg_408, "tmp_user_V_4_reg_408");
    sc_trace(mVcdFile, cond_i_fu_205_p2, "cond_i_fu_205_p2");
    sc_trace(mVcdFile, tmp_38_i_fu_265_p2, "tmp_38_i_fu_265_p2");
    sc_trace(mVcdFile, or_cond_i_fu_277_p2, "or_cond_i_fu_277_p2");
    sc_trace(mVcdFile, tmp_i_fu_321_p2, "tmp_i_fu_321_p2");
    sc_trace(mVcdFile, ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4, "ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119, "ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119");
    sc_trace(mVcdFile, demorgan_fu_224_p2, "demorgan_fu_224_p2");
    sc_trace(mVcdFile, tmp_i_i_fu_250_p3, "tmp_i_i_fu_250_p3");
    sc_trace(mVcdFile, ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4, "ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128, "ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128");
    sc_trace(mVcdFile, tmp_36_i_fu_211_p2, "tmp_36_i_fu_211_p2");
    sc_trace(mVcdFile, ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4, "ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138, "ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138");
    sc_trace(mVcdFile, ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4, "ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149, "ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149");
    sc_trace(mVcdFile, ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4, "ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161, "ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161");
    sc_trace(mVcdFile, tmp9_fu_345_p5, "tmp9_fu_345_p5");
    sc_trace(mVcdFile, tmp_118_fu_372_p5, "tmp_118_fu_372_p5");
    sc_trace(mVcdFile, storemerge_i_fu_293_p1, "storemerge_i_fu_293_p1");
    sc_trace(mVcdFile, tmp_37_i_fu_218_p2, "tmp_37_i_fu_218_p2");
    sc_trace(mVcdFile, p_Result_i_i_15_fu_240_p4, "p_Result_i_i_15_fu_240_p4");
    sc_trace(mVcdFile, p_Result_i_i_fu_230_p4, "p_Result_i_i_fu_230_p4");
    sc_trace(mVcdFile, tmp_39_i_fu_271_p2, "tmp_39_i_fu_271_p2");
    sc_trace(mVcdFile, tmp_10_fu_283_p1, "tmp_10_fu_283_p1");
    sc_trace(mVcdFile, tmp_35_i_fu_287_p2, "tmp_35_i_fu_287_p2");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_condition_202, "ap_condition_202");
    sc_trace(mVcdFile, ap_condition_244, "ap_condition_244");
    sc_trace(mVcdFile, ap_condition_210, "ap_condition_210");
    sc_trace(mVcdFile, ap_condition_100, "ap_condition_100");
    sc_trace(mVcdFile, ap_condition_155, "ap_condition_155");
    sc_trace(mVcdFile, ap_condition_221, "ap_condition_221");
#endif

    }
}

detect_mac_protocol::~detect_mac_protocol() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void detect_mac_protocol::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_100.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(dmp_fsmState_V_load_load_fu_172_p1.read(), ap_const_lv1_1)) {
            dmp_fsmState_V = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(ap_condition_210.read(), ap_const_boolean_1)) {
            dmp_fsmState_V = ap_const_lv1_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_155.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, cond_i_fu_205_p2.read())) {
            dmp_macType_V = storemerge_i_fu_293_p1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_fu_224_p2.read()))) {
            dmp_macType_V = tmp_i_i_fu_250_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        cond_i_reg_413 = cond_i_fu_205_p2.read();
        dmp_prevWord_data_V = dataIn_TDATA.read();
        tmp_keep_V_5_reg_398 = dataIn_TKEEP.read();
        tmp_last_V_2_reg_403 = dataIn_TLAST.read();
        tmp_user_V_4_reg_408 = dataIn_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        dmp_fsmState_V_load_reg_384 = dmp_fsmState_V.read();
        tmp_data_V_reg_388 = dmp_prevWord_data_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, dmp_fsmState_V_load_reg_384.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_394.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))))) {
        dmp_prevWord_keep_V = tmp_keep_V_5_reg_398.read();
        dmp_prevWord_last_V = tmp_last_V_2_reg_403.read();
        dmp_prevWord_user_V = tmp_user_V_4_reg_408.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4.read()))) {
        dmp_wordCount_V = ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_38_i_fu_265_p2.read()))) {
        or_cond_i_reg_424 = or_cond_i_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read()))) {
        tmp_38_i_reg_420 = tmp_38_i_fu_265_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) && esl_seteq<1,1,1>(dmp_fsmState_V_load_load_fu_172_p1.read(), ap_const_lv1_1))) {
        tmp_i_reg_428 = tmp_i_fu_321_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        tmp_reg_394 = tmp_nbreadreq_fu_86_p6.read();
    }
}

void detect_mac_protocol::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void detect_mac_protocol::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void detect_mac_protocol::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void detect_mac_protocol::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void detect_mac_protocol::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read())));
}

void detect_mac_protocol::thread_ap_condition_100() {
    ap_condition_100 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))));
}

void detect_mac_protocol::thread_ap_condition_155() {
    ap_condition_155 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))));
}

void detect_mac_protocol::thread_ap_condition_202() {
    ap_condition_202 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read()));
}

void detect_mac_protocol::thread_ap_condition_210() {
    ap_condition_210 = (esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_2_fu_193_p1.read()));
}

void detect_mac_protocol::thread_ap_condition_221() {
    ap_condition_221 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))));
}

void detect_mac_protocol::thread_ap_condition_244() {
    ap_condition_244 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()));
}

void detect_mac_protocol::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void detect_mac_protocol::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void detect_mac_protocol::thread_ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4() {
    if (esl_seteq<1,1,1>(ap_condition_202.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_fu_224_p2.read())) {
            ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4 = tmp_i_i_fu_250_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, demorgan_fu_224_p2.read())) {
            ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4 = dmp_macType_V.read();
        } else {
            ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4 = ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119.read();
        }
    } else {
        ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4 = ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119.read();
    }
}

void detect_mac_protocol::thread_ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4() {
    if (esl_seteq<1,1,1>(ap_condition_244.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_2_fu_193_p1.read())) {
            ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4 = ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_2_fu_193_p1.read())) {
            ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4 = ap_const_lv1_1;
        } else {
            ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149.read();
        }
    } else {
        ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149.read();
    }
}

void detect_mac_protocol::thread_ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4() {
    if (esl_seteq<1,1,1>(ap_condition_244.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read())) {
            ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4 = tmp_36_i_fu_211_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, cond_i_fu_205_p2.read())) {
            ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4 = ap_const_lv1_1;
        } else {
            ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128.read();
        }
    } else {
        ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128.read();
    }
}

void detect_mac_protocol::thread_ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4() {
    if (esl_seteq<1,1,1>(ap_condition_244.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_2_fu_193_p1.read())) {
            ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4 = ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_2_fu_193_p1.read())) {
            ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4 = ap_const_lv2_0;
        } else {
            ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161.read();
        }
    } else {
        ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161.read();
    }
}

void detect_mac_protocol::thread_ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4() {
    if (esl_seteq<1,1,1>(ap_condition_244.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_fu_205_p2.read())) {
            ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4 = ap_const_lv2_2;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, cond_i_fu_205_p2.read())) {
            ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4 = ap_const_lv2_1;
        } else {
            ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138.read();
        }
    } else {
        ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4 = ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138.read();
    }
}

void detect_mac_protocol::thread_ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119() {
    ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void detect_mac_protocol::thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149() {
    ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149 =  (sc_lv<1>) ("X");
}

void detect_mac_protocol::thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128() {
    ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128 =  (sc_lv<1>) ("X");
}

void detect_mac_protocol::thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161() {
    ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161 =  (sc_lv<2>) ("XX");
}

void detect_mac_protocol::thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138() {
    ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138 =  (sc_lv<2>) ("XX");
}

void detect_mac_protocol::thread_ap_predicate_op10_read_state1() {
    ap_predicate_op10_read_state1 = (esl_seteq<1,1,1>(dmp_fsmState_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_86_p6.read(), ap_const_lv1_1));
}

void detect_mac_protocol::thread_ap_predicate_op59_write_state2() {
    ap_predicate_op59_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, dmp_fsmState_V_load_reg_384.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_394.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, cond_i_reg_413.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_38_i_reg_420.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_i_reg_424.read()));
}

void detect_mac_protocol::thread_ap_predicate_op68_write_state2() {
    ap_predicate_op68_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, dmp_fsmState_V_load_reg_384.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_428.read()));
}

void detect_mac_protocol::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void detect_mac_protocol::thread_cond_i_fu_205_p2() {
    cond_i_fu_205_p2 = (!dmp_wordCount_V.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(dmp_wordCount_V.read() == ap_const_lv2_0);
}

void detect_mac_protocol::thread_dataIn_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        dataIn_TDATA_blk_n = dataIn_TVALID.read();
    } else {
        dataIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void detect_mac_protocol::thread_dataIn_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        dataIn_TREADY = ap_const_logic_1;
    } else {
        dataIn_TREADY = ap_const_logic_0;
    }
}

void detect_mac_protocol::thread_demorgan_fu_224_p2() {
    demorgan_fu_224_p2 = (tmp_36_i_fu_211_p2.read() & tmp_37_i_fu_218_p2.read());
}

void detect_mac_protocol::thread_dmp_fsmState_V_load_load_fu_172_p1() {
    dmp_fsmState_V_load_load_fu_172_p1 = dmp_fsmState_V.read();
}

void detect_mac_protocol::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void detect_mac_protocol::thread_ipDataFifo_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())))) {
        ipDataFifo_V_blk_n = ipDataFifo_V_full_n.read();
    } else {
        ipDataFifo_V_blk_n = ap_const_logic_1;
    }
}

void detect_mac_protocol::thread_ipDataFifo_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_221.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read())) {
            ipDataFifo_V_din = tmp_118_fu_372_p5.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) {
            ipDataFifo_V_din = tmp9_fu_345_p5.read();
        } else {
            ipDataFifo_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ipDataFifo_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void detect_mac_protocol::thread_ipDataFifo_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read())))))) {
        ipDataFifo_V_write = ap_const_logic_1;
    } else {
        ipDataFifo_V_write = ap_const_logic_0;
    }
}

void detect_mac_protocol::thread_or_cond_i_fu_277_p2() {
    or_cond_i_fu_277_p2 = (tmp_36_i_fu_211_p2.read() & tmp_39_i_fu_271_p2.read());
}

void detect_mac_protocol::thread_p_Result_i_i_15_fu_240_p4() {
    p_Result_i_i_15_fu_240_p4 = dataIn_TDATA.read().range(39, 32);
}

void detect_mac_protocol::thread_p_Result_i_i_fu_230_p4() {
    p_Result_i_i_fu_230_p4 = dataIn_TDATA.read().range(47, 40);
}

void detect_mac_protocol::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void detect_mac_protocol::thread_start_out() {
    start_out = real_start.read();
}

void detect_mac_protocol::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void detect_mac_protocol::thread_storemerge_i_fu_293_p1() {
    storemerge_i_fu_293_p1 = esl_zext<16,1>(tmp_35_i_fu_287_p2.read());
}

void detect_mac_protocol::thread_tmp9_fu_345_p5() {
    tmp9_fu_345_p5 = esl_concat<121,64>(esl_concat<113,8>(esl_concat<112,1>(dmp_prevWord_user_V.read(), dmp_prevWord_last_V.read()), dmp_prevWord_keep_V.read()), tmp_data_V_reg_388.read());
}

void detect_mac_protocol::thread_tmp_10_fu_283_p1() {
    tmp_10_fu_283_p1 = dataIn_TDATA.read().range(48-1, 0);
}

void detect_mac_protocol::thread_tmp_118_fu_372_p5() {
    tmp_118_fu_372_p5 = esl_concat<121,64>(esl_concat<113,8>(esl_concat<112,1>(dmp_prevWord_user_V.read(), dmp_prevWord_last_V.read()), dmp_prevWord_keep_V.read()), tmp_data_V_reg_388.read());
}

void detect_mac_protocol::thread_tmp_35_i_fu_287_p2() {
    tmp_35_i_fu_287_p2 = (!tmp_10_fu_283_p1.read().is_01() || !myMacAddress_V.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_283_p1.read() == myMacAddress_V.read());
}

void detect_mac_protocol::thread_tmp_36_i_fu_211_p2() {
    tmp_36_i_fu_211_p2 = (!dmp_wordCount_V.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dmp_wordCount_V.read() == ap_const_lv2_1);
}

void detect_mac_protocol::thread_tmp_37_i_fu_218_p2() {
    tmp_37_i_fu_218_p2 = (!dmp_macType_V.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(dmp_macType_V.read() != ap_const_lv16_0);
}

void detect_mac_protocol::thread_tmp_38_i_fu_265_p2() {
    tmp_38_i_fu_265_p2 = (!ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4.read() == ap_const_lv16_0);
}

void detect_mac_protocol::thread_tmp_39_i_fu_271_p2() {
    tmp_39_i_fu_271_p2 = (!dmp_prevWord_data_V.read().is_01() || !dataIn_TDATA.read().is_01())? sc_lv<1>(): sc_lv<1>(dmp_prevWord_data_V.read() == dataIn_TDATA.read());
}

void detect_mac_protocol::thread_tmp_i_fu_321_p2() {
    tmp_i_fu_321_p2 = (!dmp_macType_V.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(dmp_macType_V.read() == ap_const_lv16_0);
}

void detect_mac_protocol::thread_tmp_i_i_fu_250_p3() {
    tmp_i_i_fu_250_p3 = esl_concat<8,8>(p_Result_i_i_15_fu_240_p4.read(), p_Result_i_i_fu_230_p4.read());
}

void detect_mac_protocol::thread_tmp_last_V_2_fu_193_p1() {
    tmp_last_V_2_fu_193_p1 = dataIn_TLAST.read();
}

void detect_mac_protocol::thread_tmp_nbreadreq_fu_86_p6() {
    tmp_nbreadreq_fu_86_p6 =  (sc_lv<1>) ((dataIn_TVALID.read()));
}

void detect_mac_protocol::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void detect_mac_protocol::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || 
    esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ipDataFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

