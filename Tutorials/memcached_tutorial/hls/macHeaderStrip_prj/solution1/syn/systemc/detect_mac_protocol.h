// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _detect_mac_protocol_HH_
#define _detect_mac_protocol_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct detect_mac_protocol : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > dataIn_TVALID;
    sc_out< sc_lv<185> > ipDataFifo_V_din;
    sc_in< sc_logic > ipDataFifo_V_full_n;
    sc_out< sc_logic > ipDataFifo_V_write;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<64> > dataIn_TDATA;
    sc_out< sc_logic > dataIn_TREADY;
    sc_in< sc_lv<8> > dataIn_TKEEP;
    sc_in< sc_lv<1> > dataIn_TLAST;
    sc_in< sc_lv<112> > dataIn_TUSER;
    sc_in< sc_lv<48> > myMacAddress_V;


    // Module declarations
    detect_mac_protocol(sc_module_name name);
    SC_HAS_PROCESS(detect_mac_protocol);

    ~detect_mac_protocol();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > dmp_fsmState_V_load_load_fu_172_p1;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_86_p6;
    sc_signal< bool > ap_predicate_op10_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > dmp_fsmState_V_load_reg_384;
    sc_signal< sc_lv<1> > tmp_reg_394;
    sc_signal< sc_lv<1> > cond_i_reg_413;
    sc_signal< sc_lv<1> > tmp_38_i_reg_420;
    sc_signal< sc_lv<1> > or_cond_i_reg_424;
    sc_signal< bool > ap_predicate_op59_write_state2;
    sc_signal< sc_lv<1> > tmp_i_reg_428;
    sc_signal< bool > ap_predicate_op68_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< sc_lv<1> > dmp_fsmState_V;
    sc_signal< sc_lv<16> > dmp_macType_V;
    sc_signal< sc_lv<64> > dmp_prevWord_data_V;
    sc_signal< sc_lv<8> > dmp_prevWord_keep_V;
    sc_signal< sc_lv<1> > dmp_prevWord_last_V;
    sc_signal< sc_lv<112> > dmp_prevWord_user_V;
    sc_signal< sc_lv<2> > dmp_wordCount_V;
    sc_signal< sc_logic > dataIn_TDATA_blk_n;
    sc_signal< sc_logic > ipDataFifo_V_blk_n;
    sc_signal< sc_lv<64> > tmp_data_V_reg_388;
    sc_signal< sc_lv<8> > tmp_keep_V_5_reg_398;
    sc_signal< sc_lv<1> > tmp_last_V_2_fu_193_p1;
    sc_signal< sc_lv<1> > tmp_last_V_2_reg_403;
    sc_signal< sc_lv<112> > tmp_user_V_4_reg_408;
    sc_signal< sc_lv<1> > cond_i_fu_205_p2;
    sc_signal< sc_lv<1> > tmp_38_i_fu_265_p2;
    sc_signal< sc_lv<1> > or_cond_i_fu_277_p2;
    sc_signal< sc_lv<1> > tmp_i_fu_321_p2;
    sc_signal< sc_lv<16> > ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119;
    sc_signal< sc_lv<1> > demorgan_fu_224_p2;
    sc_signal< sc_lv<16> > tmp_i_i_fu_250_p3;
    sc_signal< sc_lv<1> > ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128;
    sc_signal< sc_lv<1> > tmp_36_i_fu_211_p2;
    sc_signal< sc_lv<2> > ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4;
    sc_signal< sc_lv<2> > ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138;
    sc_signal< sc_lv<1> > ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149;
    sc_signal< sc_lv<2> > ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4;
    sc_signal< sc_lv<2> > ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161;
    sc_signal< sc_lv<185> > tmp9_fu_345_p5;
    sc_signal< sc_lv<185> > tmp_118_fu_372_p5;
    sc_signal< sc_lv<16> > storemerge_i_fu_293_p1;
    sc_signal< sc_lv<1> > tmp_37_i_fu_218_p2;
    sc_signal< sc_lv<8> > p_Result_i_i_15_fu_240_p4;
    sc_signal< sc_lv<8> > p_Result_i_i_fu_230_p4;
    sc_signal< sc_lv<1> > tmp_39_i_fu_271_p2;
    sc_signal< sc_lv<48> > tmp_10_fu_283_p1;
    sc_signal< sc_lv<1> > tmp_35_i_fu_287_p2;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    sc_signal< bool > ap_condition_202;
    sc_signal< bool > ap_condition_244;
    sc_signal< bool > ap_condition_210;
    sc_signal< bool > ap_condition_100;
    sc_signal< bool > ap_condition_155;
    sc_signal< bool > ap_condition_221;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state0();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_100();
    void thread_ap_condition_155();
    void thread_ap_condition_202();
    void thread_ap_condition_210();
    void thread_ap_condition_221();
    void thread_ap_condition_244();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_dmp_macType_V_loc_1_s_phi_fu_122_p4();
    void thread_ap_phi_mux_dmp_wordCount_V_flag_1_phi_fu_152_p4();
    void thread_ap_phi_mux_dmp_wordCount_V_flag_phi_fu_131_p4();
    void thread_ap_phi_mux_dmp_wordCount_V_new_1_phi_fu_164_p4();
    void thread_ap_phi_mux_dmp_wordCount_V_new_s_phi_fu_141_p4();
    void thread_ap_phi_reg_pp0_iter0_dmp_macType_V_loc_1_s_reg_119();
    void thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_1_reg_149();
    void thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_flag_reg_128();
    void thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_1_reg_161();
    void thread_ap_phi_reg_pp0_iter0_dmp_wordCount_V_new_s_reg_138();
    void thread_ap_predicate_op10_read_state1();
    void thread_ap_predicate_op59_write_state2();
    void thread_ap_predicate_op68_write_state2();
    void thread_ap_ready();
    void thread_cond_i_fu_205_p2();
    void thread_dataIn_TDATA_blk_n();
    void thread_dataIn_TREADY();
    void thread_demorgan_fu_224_p2();
    void thread_dmp_fsmState_V_load_load_fu_172_p1();
    void thread_internal_ap_ready();
    void thread_ipDataFifo_V_blk_n();
    void thread_ipDataFifo_V_din();
    void thread_ipDataFifo_V_write();
    void thread_or_cond_i_fu_277_p2();
    void thread_p_Result_i_i_15_fu_240_p4();
    void thread_p_Result_i_i_fu_230_p4();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_storemerge_i_fu_293_p1();
    void thread_tmp9_fu_345_p5();
    void thread_tmp_10_fu_283_p1();
    void thread_tmp_118_fu_372_p5();
    void thread_tmp_35_i_fu_287_p2();
    void thread_tmp_36_i_fu_211_p2();
    void thread_tmp_37_i_fu_218_p2();
    void thread_tmp_38_i_fu_265_p2();
    void thread_tmp_39_i_fu_271_p2();
    void thread_tmp_i_fu_321_p2();
    void thread_tmp_i_i_fu_250_p3();
    void thread_tmp_last_V_2_fu_193_p1();
    void thread_tmp_nbreadreq_fu_86_p6();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
};

}

using namespace ap_rtl;

#endif
