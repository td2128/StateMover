// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mac_header_strip_HH_
#define _mac_header_strip_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "detect_mac_protocol.h"
#include "strip_mac_header.h"
#include "fifo_w185_d4_A.h"
#include "start_for_strip_mac_header_U0.h"

namespace ap_rtl {

struct mac_header_strip : public sc_module {
    // Port declarations 15
    sc_in< sc_lv<64> > dataIn_TDATA;
    sc_in< sc_lv<8> > dataIn_TKEEP;
    sc_in< sc_lv<1> > dataIn_TLAST;
    sc_in< sc_lv<112> > dataIn_TUSER;
    sc_out< sc_lv<64> > IPdataOut_TDATA;
    sc_out< sc_lv<8> > IPdataOut_TKEEP;
    sc_out< sc_lv<1> > IPdataOut_TLAST;
    sc_out< sc_lv<112> > IPdataOut_TUSER;
    sc_in< sc_lv<48> > myMacAddress_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > dataIn_TVALID;
    sc_out< sc_logic > dataIn_TREADY;
    sc_out< sc_logic > IPdataOut_TVALID;
    sc_in< sc_logic > IPdataOut_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mac_header_strip(sc_module_name name);
    SC_HAS_PROCESS(mac_header_strip);

    ~mac_header_strip();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    detect_mac_protocol* detect_mac_protocol_U0;
    strip_mac_header* strip_mac_header_U0;
    fifo_w185_d4_A* ipDataFifo_V_U;
    start_for_strip_mac_header_U0* start_for_strip_mac_header_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > detect_mac_protocol_U0_ap_start;
    sc_signal< sc_logic > detect_mac_protocol_U0_ap_done;
    sc_signal< sc_logic > detect_mac_protocol_U0_ap_continue;
    sc_signal< sc_logic > detect_mac_protocol_U0_ap_idle;
    sc_signal< sc_logic > detect_mac_protocol_U0_ap_ready;
    sc_signal< sc_lv<185> > detect_mac_protocol_U0_ipDataFifo_V_din;
    sc_signal< sc_logic > detect_mac_protocol_U0_ipDataFifo_V_write;
    sc_signal< sc_logic > detect_mac_protocol_U0_start_out;
    sc_signal< sc_logic > detect_mac_protocol_U0_start_write;
    sc_signal< sc_logic > detect_mac_protocol_U0_dataIn_TREADY;
    sc_signal< sc_logic > strip_mac_header_U0_ap_start;
    sc_signal< sc_logic > strip_mac_header_U0_ap_done;
    sc_signal< sc_logic > strip_mac_header_U0_ap_continue;
    sc_signal< sc_logic > strip_mac_header_U0_ap_idle;
    sc_signal< sc_logic > strip_mac_header_U0_ap_ready;
    sc_signal< sc_logic > strip_mac_header_U0_ipDataFifo_V_read;
    sc_signal< sc_lv<64> > strip_mac_header_U0_IPdataOut_TDATA;
    sc_signal< sc_logic > strip_mac_header_U0_IPdataOut_TVALID;
    sc_signal< sc_lv<8> > strip_mac_header_U0_IPdataOut_TKEEP;
    sc_signal< sc_lv<1> > strip_mac_header_U0_IPdataOut_TLAST;
    sc_signal< sc_lv<112> > strip_mac_header_U0_IPdataOut_TUSER;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ipDataFifo_V_full_n;
    sc_signal< sc_lv<185> > ipDataFifo_V_dout;
    sc_signal< sc_logic > ipDataFifo_V_empty_n;
    sc_signal< sc_lv<1> > start_for_strip_mac_header_U0_din;
    sc_signal< sc_logic > start_for_strip_mac_header_U0_full_n;
    sc_signal< sc_lv<1> > start_for_strip_mac_header_U0_dout;
    sc_signal< sc_logic > start_for_strip_mac_header_U0_empty_n;
    sc_signal< sc_logic > strip_mac_header_U0_start_full_n;
    sc_signal< sc_logic > strip_mac_header_U0_start_write;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<112> ap_const_lv112_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_IPdataOut_TDATA();
    void thread_IPdataOut_TKEEP();
    void thread_IPdataOut_TLAST();
    void thread_IPdataOut_TUSER();
    void thread_IPdataOut_TVALID();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_dataIn_TREADY();
    void thread_detect_mac_protocol_U0_ap_continue();
    void thread_detect_mac_protocol_U0_ap_start();
    void thread_start_for_strip_mac_header_U0_din();
    void thread_strip_mac_header_U0_ap_continue();
    void thread_strip_mac_header_U0_ap_start();
    void thread_strip_mac_header_U0_start_full_n();
    void thread_strip_mac_header_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
