// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _memcachedPipeline_flashReceiveNoFilter_HH_
#define _memcachedPipeline_flashReceiveNoFilter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct memcachedPipeline_flashReceiveNoFilter : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > flash_Disp2rec_V_V_dout;
    sc_in< sc_logic > flash_Disp2rec_V_V_empty_n;
    sc_out< sc_logic > flash_Disp2rec_V_V_read;
    sc_in< sc_logic > memRdData_V_V_TVALID;
    sc_out< sc_lv<64> > flashGetPath2remux_V_V_din;
    sc_in< sc_logic > flashGetPath2remux_V_V_full_n;
    sc_out< sc_logic > flashGetPath2remux_V_V_write;
    sc_in< sc_lv<64> > memRdData_V_V_TDATA;
    sc_out< sc_logic > memRdData_V_V_TREADY;


    // Module declarations
    memcachedPipeline_flashReceiveNoFilter(sc_module_name name);
    SC_HAS_PROCESS(memcachedPipeline_flashReceiveNoFilter);

    ~memcachedPipeline_flashReceiveNoFilter();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm0;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm0_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<2> > ap_CS_fsm1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st0_fsm1_0;
    sc_signal< bool > ap_sig_bdd_34;
    sc_signal< sc_lv<1> > tmp_17_nbreadreq_fu_66_p3;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_74_p3;
    sc_signal< bool > ap_sig_bdd_67;
    sc_signal< sc_lv<1> > flashGetState_load_reg_203;
    sc_signal< sc_lv<1> > tmp_17_reg_207;
    sc_signal< sc_lv<1> > tmp_18_reg_211;
    sc_signal< sc_lv<1> > tmp_reg_215;
    sc_signal< bool > ap_sig_bdd_95;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm1_1;
    sc_signal< bool > ap_sig_bdd_101;
    sc_signal< sc_lv<1> > flashGetState;
    sc_signal< sc_lv<16> > getValueLength_V;
    sc_signal< sc_lv<8> > getCounter;
    sc_signal< sc_lv<64> > reg_102;
    sc_signal< sc_lv<1> > tmp_41_fu_169_p2;
    sc_signal< sc_lv<1> > tmp_41_reg_219;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_41_reg_219_pp0_it0;
    sc_signal< sc_lv<16> > tmp_42_fu_115_p2;
    sc_signal< sc_lv<16> > storemerge_fu_155_p3;
    sc_signal< sc_lv<8> > tmp_43_fu_185_p2;
    sc_signal< sc_lv<13> > tmp_56_fu_133_p4;
    sc_signal< sc_lv<1> > icmp_fu_143_p2;
    sc_signal< sc_lv<16> > tmp_s_fu_149_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm0;
    sc_signal< sc_lv<2> > ap_NS_fsm1;
    sc_signal< bool > ap_sig_bdd_50;
    sc_signal< bool > ap_sig_bdd_217;
    sc_signal< bool > ap_sig_bdd_215;
    sc_signal< bool > ap_sig_bdd_86;
    sc_signal< bool > ap_sig_bdd_156;
    sc_signal< bool > ap_sig_bdd_139;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_st1_fsm0_0;
    static const sc_lv<2> ap_ST_st2_fsm1_1;
    static const sc_lv<2> ap_ST_st0_fsm1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_FFF8;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<64> ap_const_lv64_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppstg_tmp_41_reg_219_pp0_it0();
    void thread_ap_sig_bdd_101();
    void thread_ap_sig_bdd_139();
    void thread_ap_sig_bdd_156();
    void thread_ap_sig_bdd_215();
    void thread_ap_sig_bdd_217();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_34();
    void thread_ap_sig_bdd_50();
    void thread_ap_sig_bdd_67();
    void thread_ap_sig_bdd_86();
    void thread_ap_sig_bdd_95();
    void thread_ap_sig_cseq_ST_st0_fsm1_0();
    void thread_ap_sig_cseq_ST_st1_fsm0_0();
    void thread_ap_sig_cseq_ST_st2_fsm1_1();
    void thread_flashGetPath2remux_V_V_din();
    void thread_flashGetPath2remux_V_V_write();
    void thread_flash_Disp2rec_V_V_read();
    void thread_grp_nbreadreq_fu_74_p3();
    void thread_icmp_fu_143_p2();
    void thread_memRdData_V_V_TREADY();
    void thread_storemerge_fu_155_p3();
    void thread_tmp_17_nbreadreq_fu_66_p3();
    void thread_tmp_41_fu_169_p2();
    void thread_tmp_42_fu_115_p2();
    void thread_tmp_43_fu_185_p2();
    void thread_tmp_56_fu_133_p4();
    void thread_tmp_s_fu_149_p2();
    void thread_ap_NS_fsm1();
    void thread_ap_NS_fsm0();
};

}

using namespace ap_rtl;

#endif
