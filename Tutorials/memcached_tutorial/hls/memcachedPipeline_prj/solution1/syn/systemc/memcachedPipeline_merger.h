// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _memcachedPipeline_merger_HH_
#define _memcachedPipeline_merger_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct memcachedPipeline_merger : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > valueStoreDram2merger_V_dout;
    sc_in< sc_logic > valueStoreDram2merger_V_empty_n;
    sc_out< sc_logic > valueStoreDram2merger_V_read;
    sc_in< sc_lv<256> > valueStoreFlash2merger_V_dout;
    sc_in< sc_logic > valueStoreFlash2merger_V_empty_n;
    sc_out< sc_logic > valueStoreFlash2merger_V_read;
    sc_out< sc_lv<256> > merger2responseFormatter_V_din;
    sc_in< sc_logic > merger2responseFormatter_V_full_n;
    sc_out< sc_logic > merger2responseFormatter_V_write;


    // Module declarations
    memcachedPipeline_merger(sc_module_name name);
    SC_HAS_PROCESS(memcachedPipeline_merger);

    ~memcachedPipeline_merger();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_120_p3;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_128_p3;
    sc_signal< bool > ap_sig_bdd_76;
    sc_signal< sc_lv<1> > mergerState_load_reg_214;
    sc_signal< sc_lv<1> > tmp_reg_222;
    sc_signal< sc_lv<1> > tmp_1_reg_226;
    sc_signal< sc_lv<1> > dramOrFlash_V_1_load_reg_218;
    sc_signal< sc_lv<1> > tmp_3_reg_230;
    sc_signal< sc_lv<1> > tmp_2_reg_238;
    sc_signal< bool > ap_sig_bdd_115;
    sc_signal< sc_lv<1> > mergerState;
    sc_signal< sc_lv<1> > dramOrFlash_V_1;
    sc_signal< sc_lv<256> > reg_168;
    sc_signal< sc_lv<256> > reg_173;
    sc_signal< sc_lv<1> > tmp_EOP_V_1_fu_198_p3;
    sc_signal< sc_lv<1> > tmp_EOP_V_fu_206_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    sc_signal< bool > ap_sig_bdd_205;
    sc_signal< bool > ap_sig_bdd_204;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<256> ap_const_lv256_lc_1;
    // Thread declarations
    void thread_ap_clk_pos_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_sig_bdd_115();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_204();
    void thread_ap_sig_bdd_205();
    void thread_ap_sig_bdd_76();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_grp_nbreadreq_fu_120_p3();
    void thread_grp_nbreadreq_fu_128_p3();
    void thread_merger2responseFormatter_V_din();
    void thread_merger2responseFormatter_V_write();
    void thread_tmp_EOP_V_1_fu_198_p3();
    void thread_tmp_EOP_V_fu_206_p3();
    void thread_valueStoreDram2merger_V_read();
    void thread_valueStoreFlash2merger_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
