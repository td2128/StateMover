// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "memcachedPipeline_merger.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic memcachedPipeline_merger::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic memcachedPipeline_merger::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> memcachedPipeline_merger::ap_ST_pp0_stg0_fsm_0 = "1";
const sc_lv<32> memcachedPipeline_merger::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> memcachedPipeline_merger::ap_const_lv1_1 = "1";
const sc_lv<1> memcachedPipeline_merger::ap_const_lv1_0 = "0";
const sc_lv<32> memcachedPipeline_merger::ap_const_lv32_7F = "1111111";
const sc_lv<256> memcachedPipeline_merger::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

memcachedPipeline_merger::memcachedPipeline_merger(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_pos_reset_);
    dont_initialize();
    sensitive << ( ap_rst.pos() );
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_sig_bdd_115);
    sensitive << ( merger2responseFormatter_V_full_n );
    sensitive << ( mergerState_load_reg_214 );
    sensitive << ( tmp_reg_222 );
    sensitive << ( tmp_1_reg_226 );
    sensitive << ( dramOrFlash_V_1_load_reg_218 );
    sensitive << ( tmp_3_reg_230 );
    sensitive << ( tmp_2_reg_238 );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_204);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( mergerState );

    SC_METHOD(thread_ap_sig_bdd_205);
    sensitive << ( grp_nbreadreq_fu_120_p3 );
    sensitive << ( grp_nbreadreq_fu_128_p3 );

    SC_METHOD(thread_ap_sig_bdd_76);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( valueStoreDram2merger_V_empty_n );
    sensitive << ( grp_nbreadreq_fu_120_p3 );
    sensitive << ( grp_nbreadreq_fu_128_p3 );
    sensitive << ( valueStoreFlash2merger_V_empty_n );
    sensitive << ( mergerState );
    sensitive << ( dramOrFlash_V_1 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_grp_nbreadreq_fu_120_p3);
    sensitive << ( valueStoreFlash2merger_V_empty_n );

    SC_METHOD(thread_grp_nbreadreq_fu_128_p3);
    sensitive << ( valueStoreDram2merger_V_empty_n );

    SC_METHOD(thread_merger2responseFormatter_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( mergerState_load_reg_214 );
    sensitive << ( tmp_reg_222 );
    sensitive << ( tmp_1_reg_226 );
    sensitive << ( dramOrFlash_V_1_load_reg_218 );
    sensitive << ( tmp_3_reg_230 );
    sensitive << ( tmp_2_reg_238 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( reg_168 );
    sensitive << ( reg_173 );

    SC_METHOD(thread_merger2responseFormatter_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( mergerState_load_reg_214 );
    sensitive << ( tmp_reg_222 );
    sensitive << ( tmp_1_reg_226 );
    sensitive << ( dramOrFlash_V_1_load_reg_218 );
    sensitive << ( tmp_3_reg_230 );
    sensitive << ( tmp_2_reg_238 );
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_tmp_EOP_V_1_fu_198_p3);
    sensitive << ( valueStoreFlash2merger_V_dout );

    SC_METHOD(thread_tmp_EOP_V_fu_206_p3);
    sensitive << ( valueStoreDram2merger_V_dout );

    SC_METHOD(thread_valueStoreDram2merger_V_read);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( grp_nbreadreq_fu_120_p3 );
    sensitive << ( grp_nbreadreq_fu_128_p3 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( mergerState );
    sensitive << ( dramOrFlash_V_1 );

    SC_METHOD(thread_valueStoreFlash2merger_V_read);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( grp_nbreadreq_fu_120_p3 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( mergerState );
    sensitive << ( dramOrFlash_V_1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    mergerState_load_reg_214 = "0";
    tmp_reg_222 = "0";
    tmp_1_reg_226 = "0";
    dramOrFlash_V_1_load_reg_218 = "0";
    tmp_3_reg_230 = "0";
    tmp_2_reg_238 = "0";
    mergerState = "0";
    dramOrFlash_V_1 = "0";
    reg_168 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    reg_173 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "memcachedPipeline_merger_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, valueStoreDram2merger_V_dout, "(port)valueStoreDram2merger_V_dout");
    sc_trace(mVcdFile, valueStoreDram2merger_V_empty_n, "(port)valueStoreDram2merger_V_empty_n");
    sc_trace(mVcdFile, valueStoreDram2merger_V_read, "(port)valueStoreDram2merger_V_read");
    sc_trace(mVcdFile, valueStoreFlash2merger_V_dout, "(port)valueStoreFlash2merger_V_dout");
    sc_trace(mVcdFile, valueStoreFlash2merger_V_empty_n, "(port)valueStoreFlash2merger_V_empty_n");
    sc_trace(mVcdFile, valueStoreFlash2merger_V_read, "(port)valueStoreFlash2merger_V_read");
    sc_trace(mVcdFile, merger2responseFormatter_V_din, "(port)merger2responseFormatter_V_din");
    sc_trace(mVcdFile, merger2responseFormatter_V_full_n, "(port)merger2responseFormatter_V_full_n");
    sc_trace(mVcdFile, merger2responseFormatter_V_write, "(port)merger2responseFormatter_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_0, "ap_sig_cseq_ST_pp0_stg0_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, grp_nbreadreq_fu_120_p3, "grp_nbreadreq_fu_120_p3");
    sc_trace(mVcdFile, grp_nbreadreq_fu_128_p3, "grp_nbreadreq_fu_128_p3");
    sc_trace(mVcdFile, ap_sig_bdd_76, "ap_sig_bdd_76");
    sc_trace(mVcdFile, mergerState_load_reg_214, "mergerState_load_reg_214");
    sc_trace(mVcdFile, tmp_reg_222, "tmp_reg_222");
    sc_trace(mVcdFile, tmp_1_reg_226, "tmp_1_reg_226");
    sc_trace(mVcdFile, dramOrFlash_V_1_load_reg_218, "dramOrFlash_V_1_load_reg_218");
    sc_trace(mVcdFile, tmp_3_reg_230, "tmp_3_reg_230");
    sc_trace(mVcdFile, tmp_2_reg_238, "tmp_2_reg_238");
    sc_trace(mVcdFile, ap_sig_bdd_115, "ap_sig_bdd_115");
    sc_trace(mVcdFile, mergerState, "mergerState");
    sc_trace(mVcdFile, dramOrFlash_V_1, "dramOrFlash_V_1");
    sc_trace(mVcdFile, reg_168, "reg_168");
    sc_trace(mVcdFile, reg_173, "reg_173");
    sc_trace(mVcdFile, tmp_EOP_V_1_fu_198_p3, "tmp_EOP_V_1_fu_198_p3");
    sc_trace(mVcdFile, tmp_EOP_V_fu_206_p3, "tmp_EOP_V_fu_206_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
    sc_trace(mVcdFile, ap_sig_bdd_205, "ap_sig_bdd_205");
    sc_trace(mVcdFile, ap_sig_bdd_204, "ap_sig_bdd_204");
#endif

    }
}

memcachedPipeline_merger::~memcachedPipeline_merger() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void memcachedPipeline_merger::thread_ap_clk_pos_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_1 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_204.read()) {
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read())) {
                dramOrFlash_V_1 = ap_const_lv1_0;
            } else if (ap_sig_bdd_205.read()) {
                dramOrFlash_V_1 = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_1_load_reg_218 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            dramOrFlash_V_1_load_reg_218 = dramOrFlash_V_1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        mergerState = ap_const_lv1_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
              !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_EOP_V_1_fu_198_p3.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
              !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_EOP_V_fu_206_p3.read())))) {
            mergerState = ap_const_lv1_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
                     esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
                     !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
                     esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
                     !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
            mergerState = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        mergerState_load_reg_214 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            mergerState_load_reg_214 = mergerState.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        reg_168 = ap_const_lv256_lc_1;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
              !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
            reg_168 = valueStoreDram2merger_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        reg_173 = ap_const_lv256_lc_1;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
              !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
            reg_173 = valueStoreFlash2merger_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_1_reg_226 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            tmp_1_reg_226 = grp_nbreadreq_fu_128_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_2_reg_238 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            tmp_2_reg_238 = grp_nbreadreq_fu_128_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_3_reg_230 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            tmp_3_reg_230 = grp_nbreadreq_fu_120_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_222 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
            tmp_reg_222 = grp_nbreadreq_fu_120_p3.read();
        }
    }
}

void memcachedPipeline_merger::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void memcachedPipeline_merger::thread_ap_sig_bdd_115() {
    ap_sig_bdd_115 = ((esl_seteq<1,1,1>(merger2responseFormatter_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_226.read())) || (esl_seteq<1,1,1>(merger2responseFormatter_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read())) || (esl_seteq<1,1,1>(merger2responseFormatter_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_230.read())) || (esl_seteq<1,1,1>(merger2responseFormatter_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_238.read())));
}

void memcachedPipeline_merger::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void memcachedPipeline_merger::thread_ap_sig_bdd_204() {
    ap_sig_bdd_204 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))));
}

void memcachedPipeline_merger::thread_ap_sig_bdd_205() {
    ap_sig_bdd_205 = (esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()));
}

void memcachedPipeline_merger::thread_ap_sig_bdd_76() {
    ap_sig_bdd_76 = ((esl_seteq<1,1,1>(valueStoreDram2merger_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read())) || (esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(valueStoreFlash2merger_V_empty_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read())) || (esl_seteq<1,1,1>(valueStoreFlash2merger_V_empty_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
  !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read())) || (esl_seteq<1,1,1>(valueStoreDram2merger_V_empty_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
  !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read())) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void memcachedPipeline_merger::thread_ap_sig_cseq_ST_pp0_stg0_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_grp_nbreadreq_fu_120_p3() {
    grp_nbreadreq_fu_120_p3 =  (sc_lv<1>) (valueStoreFlash2merger_V_empty_n.read());
}

void memcachedPipeline_merger::thread_grp_nbreadreq_fu_128_p3() {
    grp_nbreadreq_fu_128_p3 =  (sc_lv<1>) (valueStoreDram2merger_V_empty_n.read());
}

void memcachedPipeline_merger::thread_merger2responseFormatter_V_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_230.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        merger2responseFormatter_V_din = reg_173.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_226.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
                 !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_238.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
                 !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        merger2responseFormatter_V_din = reg_168.read();
    } else {
        merger2responseFormatter_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void memcachedPipeline_merger::thread_merger2responseFormatter_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_226.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_222.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_230.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_214.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1_load_reg_218.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_238.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        merger2responseFormatter_V_write = ap_const_logic_1;
    } else {
        merger2responseFormatter_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_tmp_EOP_V_1_fu_198_p3() {
    tmp_EOP_V_1_fu_198_p3 = valueStoreFlash2merger_V_dout.read().range(127, 127);
}

void memcachedPipeline_merger::thread_tmp_EOP_V_fu_206_p3() {
    tmp_EOP_V_fu_206_p3 = valueStoreDram2merger_V_dout.read().range(127, 127);
}

void memcachedPipeline_merger::thread_valueStoreDram2merger_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_128_p3.read()) && 
          !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        valueStoreDram2merger_V_read = ap_const_logic_1;
    } else {
        valueStoreDram2merger_V_read = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_valueStoreFlash2merger_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_120_p3.read()) && 
          !esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_76.read()) || (ap_sig_bdd_115.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))))) {
        valueStoreFlash2merger_V_read = ap_const_logic_1;
    } else {
        valueStoreFlash2merger_V_read = ap_const_logic_0;
    }
}

void memcachedPipeline_merger::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

