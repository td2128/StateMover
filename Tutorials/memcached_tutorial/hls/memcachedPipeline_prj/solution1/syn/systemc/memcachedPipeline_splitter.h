// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _memcachedPipeline_splitter_HH_
#define _memcachedPipeline_splitter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct memcachedPipeline_splitter : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > hashTable2splitter_V_dout;
    sc_in< sc_logic > hashTable2splitter_V_empty_n;
    sc_out< sc_logic > hashTable2splitter_V_read;
    sc_out< sc_lv<256> > splitter2valueStoreFlash_V_din;
    sc_in< sc_logic > splitter2valueStoreFlash_V_full_n;
    sc_out< sc_logic > splitter2valueStoreFlash_V_write;
    sc_out< sc_lv<256> > splitter2valueStoreDram_V_din;
    sc_in< sc_logic > splitter2valueStoreDram_V_full_n;
    sc_out< sc_logic > splitter2valueStoreDram_V_write;


    // Module declarations
    memcachedPipeline_splitter(sc_module_name name);
    SC_HAS_PROCESS(memcachedPipeline_splitter);

    ~memcachedPipeline_splitter();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_128_p3;
    sc_signal< bool > ap_sig_bdd_52;
    sc_signal< sc_lv<1> > tmp_reg_278;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_reg_278_pp0_it1;
    sc_signal< sc_lv<1> > is_validFlag_loc_reg_168;
    sc_signal< sc_lv<1> > dramOrFlash_V_loc_reg_180;
    sc_signal< bool > ap_sig_bdd_81;
    sc_signal< sc_lv<1> > is_validFlag;
    sc_signal< sc_lv<1> > dramOrFlash_V;
    sc_signal< sc_lv<256> > tmp112_reg_282;
    sc_signal< sc_lv<256> > ap_reg_ppstg_tmp112_reg_282_pp0_it1;
    sc_signal< sc_lv<1> > tmp_SOP_V_fu_212_p3;
    sc_signal< sc_lv<1> > tmp_SOP_V_reg_289;
    sc_signal< sc_lv<1> > not_s_fu_230_p2;
    sc_signal< sc_lv<1> > not_s_reg_293;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1;
    sc_signal< sc_lv<1> > is_validFlag_flag_phi_fu_160_p4;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1;
    sc_signal< sc_lv<1> > is_validFlag_loc_phi_fu_172_p4;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1;
    sc_signal< sc_lv<1> > p_is_validFlag_flag_fu_258_p2;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1;
    sc_signal< sc_lv<1> > is_validFlag_flag_2_phi_fu_193_p4;
    sc_signal< sc_lv<1> > not_din_EOP_V_assign_load_2_ne_fu_265_p2;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1;
    sc_signal< sc_lv<1> > is_validFlag_new_2_phi_fu_204_p4;
    sc_signal< sc_lv<32> > p_Result_s_fu_220_p4;
    sc_signal< sc_lv<1> > tmp_2_fu_251_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    sc_signal< bool > ap_sig_bdd_112;
    sc_signal< bool > ap_sig_bdd_88;
    sc_signal< bool > ap_sig_bdd_123;
    sc_signal< bool > ap_sig_bdd_117;
    sc_signal< bool > ap_sig_bdd_160;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7C;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_801;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<256> ap_const_lv256_lc_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_pos_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0();
    void thread_ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1();
    void thread_ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0();
    void thread_ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0();
    void thread_ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_sig_bdd_112();
    void thread_ap_sig_bdd_117();
    void thread_ap_sig_bdd_123();
    void thread_ap_sig_bdd_160();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_52();
    void thread_ap_sig_bdd_81();
    void thread_ap_sig_bdd_88();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_hashTable2splitter_V_read();
    void thread_is_validFlag_flag_2_phi_fu_193_p4();
    void thread_is_validFlag_flag_phi_fu_160_p4();
    void thread_is_validFlag_loc_phi_fu_172_p4();
    void thread_is_validFlag_new_2_phi_fu_204_p4();
    void thread_not_din_EOP_V_assign_load_2_ne_fu_265_p2();
    void thread_not_s_fu_230_p2();
    void thread_p_Result_s_fu_220_p4();
    void thread_p_is_validFlag_flag_fu_258_p2();
    void thread_splitter2valueStoreDram_V_din();
    void thread_splitter2valueStoreDram_V_write();
    void thread_splitter2valueStoreFlash_V_din();
    void thread_splitter2valueStoreFlash_V_write();
    void thread_tmp_2_fu_251_p3();
    void thread_tmp_SOP_V_fu_212_p3();
    void thread_tmp_nbreadreq_fu_128_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
