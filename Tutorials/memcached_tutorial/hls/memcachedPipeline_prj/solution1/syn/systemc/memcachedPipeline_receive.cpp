// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "memcachedPipeline_receive.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic memcachedPipeline_receive::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic memcachedPipeline_receive::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> memcachedPipeline_receive::ap_ST_st1_fsm0_0 = "1";
const sc_lv<2> memcachedPipeline_receive::ap_ST_st2_fsm1_1 = "10";
const sc_lv<2> memcachedPipeline_receive::ap_ST_st0_fsm1_0 = "1";
const sc_lv<32> memcachedPipeline_receive::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> memcachedPipeline_receive::ap_const_lv1_1 = "1";
const sc_lv<1> memcachedPipeline_receive::ap_const_lv1_0 = "0";
const sc_lv<32> memcachedPipeline_receive::ap_const_lv32_1 = "1";
const sc_lv<12> memcachedPipeline_receive::ap_const_lv12_0 = "000000000000";
const sc_lv<8> memcachedPipeline_receive::ap_const_lv8_0 = "00000000";
const sc_lv<512> memcachedPipeline_receive::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<12> memcachedPipeline_receive::ap_const_lv12_FF8 = "111111111000";
const sc_lv<8> memcachedPipeline_receive::ap_const_lv8_1 = "1";
const sc_lv<6> memcachedPipeline_receive::ap_const_lv6_0 = "000000";
const sc_lv<14> memcachedPipeline_receive::ap_const_lv14_3F = "111111";
const sc_lv<32> memcachedPipeline_receive::ap_const_lv32_1FF = "111111111";
const sc_lv<10> memcachedPipeline_receive::ap_const_lv10_1FF = "111111111";
const sc_lv<32> memcachedPipeline_receive::ap_const_lv32_3 = "11";
const sc_lv<32> memcachedPipeline_receive::ap_const_lv32_B = "1011";
const sc_lv<9> memcachedPipeline_receive::ap_const_lv9_0 = "000000000";
const sc_lv<8> memcachedPipeline_receive::ap_const_lv8_7 = "111";
const sc_lv<512> memcachedPipeline_receive::ap_const_lv512_lc_3 = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<10> memcachedPipeline_receive::ap_const_lv10_0 = "0000000000";
const sc_lv<64> memcachedPipeline_receive::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";

memcachedPipeline_receive::memcachedPipeline_receive(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Hi_assign_fu_215_p2);
    sensitive << ( Lo_assign_fu_207_p3 );

    SC_METHOD(thread_Lo_assign_fu_207_p3);
    sensitive << ( getCounter_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_cseq_ST_st0_fsm1_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_reg_phiprechg_storemerge8_reg_137pp0_it0);

    SC_METHOD(thread_ap_sig_bdd_108);
    sensitive << ( getPath2remux_V_V_full_n );
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_reg_401 );
    sensitive << ( tmp_28_reg_405 );
    sensitive << ( filterPopGet_V_V_full_n );
    sensitive << ( tmp_65_reg_424 );

    SC_METHOD(thread_ap_sig_bdd_114);
    sensitive << ( ap_CS_fsm1 );

    SC_METHOD(thread_ap_sig_bdd_121);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_sig_bdd_155);
    sensitive << ( tmp_65_fu_341_p2 );
    sensitive << ( getState );

    SC_METHOD(thread_ap_sig_bdd_173);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_sig_bdd_23);
    sensitive << ( ap_CS_fsm0 );

    SC_METHOD(thread_ap_sig_bdd_34);
    sensitive << ( ap_CS_fsm1 );

    SC_METHOD(thread_ap_sig_bdd_54);
    sensitive << ( tmp_nbreadreq_fu_94_p3 );
    sensitive << ( tmp_28_nbreadreq_fu_102_p3 );
    sensitive << ( getState );

    SC_METHOD(thread_ap_sig_bdd_73);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( disp2rec_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_94_p3 );
    sensitive << ( tmp_28_nbreadreq_fu_102_p3 );
    sensitive << ( memRdData_V_V_TVALID );
    sensitive << ( tmp_65_fu_341_p2 );
    sensitive << ( tmp_66_fu_347_p2 );
    sensitive << ( getState );

    SC_METHOD(thread_ap_sig_bdd_92);
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_reg_401 );
    sensitive << ( tmp_28_reg_405 );

    SC_METHOD(thread_ap_sig_cseq_ST_st0_fsm1_0);
    sensitive << ( ap_sig_bdd_34 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm0_0);
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm1_1);
    sensitive << ( ap_sig_bdd_114 );

    SC_METHOD(thread_disp2rec_V_V_read);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( tmp_nbreadreq_fu_94_p3 );
    sensitive << ( tmp_28_nbreadreq_fu_102_p3 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );

    SC_METHOD(thread_filterPopGet_V_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_65_reg_424 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_filterPopGet_V_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_65_reg_424 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_getPath2remux_V_V_din);
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_V_22_reg_409 );
    sensitive << ( tmp_V_fu_392_p1 );
    sensitive << ( ap_sig_bdd_92 );
    sensitive << ( ap_sig_bdd_173 );

    SC_METHOD(thread_getPath2remux_V_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( getState_load_reg_397 );
    sensitive << ( tmp_reg_401 );
    sensitive << ( tmp_28_reg_405 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_icmp_fu_315_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );
    sensitive << ( tmp_117_fu_305_p4 );

    SC_METHOD(thread_memRdData_V_V_TREADY);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( tmp_nbreadreq_fu_94_p3 );
    sensitive << ( tmp_28_nbreadreq_fu_102_p3 );
    sensitive << ( tmp_65_fu_341_p2 );
    sensitive << ( tmp_66_fu_347_p2 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );

    SC_METHOD(thread_p_Result_s_fu_387_p2);
    sensitive << ( tmp_113_reg_419 );
    sensitive << ( tmp_114_fu_381_p2 );

    SC_METHOD(thread_storemerge8_phi_fu_140_p6);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( tmp_65_fu_341_p2 );
    sensitive << ( tmp_66_fu_347_p2 );
    sensitive << ( getState );
    sensitive << ( ap_reg_phiprechg_storemerge8_reg_137pp0_it0 );
    sensitive << ( tmp_67_fu_353_p2 );

    SC_METHOD(thread_storemerge_fu_327_p3);
    sensitive << ( icmp_fu_315_p2 );
    sensitive << ( tmp_s_fu_321_p2 );

    SC_METHOD(thread_tmp_100_fu_225_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );
    sensitive << ( Lo_assign_fu_207_p3 );
    sensitive << ( Hi_assign_fu_215_p2 );

    SC_METHOD(thread_tmp_101_fu_231_p3);
    sensitive << ( tmp_99_fu_203_p1 );

    SC_METHOD(thread_tmp_102_fu_239_p1);
    sensitive << ( Hi_assign_fu_215_p2 );

    SC_METHOD(thread_tmp_103_fu_243_p4);
    sensitive << ( memInputWord_V );

    SC_METHOD(thread_tmp_104_fu_253_p2);
    sensitive << ( tmp_101_fu_231_p3 );
    sensitive << ( tmp_102_fu_239_p1 );

    SC_METHOD(thread_tmp_105_fu_259_p2);
    sensitive << ( tmp_101_fu_231_p3 );

    SC_METHOD(thread_tmp_106_fu_265_p2);
    sensitive << ( tmp_101_fu_231_p3 );
    sensitive << ( tmp_102_fu_239_p1 );

    SC_METHOD(thread_tmp_107_fu_271_p3);
    sensitive << ( tmp_100_fu_225_p2 );
    sensitive << ( tmp_104_fu_253_p2 );
    sensitive << ( tmp_106_fu_265_p2 );

    SC_METHOD(thread_tmp_108_fu_279_p3);
    sensitive << ( memInputWord_V );
    sensitive << ( tmp_100_fu_225_p2 );
    sensitive << ( tmp_103_fu_243_p4 );

    SC_METHOD(thread_tmp_109_fu_287_p3);
    sensitive << ( tmp_101_fu_231_p3 );
    sensitive << ( tmp_100_fu_225_p2 );
    sensitive << ( tmp_105_fu_259_p2 );

    SC_METHOD(thread_tmp_110_fu_372_p2);
    sensitive << ( tmp_107_reg_414 );

    SC_METHOD(thread_tmp_111_fu_295_p1);
    sensitive << ( tmp_109_fu_287_p3 );

    SC_METHOD(thread_tmp_112_fu_377_p1);
    sensitive << ( tmp_110_fu_372_p2 );

    SC_METHOD(thread_tmp_113_fu_299_p2);
    sensitive << ( tmp_108_fu_279_p3 );
    sensitive << ( tmp_111_fu_295_p1 );

    SC_METHOD(thread_tmp_114_fu_381_p2);
    sensitive << ( tmp_112_fu_377_p1 );

    SC_METHOD(thread_tmp_117_fu_305_p4);
    sensitive << ( getValueLength_V_1 );

    SC_METHOD(thread_tmp_28_nbreadreq_fu_102_p3);
    sensitive << ( memRdData_V_V_TVALID );

    SC_METHOD(thread_tmp_65_fu_341_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );
    sensitive << ( storemerge_fu_327_p3 );

    SC_METHOD(thread_tmp_66_fu_347_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( tmp_65_fu_341_p2 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( getState );
    sensitive << ( getCounter_1 );

    SC_METHOD(thread_tmp_67_fu_353_p2);
    sensitive << ( getCounter_1 );

    SC_METHOD(thread_tmp_68_fu_173_p2);
    sensitive << ( disp2rec_V_V_dout );

    SC_METHOD(thread_tmp_69_fu_185_p2);
    sensitive << ( getCounter_1 );

    SC_METHOD(thread_tmp_99_fu_203_p1);
    sensitive << ( getCounter_1 );

    SC_METHOD(thread_tmp_V_22_fu_169_p1);
    sensitive << ( memRdData_V_V_TDATA );

    SC_METHOD(thread_tmp_V_fu_392_p1);
    sensitive << ( p_Result_s_fu_387_p2 );

    SC_METHOD(thread_tmp_nbreadreq_fu_94_p3);
    sensitive << ( disp2rec_V_V_empty_n );

    SC_METHOD(thread_tmp_s_fu_321_p2);
    sensitive << ( getValueLength_V_1 );

    SC_METHOD(thread_ap_NS_fsm1);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_CS_fsm1 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_NS_fsm0);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm0 );
    sensitive << ( ap_sig_bdd_73 );
    sensitive << ( ap_sig_bdd_108 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm0 = "1";
    ap_CS_fsm1 = "01";
    getState_load_reg_397 = "0";
    tmp_reg_401 = "0";
    tmp_28_reg_405 = "0";
    tmp_65_reg_424 = "0";
    getState = "0";
    getValueLength_V_1 = "000000000000";
    getCounter_1 = "00000000";
    memInputWord_V = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_V_22_reg_409 = "0000000000000000000000000000000000000000000000000000000000000000";
    tmp_107_reg_414 = "0000000000";
    tmp_113_reg_419 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "memcachedPipeline_receive_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, disp2rec_V_V_dout, "(port)disp2rec_V_V_dout");
    sc_trace(mVcdFile, disp2rec_V_V_empty_n, "(port)disp2rec_V_V_empty_n");
    sc_trace(mVcdFile, disp2rec_V_V_read, "(port)disp2rec_V_V_read");
    sc_trace(mVcdFile, memRdData_V_V_TVALID, "(port)memRdData_V_V_TVALID");
    sc_trace(mVcdFile, getPath2remux_V_V_din, "(port)getPath2remux_V_V_din");
    sc_trace(mVcdFile, getPath2remux_V_V_full_n, "(port)getPath2remux_V_V_full_n");
    sc_trace(mVcdFile, getPath2remux_V_V_write, "(port)getPath2remux_V_V_write");
    sc_trace(mVcdFile, filterPopGet_V_V_din, "(port)filterPopGet_V_V_din");
    sc_trace(mVcdFile, filterPopGet_V_V_full_n, "(port)filterPopGet_V_V_full_n");
    sc_trace(mVcdFile, filterPopGet_V_V_write, "(port)filterPopGet_V_V_write");
    sc_trace(mVcdFile, memRdData_V_V_TDATA, "(port)memRdData_V_V_TDATA");
    sc_trace(mVcdFile, memRdData_V_V_TREADY, "(port)memRdData_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm0, "ap_CS_fsm0");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm0_0, "ap_sig_cseq_ST_st1_fsm0_0");
    sc_trace(mVcdFile, ap_sig_bdd_23, "ap_sig_bdd_23");
    sc_trace(mVcdFile, ap_CS_fsm1, "ap_CS_fsm1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st0_fsm1_0, "ap_sig_cseq_ST_st0_fsm1_0");
    sc_trace(mVcdFile, ap_sig_bdd_34, "ap_sig_bdd_34");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_94_p3, "tmp_nbreadreq_fu_94_p3");
    sc_trace(mVcdFile, tmp_28_nbreadreq_fu_102_p3, "tmp_28_nbreadreq_fu_102_p3");
    sc_trace(mVcdFile, tmp_65_fu_341_p2, "tmp_65_fu_341_p2");
    sc_trace(mVcdFile, tmp_66_fu_347_p2, "tmp_66_fu_347_p2");
    sc_trace(mVcdFile, ap_sig_bdd_73, "ap_sig_bdd_73");
    sc_trace(mVcdFile, getState_load_reg_397, "getState_load_reg_397");
    sc_trace(mVcdFile, tmp_reg_401, "tmp_reg_401");
    sc_trace(mVcdFile, tmp_28_reg_405, "tmp_28_reg_405");
    sc_trace(mVcdFile, tmp_65_reg_424, "tmp_65_reg_424");
    sc_trace(mVcdFile, ap_sig_bdd_108, "ap_sig_bdd_108");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm1_1, "ap_sig_cseq_ST_st2_fsm1_1");
    sc_trace(mVcdFile, ap_sig_bdd_114, "ap_sig_bdd_114");
    sc_trace(mVcdFile, getState, "getState");
    sc_trace(mVcdFile, getValueLength_V_1, "getValueLength_V_1");
    sc_trace(mVcdFile, getCounter_1, "getCounter_1");
    sc_trace(mVcdFile, memInputWord_V, "memInputWord_V");
    sc_trace(mVcdFile, tmp_V_22_fu_169_p1, "tmp_V_22_fu_169_p1");
    sc_trace(mVcdFile, tmp_V_22_reg_409, "tmp_V_22_reg_409");
    sc_trace(mVcdFile, tmp_107_fu_271_p3, "tmp_107_fu_271_p3");
    sc_trace(mVcdFile, tmp_107_reg_414, "tmp_107_reg_414");
    sc_trace(mVcdFile, tmp_113_fu_299_p2, "tmp_113_fu_299_p2");
    sc_trace(mVcdFile, tmp_113_reg_419, "tmp_113_reg_419");
    sc_trace(mVcdFile, ap_reg_phiprechg_storemerge8_reg_137pp0_it0, "ap_reg_phiprechg_storemerge8_reg_137pp0_it0");
    sc_trace(mVcdFile, storemerge8_phi_fu_140_p6, "storemerge8_phi_fu_140_p6");
    sc_trace(mVcdFile, tmp_67_fu_353_p2, "tmp_67_fu_353_p2");
    sc_trace(mVcdFile, tmp_V_fu_392_p1, "tmp_V_fu_392_p1");
    sc_trace(mVcdFile, tmp_68_fu_173_p2, "tmp_68_fu_173_p2");
    sc_trace(mVcdFile, storemerge_fu_327_p3, "storemerge_fu_327_p3");
    sc_trace(mVcdFile, tmp_69_fu_185_p2, "tmp_69_fu_185_p2");
    sc_trace(mVcdFile, Lo_assign_fu_207_p3, "Lo_assign_fu_207_p3");
    sc_trace(mVcdFile, Hi_assign_fu_215_p2, "Hi_assign_fu_215_p2");
    sc_trace(mVcdFile, tmp_99_fu_203_p1, "tmp_99_fu_203_p1");
    sc_trace(mVcdFile, tmp_101_fu_231_p3, "tmp_101_fu_231_p3");
    sc_trace(mVcdFile, tmp_102_fu_239_p1, "tmp_102_fu_239_p1");
    sc_trace(mVcdFile, tmp_100_fu_225_p2, "tmp_100_fu_225_p2");
    sc_trace(mVcdFile, tmp_104_fu_253_p2, "tmp_104_fu_253_p2");
    sc_trace(mVcdFile, tmp_106_fu_265_p2, "tmp_106_fu_265_p2");
    sc_trace(mVcdFile, tmp_103_fu_243_p4, "tmp_103_fu_243_p4");
    sc_trace(mVcdFile, tmp_105_fu_259_p2, "tmp_105_fu_259_p2");
    sc_trace(mVcdFile, tmp_109_fu_287_p3, "tmp_109_fu_287_p3");
    sc_trace(mVcdFile, tmp_108_fu_279_p3, "tmp_108_fu_279_p3");
    sc_trace(mVcdFile, tmp_111_fu_295_p1, "tmp_111_fu_295_p1");
    sc_trace(mVcdFile, tmp_117_fu_305_p4, "tmp_117_fu_305_p4");
    sc_trace(mVcdFile, icmp_fu_315_p2, "icmp_fu_315_p2");
    sc_trace(mVcdFile, tmp_s_fu_321_p2, "tmp_s_fu_321_p2");
    sc_trace(mVcdFile, tmp_110_fu_372_p2, "tmp_110_fu_372_p2");
    sc_trace(mVcdFile, tmp_112_fu_377_p1, "tmp_112_fu_377_p1");
    sc_trace(mVcdFile, tmp_114_fu_381_p2, "tmp_114_fu_381_p2");
    sc_trace(mVcdFile, p_Result_s_fu_387_p2, "p_Result_s_fu_387_p2");
    sc_trace(mVcdFile, ap_NS_fsm0, "ap_NS_fsm0");
    sc_trace(mVcdFile, ap_NS_fsm1, "ap_NS_fsm1");
    sc_trace(mVcdFile, ap_sig_bdd_54, "ap_sig_bdd_54");
    sc_trace(mVcdFile, ap_sig_bdd_121, "ap_sig_bdd_121");
    sc_trace(mVcdFile, ap_sig_bdd_92, "ap_sig_bdd_92");
    sc_trace(mVcdFile, ap_sig_bdd_173, "ap_sig_bdd_173");
    sc_trace(mVcdFile, ap_sig_bdd_155, "ap_sig_bdd_155");
#endif

    }
}

memcachedPipeline_receive::~memcachedPipeline_receive() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void memcachedPipeline_receive::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm0 = ap_ST_st1_fsm0_0;
    } else {
        ap_CS_fsm0 = ap_NS_fsm0.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm1 = ap_ST_st0_fsm1_0;
    } else {
        ap_CS_fsm1 = ap_NS_fsm1.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getCounter_1 = ap_const_lv8_0;
    } else {
        if (ap_sig_bdd_121.read()) {
            if (!esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0)) {
                getCounter_1 = storemerge8_phi_fu_140_p6.read();
            } else if (ap_sig_bdd_54.read()) {
                getCounter_1 = tmp_69_fu_185_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getState = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_121.read()) {
            if (ap_sig_bdd_155.read()) {
                getState = ap_const_lv1_0;
            } else if (ap_sig_bdd_54.read()) {
                getState = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getState_load_reg_397 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            getState_load_reg_397 = getState.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getValueLength_V_1 = ap_const_lv12_0;
    } else {
        if (ap_sig_bdd_121.read()) {
            if (!esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0)) {
                getValueLength_V_1 = storemerge_fu_327_p3.read();
            } else if (ap_sig_bdd_54.read()) {
                getValueLength_V_1 = tmp_68_fu_173_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memInputWord_V = ap_const_lv512_lc_1;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
              esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read())))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
              !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_66_fu_347_p2.read()) && 
              !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read())))))) {
            memInputWord_V = memRdData_V_V_TDATA.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_107_reg_414 = ap_const_lv10_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_107_reg_414 = tmp_107_fu_271_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_113_reg_419 = ap_const_lv512_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_113_reg_419 = tmp_113_fu_299_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_28_reg_405 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_28_reg_405 = tmp_28_nbreadreq_fu_102_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_65_reg_424 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_65_reg_424 = tmp_65_fu_341_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_V_22_reg_409 = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_V_22_reg_409 = tmp_V_22_fu_169_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_401 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_reg_401 = tmp_nbreadreq_fu_94_p3.read();
        }
    }
}

void memcachedPipeline_receive::thread_Hi_assign_fu_215_p2() {
    Hi_assign_fu_215_p2 = (Lo_assign_fu_207_p3.read() | ap_const_lv14_3F);
}

void memcachedPipeline_receive::thread_Lo_assign_fu_207_p3() {
    Lo_assign_fu_207_p3 = esl_concat<8,6>(getCounter_1.read(), ap_const_lv6_0);
}

void memcachedPipeline_receive::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st0_fsm1_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_ap_reg_phiprechg_storemerge8_reg_137pp0_it0() {
    ap_reg_phiprechg_storemerge8_reg_137pp0_it0 =  (sc_lv<8>) ("XXXXXXXX");
}

void memcachedPipeline_receive::thread_ap_sig_bdd_108() {
    ap_sig_bdd_108 = ((esl_seteq<1,1,1>(getPath2remux_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_401.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_reg_405.read())) || (esl_seteq<1,1,1>(getPath2remux_V_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && 
  esl_seteq<1,1,1>(filterPopGet_V_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_reg_424.read())));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_114() {
    ap_sig_bdd_114 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm1.read().range(1, 1));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_121() {
    ap_sig_bdd_121 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_155() {
    ap_sig_bdd_155 = (!esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_173() {
    ap_sig_bdd_173 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read()));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_23() {
    ap_sig_bdd_23 = esl_seteq<1,1,1>(ap_CS_fsm0.read().range(0, 0), ap_const_lv1_1);
}

void memcachedPipeline_receive::thread_ap_sig_bdd_34() {
    ap_sig_bdd_34 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm1.read().range(0, 0));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_54() {
    ap_sig_bdd_54 = (esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_73() {
    ap_sig_bdd_73 = ((esl_seteq<1,1,1>(disp2rec_V_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read())) || (esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()) && 
  esl_seteq<1,1,1>(memRdData_V_V_TVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(memRdData_V_V_TVALID.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_66_fu_347_p2.read())) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void memcachedPipeline_receive::thread_ap_sig_bdd_92() {
    ap_sig_bdd_92 = (esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_401.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_reg_405.read()));
}

void memcachedPipeline_receive::thread_ap_sig_cseq_ST_st0_fsm1_0() {
    if (ap_sig_bdd_34.read()) {
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_ap_sig_cseq_ST_st1_fsm0_0() {
    if (ap_sig_bdd_23.read()) {
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_ap_sig_cseq_ST_st2_fsm1_1() {
    if (ap_sig_bdd_114.read()) {
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_disp2rec_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
        disp2rec_V_V_read = ap_const_logic_1;
    } else {
        disp2rec_V_V_read = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_filterPopGet_V_V_din() {
    filterPopGet_V_V_din = ap_const_lv1_1;
}

void memcachedPipeline_receive::thread_filterPopGet_V_V_write() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_reg_424.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read()))) {
        filterPopGet_V_V_write = ap_const_logic_1;
    } else {
        filterPopGet_V_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_getPath2remux_V_V_din() {
    if (ap_sig_bdd_173.read()) {
        if (!esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read())) {
            getPath2remux_V_V_din = tmp_V_fu_392_p1.read();
        } else if (ap_sig_bdd_92.read()) {
            getPath2remux_V_V_din = tmp_V_22_reg_409.read();
        } else {
            getPath2remux_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        getPath2remux_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void memcachedPipeline_receive::thread_getPath2remux_V_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_401.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_reg_405.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read())) || 
         (!esl_seteq<1,1,1>(ap_const_lv1_0, getState_load_reg_397.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read())))) {
        getPath2remux_V_V_write = ap_const_logic_1;
    } else {
        getPath2remux_V_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_icmp_fu_315_p2() {
    icmp_fu_315_p2 = (!tmp_117_fu_305_p4.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_117_fu_305_p4.read() != ap_const_lv9_0);
}

void memcachedPipeline_receive::thread_memRdData_V_V_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
          esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_nbreadreq_fu_94_p3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_28_nbreadreq_fu_102_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
          !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_66_fu_347_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read())))))) {
        memRdData_V_V_TREADY = ap_const_logic_1;
    } else {
        memRdData_V_V_TREADY = ap_const_logic_0;
    }
}

void memcachedPipeline_receive::thread_p_Result_s_fu_387_p2() {
    p_Result_s_fu_387_p2 = (tmp_113_reg_419.read() & tmp_114_fu_381_p2.read());
}

void memcachedPipeline_receive::thread_storemerge8_phi_fu_140_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_66_fu_347_p2.read()))) {
        storemerge8_phi_fu_140_p6 = tmp_67_fu_353_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
                 !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
                 !esl_seteq<1,1,1>(getState.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_65_fu_341_p2.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_66_fu_347_p2.read())))) {
        storemerge8_phi_fu_140_p6 = ap_const_lv8_0;
    } else {
        storemerge8_phi_fu_140_p6 = ap_reg_phiprechg_storemerge8_reg_137pp0_it0.read();
    }
}

void memcachedPipeline_receive::thread_storemerge_fu_327_p3() {
    storemerge_fu_327_p3 = (!icmp_fu_315_p2.read()[0].is_01())? sc_lv<12>(): ((icmp_fu_315_p2.read()[0].to_bool())? tmp_s_fu_321_p2.read(): ap_const_lv12_0);
}

void memcachedPipeline_receive::thread_tmp_100_fu_225_p2() {
    tmp_100_fu_225_p2 = (!Lo_assign_fu_207_p3.read().is_01() || !Hi_assign_fu_215_p2.read().is_01())? sc_lv<1>(): (sc_biguint<14>(Lo_assign_fu_207_p3.read()) > sc_biguint<14>(Hi_assign_fu_215_p2.read()));
}

void memcachedPipeline_receive::thread_tmp_101_fu_231_p3() {
    tmp_101_fu_231_p3 = esl_concat<4,6>(tmp_99_fu_203_p1.read(), ap_const_lv6_0);
}

void memcachedPipeline_receive::thread_tmp_102_fu_239_p1() {
    tmp_102_fu_239_p1 = Hi_assign_fu_215_p2.read().range(10-1, 0);
}

void memcachedPipeline_receive::thread_tmp_103_fu_243_p4() {
    tmp_103_fu_243_p4 = memInputWord_V.read().range(0, 511);
}

void memcachedPipeline_receive::thread_tmp_104_fu_253_p2() {
    tmp_104_fu_253_p2 = (!tmp_101_fu_231_p3.read().is_01() || !tmp_102_fu_239_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_101_fu_231_p3.read()) - sc_biguint<10>(tmp_102_fu_239_p1.read()));
}

void memcachedPipeline_receive::thread_tmp_105_fu_259_p2() {
    tmp_105_fu_259_p2 = (!ap_const_lv10_1FF.is_01() || !tmp_101_fu_231_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_1FF) - sc_biguint<10>(tmp_101_fu_231_p3.read()));
}

void memcachedPipeline_receive::thread_tmp_106_fu_265_p2() {
    tmp_106_fu_265_p2 = (!tmp_102_fu_239_p1.read().is_01() || !tmp_101_fu_231_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_102_fu_239_p1.read()) - sc_biguint<10>(tmp_101_fu_231_p3.read()));
}

void memcachedPipeline_receive::thread_tmp_107_fu_271_p3() {
    tmp_107_fu_271_p3 = (!tmp_100_fu_225_p2.read()[0].is_01())? sc_lv<10>(): ((tmp_100_fu_225_p2.read()[0].to_bool())? tmp_104_fu_253_p2.read(): tmp_106_fu_265_p2.read());
}

void memcachedPipeline_receive::thread_tmp_108_fu_279_p3() {
    tmp_108_fu_279_p3 = (!tmp_100_fu_225_p2.read()[0].is_01())? sc_lv<512>(): ((tmp_100_fu_225_p2.read()[0].to_bool())? tmp_103_fu_243_p4.read(): memInputWord_V.read());
}

void memcachedPipeline_receive::thread_tmp_109_fu_287_p3() {
    tmp_109_fu_287_p3 = (!tmp_100_fu_225_p2.read()[0].is_01())? sc_lv<10>(): ((tmp_100_fu_225_p2.read()[0].to_bool())? tmp_105_fu_259_p2.read(): tmp_101_fu_231_p3.read());
}

void memcachedPipeline_receive::thread_tmp_110_fu_372_p2() {
    tmp_110_fu_372_p2 = (!ap_const_lv10_1FF.is_01() || !tmp_107_reg_414.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_1FF) - sc_biguint<10>(tmp_107_reg_414.read()));
}

void memcachedPipeline_receive::thread_tmp_111_fu_295_p1() {
    tmp_111_fu_295_p1 = esl_zext<512,10>(tmp_109_fu_287_p3.read());
}

void memcachedPipeline_receive::thread_tmp_112_fu_377_p1() {
    tmp_112_fu_377_p1 = esl_zext<512,10>(tmp_110_fu_372_p2.read());
}

void memcachedPipeline_receive::thread_tmp_113_fu_299_p2() {
    tmp_113_fu_299_p2 = (!tmp_111_fu_295_p1.read().is_01())? sc_lv<512>(): tmp_108_fu_279_p3.read() >> (unsigned short)tmp_111_fu_295_p1.read().to_uint();
}

void memcachedPipeline_receive::thread_tmp_114_fu_381_p2() {
    tmp_114_fu_381_p2 = (!tmp_112_fu_377_p1.read().is_01())? sc_lv<512>(): ap_const_lv512_lc_3 >> (unsigned short)tmp_112_fu_377_p1.read().to_uint();
}

void memcachedPipeline_receive::thread_tmp_117_fu_305_p4() {
    tmp_117_fu_305_p4 = getValueLength_V_1.read().range(11, 3);
}

void memcachedPipeline_receive::thread_tmp_28_nbreadreq_fu_102_p3() {
    tmp_28_nbreadreq_fu_102_p3 =  (sc_lv<1>) (memRdData_V_V_TVALID.read());
}

void memcachedPipeline_receive::thread_tmp_65_fu_341_p2() {
    tmp_65_fu_341_p2 = (!storemerge_fu_327_p3.read().is_01() || !ap_const_lv12_0.is_01())? sc_lv<1>(): sc_lv<1>(storemerge_fu_327_p3.read() == ap_const_lv12_0);
}

void memcachedPipeline_receive::thread_tmp_66_fu_347_p2() {
    tmp_66_fu_347_p2 = (!getCounter_1.read().is_01() || !ap_const_lv8_7.is_01())? sc_lv<1>(): sc_lv<1>(getCounter_1.read() == ap_const_lv8_7);
}

void memcachedPipeline_receive::thread_tmp_67_fu_353_p2() {
    tmp_67_fu_353_p2 = (!getCounter_1.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(getCounter_1.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void memcachedPipeline_receive::thread_tmp_68_fu_173_p2() {
    tmp_68_fu_173_p2 = (!ap_const_lv12_FF8.is_01() || !disp2rec_V_V_dout.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_FF8) + sc_biguint<12>(disp2rec_V_V_dout.read()));
}

void memcachedPipeline_receive::thread_tmp_69_fu_185_p2() {
    tmp_69_fu_185_p2 = (!ap_const_lv8_1.is_01() || !getCounter_1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(getCounter_1.read()));
}

void memcachedPipeline_receive::thread_tmp_99_fu_203_p1() {
    tmp_99_fu_203_p1 = getCounter_1.read().range(4-1, 0);
}

void memcachedPipeline_receive::thread_tmp_V_22_fu_169_p1() {
    tmp_V_22_fu_169_p1 = memRdData_V_V_TDATA.read().range(64-1, 0);
}

void memcachedPipeline_receive::thread_tmp_V_fu_392_p1() {
    tmp_V_fu_392_p1 = p_Result_s_fu_387_p2.read().range(64-1, 0);
}

void memcachedPipeline_receive::thread_tmp_nbreadreq_fu_94_p3() {
    tmp_nbreadreq_fu_94_p3 =  (sc_lv<1>) (disp2rec_V_V_empty_n.read());
}

void memcachedPipeline_receive::thread_tmp_s_fu_321_p2() {
    tmp_s_fu_321_p2 = (!getValueLength_V_1.read().is_01() || !ap_const_lv12_FF8.is_01())? sc_lv<12>(): (sc_biguint<12>(getValueLength_V_1.read()) + sc_bigint<12>(ap_const_lv12_FF8));
}

void memcachedPipeline_receive::thread_ap_NS_fsm1() {
    switch (ap_CS_fsm1.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read()) && !ap_sig_bdd_73.read())) {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_108.read()) && (!esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
   ap_sig_bdd_73.read())))) {
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            } else {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_73.read() || (ap_sig_bdd_108.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            } else {
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            }
            break;
        default : 
            ap_NS_fsm1 =  (sc_lv<2>) ("XX");
            break;
    }
}

void memcachedPipeline_receive::thread_ap_NS_fsm0() {
    switch (ap_CS_fsm0.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
break;
        default : 
            ap_NS_fsm0 =  (sc_lv<1>) ("X");
            break;
    }
}

}

