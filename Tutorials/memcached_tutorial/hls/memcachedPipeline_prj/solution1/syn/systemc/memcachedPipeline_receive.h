// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _memcachedPipeline_receive_HH_
#define _memcachedPipeline_receive_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct memcachedPipeline_receive : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > disp2rec_V_V_dout;
    sc_in< sc_logic > disp2rec_V_V_empty_n;
    sc_out< sc_logic > disp2rec_V_V_read;
    sc_in< sc_logic > memRdData_V_V_TVALID;
    sc_out< sc_lv<64> > getPath2remux_V_V_din;
    sc_in< sc_logic > getPath2remux_V_V_full_n;
    sc_out< sc_logic > getPath2remux_V_V_write;
    sc_out< sc_lv<1> > filterPopGet_V_V_din;
    sc_in< sc_logic > filterPopGet_V_V_full_n;
    sc_out< sc_logic > filterPopGet_V_V_write;
    sc_in< sc_lv<512> > memRdData_V_V_TDATA;
    sc_out< sc_logic > memRdData_V_V_TREADY;


    // Module declarations
    memcachedPipeline_receive(sc_module_name name);
    SC_HAS_PROCESS(memcachedPipeline_receive);

    ~memcachedPipeline_receive();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm0;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm0_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<2> > ap_CS_fsm1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st0_fsm1_0;
    sc_signal< bool > ap_sig_bdd_34;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_94_p3;
    sc_signal< sc_lv<1> > tmp_28_nbreadreq_fu_102_p3;
    sc_signal< sc_lv<1> > tmp_65_fu_341_p2;
    sc_signal< sc_lv<1> > tmp_66_fu_347_p2;
    sc_signal< bool > ap_sig_bdd_73;
    sc_signal< sc_lv<1> > getState_load_reg_397;
    sc_signal< sc_lv<1> > tmp_reg_401;
    sc_signal< sc_lv<1> > tmp_28_reg_405;
    sc_signal< sc_lv<1> > tmp_65_reg_424;
    sc_signal< bool > ap_sig_bdd_108;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm1_1;
    sc_signal< bool > ap_sig_bdd_114;
    sc_signal< sc_lv<1> > getState;
    sc_signal< sc_lv<12> > getValueLength_V_1;
    sc_signal< sc_lv<8> > getCounter_1;
    sc_signal< sc_lv<512> > memInputWord_V;
    sc_signal< sc_lv<64> > tmp_V_22_fu_169_p1;
    sc_signal< sc_lv<64> > tmp_V_22_reg_409;
    sc_signal< sc_lv<10> > tmp_107_fu_271_p3;
    sc_signal< sc_lv<10> > tmp_107_reg_414;
    sc_signal< sc_lv<512> > tmp_113_fu_299_p2;
    sc_signal< sc_lv<512> > tmp_113_reg_419;
    sc_signal< sc_lv<8> > ap_reg_phiprechg_storemerge8_reg_137pp0_it0;
    sc_signal< sc_lv<8> > storemerge8_phi_fu_140_p6;
    sc_signal< sc_lv<8> > tmp_67_fu_353_p2;
    sc_signal< sc_lv<64> > tmp_V_fu_392_p1;
    sc_signal< sc_lv<12> > tmp_68_fu_173_p2;
    sc_signal< sc_lv<12> > storemerge_fu_327_p3;
    sc_signal< sc_lv<8> > tmp_69_fu_185_p2;
    sc_signal< sc_lv<14> > Lo_assign_fu_207_p3;
    sc_signal< sc_lv<14> > Hi_assign_fu_215_p2;
    sc_signal< sc_lv<4> > tmp_99_fu_203_p1;
    sc_signal< sc_lv<10> > tmp_101_fu_231_p3;
    sc_signal< sc_lv<10> > tmp_102_fu_239_p1;
    sc_signal< sc_lv<1> > tmp_100_fu_225_p2;
    sc_signal< sc_lv<10> > tmp_104_fu_253_p2;
    sc_signal< sc_lv<10> > tmp_106_fu_265_p2;
    sc_signal< sc_lv<512> > tmp_103_fu_243_p4;
    sc_signal< sc_lv<10> > tmp_105_fu_259_p2;
    sc_signal< sc_lv<10> > tmp_109_fu_287_p3;
    sc_signal< sc_lv<512> > tmp_108_fu_279_p3;
    sc_signal< sc_lv<512> > tmp_111_fu_295_p1;
    sc_signal< sc_lv<9> > tmp_117_fu_305_p4;
    sc_signal< sc_lv<1> > icmp_fu_315_p2;
    sc_signal< sc_lv<12> > tmp_s_fu_321_p2;
    sc_signal< sc_lv<10> > tmp_110_fu_372_p2;
    sc_signal< sc_lv<512> > tmp_112_fu_377_p1;
    sc_signal< sc_lv<512> > tmp_114_fu_381_p2;
    sc_signal< sc_lv<512> > p_Result_s_fu_387_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm0;
    sc_signal< sc_lv<2> > ap_NS_fsm1;
    sc_signal< bool > ap_sig_bdd_54;
    sc_signal< bool > ap_sig_bdd_121;
    sc_signal< bool > ap_sig_bdd_92;
    sc_signal< bool > ap_sig_bdd_173;
    sc_signal< bool > ap_sig_bdd_155;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_st1_fsm0_0;
    static const sc_lv<2> ap_ST_st2_fsm1_1;
    static const sc_lv<2> ap_ST_st0_fsm1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<12> ap_const_lv12_FF8;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<14> ap_const_lv14_3F;
    static const sc_lv<32> ap_const_lv32_1FF;
    static const sc_lv<10> ap_const_lv10_1FF;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<512> ap_const_lv512_lc_3;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<64> ap_const_lv64_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Hi_assign_fu_215_p2();
    void thread_Lo_assign_fu_207_p3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_phiprechg_storemerge8_reg_137pp0_it0();
    void thread_ap_sig_bdd_108();
    void thread_ap_sig_bdd_114();
    void thread_ap_sig_bdd_121();
    void thread_ap_sig_bdd_155();
    void thread_ap_sig_bdd_173();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_34();
    void thread_ap_sig_bdd_54();
    void thread_ap_sig_bdd_73();
    void thread_ap_sig_bdd_92();
    void thread_ap_sig_cseq_ST_st0_fsm1_0();
    void thread_ap_sig_cseq_ST_st1_fsm0_0();
    void thread_ap_sig_cseq_ST_st2_fsm1_1();
    void thread_disp2rec_V_V_read();
    void thread_filterPopGet_V_V_din();
    void thread_filterPopGet_V_V_write();
    void thread_getPath2remux_V_V_din();
    void thread_getPath2remux_V_V_write();
    void thread_icmp_fu_315_p2();
    void thread_memRdData_V_V_TREADY();
    void thread_p_Result_s_fu_387_p2();
    void thread_storemerge8_phi_fu_140_p6();
    void thread_storemerge_fu_327_p3();
    void thread_tmp_100_fu_225_p2();
    void thread_tmp_101_fu_231_p3();
    void thread_tmp_102_fu_239_p1();
    void thread_tmp_103_fu_243_p4();
    void thread_tmp_104_fu_253_p2();
    void thread_tmp_105_fu_259_p2();
    void thread_tmp_106_fu_265_p2();
    void thread_tmp_107_fu_271_p3();
    void thread_tmp_108_fu_279_p3();
    void thread_tmp_109_fu_287_p3();
    void thread_tmp_110_fu_372_p2();
    void thread_tmp_111_fu_295_p1();
    void thread_tmp_112_fu_377_p1();
    void thread_tmp_113_fu_299_p2();
    void thread_tmp_114_fu_381_p2();
    void thread_tmp_117_fu_305_p4();
    void thread_tmp_28_nbreadreq_fu_102_p3();
    void thread_tmp_65_fu_341_p2();
    void thread_tmp_66_fu_347_p2();
    void thread_tmp_67_fu_353_p2();
    void thread_tmp_68_fu_173_p2();
    void thread_tmp_69_fu_185_p2();
    void thread_tmp_99_fu_203_p1();
    void thread_tmp_V_22_fu_169_p1();
    void thread_tmp_V_fu_392_p1();
    void thread_tmp_nbreadreq_fu_94_p3();
    void thread_tmp_s_fu_321_p2();
    void thread_ap_NS_fsm1();
    void thread_ap_NS_fsm0();
};

}

using namespace ap_rtl;

#endif
