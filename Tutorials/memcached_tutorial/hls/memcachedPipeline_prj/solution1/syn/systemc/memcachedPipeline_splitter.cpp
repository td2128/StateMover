// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "memcachedPipeline_splitter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic memcachedPipeline_splitter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic memcachedPipeline_splitter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> memcachedPipeline_splitter::ap_ST_pp0_stg0_fsm_0 = "1";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> memcachedPipeline_splitter::ap_const_lv1_1 = "1";
const sc_lv<1> memcachedPipeline_splitter::ap_const_lv1_0 = "0";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_7C = "1111100";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_8 = "1000";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_27 = "100111";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_801 = "100000000001";
const sc_lv<32> memcachedPipeline_splitter::ap_const_lv32_7F = "1111111";
const sc_lv<256> memcachedPipeline_splitter::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const bool memcachedPipeline_splitter::ap_true = true;

memcachedPipeline_splitter::memcachedPipeline_splitter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_pos_reset_);
    dont_initialize();
    sensitive << ( ap_rst.pos() );
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0);

    SC_METHOD(thread_ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1);

    SC_METHOD(thread_ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0);

    SC_METHOD(thread_ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0);

    SC_METHOD(thread_ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1);

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_sig_bdd_112);
    sensitive << ( tmp_nbreadreq_fu_128_p3 );
    sensitive << ( tmp_SOP_V_fu_212_p3 );

    SC_METHOD(thread_ap_sig_bdd_117);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_sig_bdd_123);
    sensitive << ( tmp_reg_278 );
    sensitive << ( tmp_SOP_V_reg_289 );

    SC_METHOD(thread_ap_sig_bdd_160);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_reg_278 );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_52);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_128_p3 );

    SC_METHOD(thread_ap_sig_bdd_81);
    sensitive << ( splitter2valueStoreFlash_V_full_n );
    sensitive << ( ap_reg_ppstg_tmp_reg_278_pp0_it1 );
    sensitive << ( is_validFlag_loc_reg_168 );
    sensitive << ( dramOrFlash_V_loc_reg_180 );
    sensitive << ( splitter2valueStoreDram_V_full_n );

    SC_METHOD(thread_ap_sig_bdd_88);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_hashTable2splitter_V_read);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( tmp_nbreadreq_fu_128_p3 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_is_validFlag_flag_2_phi_fu_193_p4);
    sensitive << ( is_validFlag_flag_phi_fu_160_p4 );
    sensitive << ( is_validFlag_loc_phi_fu_172_p4 );
    sensitive << ( p_is_validFlag_flag_fu_258_p2 );
    sensitive << ( ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1 );
    sensitive << ( ap_sig_bdd_160 );

    SC_METHOD(thread_is_validFlag_flag_phi_fu_160_p4);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_reg_278 );
    sensitive << ( tmp_SOP_V_reg_289 );
    sensitive << ( ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1 );

    SC_METHOD(thread_is_validFlag_loc_phi_fu_172_p4);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_reg_278 );
    sensitive << ( is_validFlag );
    sensitive << ( tmp_SOP_V_reg_289 );
    sensitive << ( ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1 );

    SC_METHOD(thread_is_validFlag_new_2_phi_fu_204_p4);
    sensitive << ( is_validFlag_loc_phi_fu_172_p4 );
    sensitive << ( not_din_EOP_V_assign_load_2_ne_fu_265_p2 );
    sensitive << ( ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1 );
    sensitive << ( ap_sig_bdd_160 );

    SC_METHOD(thread_not_din_EOP_V_assign_load_2_ne_fu_265_p2);
    sensitive << ( tmp_2_fu_251_p3 );

    SC_METHOD(thread_not_s_fu_230_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_0 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( tmp_nbreadreq_fu_128_p3 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( tmp_SOP_V_fu_212_p3 );
    sensitive << ( p_Result_s_fu_220_p4 );

    SC_METHOD(thread_p_Result_s_fu_220_p4);
    sensitive << ( hashTable2splitter_V_dout );

    SC_METHOD(thread_p_is_validFlag_flag_fu_258_p2);
    sensitive << ( is_validFlag_flag_phi_fu_160_p4 );
    sensitive << ( tmp_2_fu_251_p3 );

    SC_METHOD(thread_splitter2valueStoreDram_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_reg_ppstg_tmp_reg_278_pp0_it1 );
    sensitive << ( is_validFlag_loc_reg_168 );
    sensitive << ( dramOrFlash_V_loc_reg_180 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( ap_reg_ppstg_tmp112_reg_282_pp0_it1 );

    SC_METHOD(thread_splitter2valueStoreDram_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_reg_ppstg_tmp_reg_278_pp0_it1 );
    sensitive << ( is_validFlag_loc_reg_168 );
    sensitive << ( dramOrFlash_V_loc_reg_180 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_splitter2valueStoreFlash_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_reg_ppstg_tmp_reg_278_pp0_it1 );
    sensitive << ( is_validFlag_loc_reg_168 );
    sensitive << ( dramOrFlash_V_loc_reg_180 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( ap_reg_ppstg_tmp112_reg_282_pp0_it1 );

    SC_METHOD(thread_splitter2valueStoreFlash_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_reg_ppstg_tmp_reg_278_pp0_it1 );
    sensitive << ( is_validFlag_loc_reg_168 );
    sensitive << ( dramOrFlash_V_loc_reg_180 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_tmp_2_fu_251_p3);
    sensitive << ( tmp112_reg_282 );

    SC_METHOD(thread_tmp_SOP_V_fu_212_p3);
    sensitive << ( hashTable2splitter_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_128_p3);
    sensitive << ( hashTable2splitter_V_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    tmp_reg_278 = "0";
    ap_reg_ppstg_tmp_reg_278_pp0_it1 = "0";
    is_validFlag_loc_reg_168 = "0";
    dramOrFlash_V_loc_reg_180 = "0";
    is_validFlag = "0";
    dramOrFlash_V = "0";
    tmp112_reg_282 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp112_reg_282_pp0_it1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_SOP_V_reg_289 = "0";
    not_s_reg_293 = "0";
    ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1 = "0";
    ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1 = "0";
    ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1 = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "memcachedPipeline_splitter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hashTable2splitter_V_dout, "(port)hashTable2splitter_V_dout");
    sc_trace(mVcdFile, hashTable2splitter_V_empty_n, "(port)hashTable2splitter_V_empty_n");
    sc_trace(mVcdFile, hashTable2splitter_V_read, "(port)hashTable2splitter_V_read");
    sc_trace(mVcdFile, splitter2valueStoreFlash_V_din, "(port)splitter2valueStoreFlash_V_din");
    sc_trace(mVcdFile, splitter2valueStoreFlash_V_full_n, "(port)splitter2valueStoreFlash_V_full_n");
    sc_trace(mVcdFile, splitter2valueStoreFlash_V_write, "(port)splitter2valueStoreFlash_V_write");
    sc_trace(mVcdFile, splitter2valueStoreDram_V_din, "(port)splitter2valueStoreDram_V_din");
    sc_trace(mVcdFile, splitter2valueStoreDram_V_full_n, "(port)splitter2valueStoreDram_V_full_n");
    sc_trace(mVcdFile, splitter2valueStoreDram_V_write, "(port)splitter2valueStoreDram_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_0, "ap_sig_cseq_ST_pp0_stg0_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_128_p3, "tmp_nbreadreq_fu_128_p3");
    sc_trace(mVcdFile, ap_sig_bdd_52, "ap_sig_bdd_52");
    sc_trace(mVcdFile, tmp_reg_278, "tmp_reg_278");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_reg_278_pp0_it1, "ap_reg_ppstg_tmp_reg_278_pp0_it1");
    sc_trace(mVcdFile, is_validFlag_loc_reg_168, "is_validFlag_loc_reg_168");
    sc_trace(mVcdFile, dramOrFlash_V_loc_reg_180, "dramOrFlash_V_loc_reg_180");
    sc_trace(mVcdFile, ap_sig_bdd_81, "ap_sig_bdd_81");
    sc_trace(mVcdFile, is_validFlag, "is_validFlag");
    sc_trace(mVcdFile, dramOrFlash_V, "dramOrFlash_V");
    sc_trace(mVcdFile, tmp112_reg_282, "tmp112_reg_282");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp112_reg_282_pp0_it1, "ap_reg_ppstg_tmp112_reg_282_pp0_it1");
    sc_trace(mVcdFile, tmp_SOP_V_fu_212_p3, "tmp_SOP_V_fu_212_p3");
    sc_trace(mVcdFile, tmp_SOP_V_reg_289, "tmp_SOP_V_reg_289");
    sc_trace(mVcdFile, not_s_fu_230_p2, "not_s_fu_230_p2");
    sc_trace(mVcdFile, not_s_reg_293, "not_s_reg_293");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0, "ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1, "ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1");
    sc_trace(mVcdFile, is_validFlag_flag_phi_fu_160_p4, "is_validFlag_flag_phi_fu_160_p4");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0, "ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1, "ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1");
    sc_trace(mVcdFile, is_validFlag_loc_phi_fu_172_p4, "is_validFlag_loc_phi_fu_172_p4");
    sc_trace(mVcdFile, ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0, "ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0");
    sc_trace(mVcdFile, ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1, "ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1");
    sc_trace(mVcdFile, p_is_validFlag_flag_fu_258_p2, "p_is_validFlag_flag_fu_258_p2");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1, "ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1");
    sc_trace(mVcdFile, is_validFlag_flag_2_phi_fu_193_p4, "is_validFlag_flag_2_phi_fu_193_p4");
    sc_trace(mVcdFile, not_din_EOP_V_assign_load_2_ne_fu_265_p2, "not_din_EOP_V_assign_load_2_ne_fu_265_p2");
    sc_trace(mVcdFile, ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1, "ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1");
    sc_trace(mVcdFile, is_validFlag_new_2_phi_fu_204_p4, "is_validFlag_new_2_phi_fu_204_p4");
    sc_trace(mVcdFile, p_Result_s_fu_220_p4, "p_Result_s_fu_220_p4");
    sc_trace(mVcdFile, tmp_2_fu_251_p3, "tmp_2_fu_251_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
    sc_trace(mVcdFile, ap_sig_bdd_112, "ap_sig_bdd_112");
    sc_trace(mVcdFile, ap_sig_bdd_88, "ap_sig_bdd_88");
    sc_trace(mVcdFile, ap_sig_bdd_123, "ap_sig_bdd_123");
    sc_trace(mVcdFile, ap_sig_bdd_117, "ap_sig_bdd_117");
    sc_trace(mVcdFile, ap_sig_bdd_160, "ap_sig_bdd_160");
#endif

    }
}

memcachedPipeline_splitter::~memcachedPipeline_splitter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void memcachedPipeline_splitter::thread_ap_clk_pos_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_88.read()) {
            if (ap_sig_bdd_112.read()) {
                ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1 = not_s_fu_230_p2.read();
            } else if (esl_seteq<1,1,1>(ap_true, ap_true)) {
                ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1 = ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_88.read()) {
            if (ap_sig_bdd_112.read()) {
                ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1 = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_true, ap_true)) {
                ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1 = ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_88.read()) {
            if (ap_sig_bdd_112.read()) {
                ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1 = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_true, ap_true)) {
                ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1 = ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppstg_tmp112_reg_282_pp0_it1 = ap_const_lv256_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            ap_reg_ppstg_tmp112_reg_282_pp0_it1 = tmp112_reg_282.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppstg_tmp_reg_278_pp0_it1 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            ap_reg_ppstg_tmp_reg_278_pp0_it1 = tmp_reg_278.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_289.read()))) {
            dramOrFlash_V = not_s_reg_293.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_loc_reg_180 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_117.read()) {
            if (ap_sig_bdd_123.read()) {
                dramOrFlash_V_loc_reg_180 = dramOrFlash_V.read();
            } else if (esl_seteq<1,1,1>(ap_true, ap_true)) {
                dramOrFlash_V_loc_reg_180 = ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it1.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        is_validFlag = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_flag_2_phi_fu_193_p4.read()))) {
            is_validFlag = is_validFlag_new_2_phi_fu_204_p4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        is_validFlag_loc_reg_168 = ap_const_lv1_0;
    } else {
        if (ap_sig_bdd_117.read()) {
            if (ap_sig_bdd_123.read()) {
                is_validFlag_loc_reg_168 = is_validFlag.read();
            } else if (esl_seteq<1,1,1>(ap_true, ap_true)) {
                is_validFlag_loc_reg_168 = ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        not_s_reg_293 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_fu_212_p3.read()))) {
            not_s_reg_293 = not_s_fu_230_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp112_reg_282 = ap_const_lv256_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            tmp112_reg_282 = hashTable2splitter_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_SOP_V_reg_289 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            tmp_SOP_V_reg_289 = hashTable2splitter_V_dout.read().range(124, 124);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_278 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            tmp_reg_278 = tmp_nbreadreq_fu_128_p3.read();
        }
    }
}

void memcachedPipeline_splitter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0() {
    ap_reg_phiprechg_dramOrFlash_V_loc_reg_180pp0_it0 = "X";
}

void memcachedPipeline_splitter::thread_ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1() {
    ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1 = "X";
}

void memcachedPipeline_splitter::thread_ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0() {
    ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it0 = "X";
}

void memcachedPipeline_splitter::thread_ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0() {
    ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it0 = "X";
}

void memcachedPipeline_splitter::thread_ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1() {
    ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1 = "X";
}

void memcachedPipeline_splitter::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_112() {
    ap_sig_bdd_112 = (!esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_fu_212_p3.read()));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_117() {
    ap_sig_bdd_117 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_123() {
    ap_sig_bdd_123 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_289.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_160() {
    ap_sig_bdd_160 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_52() {
    ap_sig_bdd_52 = ((esl_seteq<1,1,1>(hashTable2splitter_V_empty_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0)) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_81() {
    ap_sig_bdd_81 = ((esl_seteq<1,1,1>(splitter2valueStoreFlash_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_tmp_reg_278_pp0_it1.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_reg_168.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_loc_reg_180.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_tmp_reg_278_pp0_it1.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_reg_168.read()) && 
  esl_seteq<1,1,1>(splitter2valueStoreDram_V_full_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_loc_reg_180.read())));
}

void memcachedPipeline_splitter::thread_ap_sig_bdd_88() {
    ap_sig_bdd_88 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))));
}

void memcachedPipeline_splitter::thread_ap_sig_cseq_ST_pp0_stg0_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_hashTable2splitter_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !esl_seteq<1,1,1>(tmp_nbreadreq_fu_128_p3.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        hashTable2splitter_V_read = ap_const_logic_1;
    } else {
        hashTable2splitter_V_read = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_is_validFlag_flag_2_phi_fu_193_p4() {
    if (ap_sig_bdd_160.read()) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_phi_fu_172_p4.read())) {
            is_validFlag_flag_2_phi_fu_193_p4 = is_validFlag_flag_phi_fu_160_p4.read();
        } else if (!esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_phi_fu_172_p4.read())) {
            is_validFlag_flag_2_phi_fu_193_p4 = p_is_validFlag_flag_fu_258_p2.read();
        } else {
            is_validFlag_flag_2_phi_fu_193_p4 = ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1.read();
        }
    } else {
        is_validFlag_flag_2_phi_fu_193_p4 = ap_reg_phiprechg_is_validFlag_flag_2_reg_190pp0_it1.read();
    }
}

void memcachedPipeline_splitter::thread_is_validFlag_flag_phi_fu_160_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_289.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()))) {
        is_validFlag_flag_phi_fu_160_p4 = ap_const_lv1_0;
    } else {
        is_validFlag_flag_phi_fu_160_p4 = ap_reg_phiprechg_is_validFlag_flag_reg_156pp0_it1.read();
    }
}

void memcachedPipeline_splitter::thread_is_validFlag_loc_phi_fu_172_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_289.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_278.read()))) {
        is_validFlag_loc_phi_fu_172_p4 = is_validFlag.read();
    } else {
        is_validFlag_loc_phi_fu_172_p4 = ap_reg_phiprechg_is_validFlag_loc_reg_168pp0_it1.read();
    }
}

void memcachedPipeline_splitter::thread_is_validFlag_new_2_phi_fu_204_p4() {
    if (ap_sig_bdd_160.read()) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_phi_fu_172_p4.read())) {
            is_validFlag_new_2_phi_fu_204_p4 = ap_const_lv1_1;
        } else if (!esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_phi_fu_172_p4.read())) {
            is_validFlag_new_2_phi_fu_204_p4 = not_din_EOP_V_assign_load_2_ne_fu_265_p2.read();
        } else {
            is_validFlag_new_2_phi_fu_204_p4 = ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1.read();
        }
    } else {
        is_validFlag_new_2_phi_fu_204_p4 = ap_reg_phiprechg_is_validFlag_new_2_reg_201pp0_it1.read();
    }
}

void memcachedPipeline_splitter::thread_not_din_EOP_V_assign_load_2_ne_fu_265_p2() {
    not_din_EOP_V_assign_load_2_ne_fu_265_p2 = (tmp_2_fu_251_p3.read() ^ ap_const_lv1_1);
}

void memcachedPipeline_splitter::thread_not_s_fu_230_p2() {
    not_s_fu_230_p2 = (!p_Result_s_fu_220_p4.read().is_01() || !ap_const_lv32_801.is_01())? sc_lv<1>(): (sc_biguint<32>(p_Result_s_fu_220_p4.read()) < sc_biguint<32>(ap_const_lv32_801));
}

void memcachedPipeline_splitter::thread_p_Result_s_fu_220_p4() {
    p_Result_s_fu_220_p4 = hashTable2splitter_V_dout.read().range(39, 8);
}

void memcachedPipeline_splitter::thread_p_is_validFlag_flag_fu_258_p2() {
    p_is_validFlag_flag_fu_258_p2 = (tmp_2_fu_251_p3.read() | is_validFlag_flag_phi_fu_160_p4.read());
}

void memcachedPipeline_splitter::thread_splitter2valueStoreDram_V_din() {
    splitter2valueStoreDram_V_din = ap_reg_ppstg_tmp112_reg_282_pp0_it1.read();
}

void memcachedPipeline_splitter::thread_splitter2valueStoreDram_V_write() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_tmp_reg_278_pp0_it1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_reg_168.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_loc_reg_180.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        splitter2valueStoreDram_V_write = ap_const_logic_1;
    } else {
        splitter2valueStoreDram_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_splitter2valueStoreFlash_V_din() {
    splitter2valueStoreFlash_V_din = ap_reg_ppstg_tmp112_reg_282_pp0_it1.read();
}

void memcachedPipeline_splitter::thread_splitter2valueStoreFlash_V_write() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_tmp_reg_278_pp0_it1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, is_validFlag_loc_reg_168.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_loc_reg_180.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_52.read()) || (ap_sig_bdd_81.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        splitter2valueStoreFlash_V_write = ap_const_logic_1;
    } else {
        splitter2valueStoreFlash_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_splitter::thread_tmp_2_fu_251_p3() {
    tmp_2_fu_251_p3 = tmp112_reg_282.read().range(127, 127);
}

void memcachedPipeline_splitter::thread_tmp_SOP_V_fu_212_p3() {
    tmp_SOP_V_fu_212_p3 = hashTable2splitter_V_dout.read().range(124, 124);
}

void memcachedPipeline_splitter::thread_tmp_nbreadreq_fu_128_p3() {
    tmp_nbreadreq_fu_128_p3 =  (sc_lv<1>) (hashTable2splitter_V_empty_n.read());
}

void memcachedPipeline_splitter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

