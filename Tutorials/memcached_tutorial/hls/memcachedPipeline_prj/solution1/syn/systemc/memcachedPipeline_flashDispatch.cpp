// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "memcachedPipeline_flashDispatch.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic memcachedPipeline_flashDispatch::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic memcachedPipeline_flashDispatch::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> memcachedPipeline_flashDispatch::ap_ST_st1_fsm0_0 = "1";
const sc_lv<2> memcachedPipeline_flashDispatch::ap_ST_st2_fsm1_1 = "10";
const sc_lv<2> memcachedPipeline_flashDispatch::ap_ST_st0_fsm1_0 = "1";
const sc_lv<32> memcachedPipeline_flashDispatch::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> memcachedPipeline_flashDispatch::ap_const_lv1_1 = "1";
const sc_lv<1> memcachedPipeline_flashDispatch::ap_const_lv1_0 = "0";
const sc_lv<32> memcachedPipeline_flashDispatch::ap_const_lv32_1 = "1";
const sc_lv<32> memcachedPipeline_flashDispatch::ap_const_lv32_20 = "100000";
const sc_lv<32> memcachedPipeline_flashDispatch::ap_const_lv32_2F = "101111";
const sc_lv<32> memcachedPipeline_flashDispatch::ap_const_lv32_23 = "100011";
const sc_lv<3> memcachedPipeline_flashDispatch::ap_const_lv3_0 = "000";
const sc_lv<13> memcachedPipeline_flashDispatch::ap_const_lv13_1 = "1";
const sc_lv<13> memcachedPipeline_flashDispatch::ap_const_lv13_0 = "0000000000000";
const sc_lv<16> memcachedPipeline_flashDispatch::ap_const_lv16_0 = "0000000000000000";

memcachedPipeline_flashDispatch::memcachedPipeline_flashDispatch(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_cseq_ST_st0_fsm1_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_sig_bdd_178);
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_sig_bdd_179);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( memRdCmd_V_TREADY );

    SC_METHOD(thread_ap_sig_bdd_23);
    sensitive << ( ap_CS_fsm0 );

    SC_METHOD(thread_ap_sig_bdd_34);
    sensitive << ( ap_CS_fsm1 );

    SC_METHOD(thread_ap_sig_bdd_52);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp19_nbreadreq_fu_60_p3 );

    SC_METHOD(thread_ap_sig_bdd_63);
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp19_reg_149 );

    SC_METHOD(thread_ap_sig_bdd_74);
    sensitive << ( ap_CS_fsm1 );

    SC_METHOD(thread_ap_sig_cseq_ST_st0_fsm1_0);
    sensitive << ( ap_sig_bdd_34 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm0_0);
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm1_1);
    sensitive << ( ap_sig_bdd_74 );

    SC_METHOD(thread_ap_sig_ioackin_memRdCmd_V_TREADY);
    sensitive << ( memRdCmd_V_TREADY );
    sensitive << ( ap_reg_ioackin_memRdCmd_V_TREADY );

    SC_METHOD(thread_flashDemux2getPath_V_read);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( tmp19_nbreadreq_fu_60_p3 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_flash_Disp2rec_V_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( tmp_V_reg_158 );

    SC_METHOD(thread_flash_Disp2rec_V_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_getCtrlWord_address_V_fu_89_p1);
    sensitive << ( flashDemux2getPath_V_dout );

    SC_METHOD(thread_getCtrlWord_count_V_fu_130_p3);
    sensitive << ( tmp_100_reg_164 );
    sensitive << ( tmp_77_fu_120_p2 );
    sensitive << ( tmp_99_fu_125_p2 );

    SC_METHOD(thread_memRdCmd_V_TDATA);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( tmp_1_fu_137_p3 );

    SC_METHOD(thread_memRdCmd_V_TVALID);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( ap_reg_ioackin_memRdCmd_V_TREADY );

    SC_METHOD(thread_op2_assign_fu_113_p3);
    sensitive << ( tmp_100_reg_164 );

    SC_METHOD(thread_tmp19_nbreadreq_fu_60_p3);
    sensitive << ( flashDemux2getPath_V_empty_n );

    SC_METHOD(thread_tmp_1_fu_137_p3);
    sensitive << ( getCtrlWord_address_V_reg_153 );
    sensitive << ( getCtrlWord_count_V_fu_130_p3 );

    SC_METHOD(thread_tmp_77_fu_120_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );
    sensitive << ( tmp_V_reg_158 );
    sensitive << ( op2_assign_fu_113_p3 );

    SC_METHOD(thread_tmp_99_fu_125_p2);
    sensitive << ( tmp_100_reg_164 );

    SC_METHOD(thread_ap_NS_fsm1);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm0_0 );
    sensitive << ( ap_CS_fsm1 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    SC_METHOD(thread_ap_NS_fsm0);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm0 );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( tmp19_reg_149 );
    sensitive << ( ap_sig_bdd_63 );
    sensitive << ( ap_sig_ioackin_memRdCmd_V_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm1_1 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm0 = "1";
    ap_CS_fsm1 = "01";
    tmp19_reg_149 = "0";
    getCtrlWord_address_V_reg_153 = "00000000000000000000000000000000";
    tmp_V_reg_158 = "0000000000000000";
    tmp_100_reg_164 = "0000000000000";
    ap_reg_ioackin_memRdCmd_V_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "memcachedPipeline_flashDispatch_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, flashDemux2getPath_V_dout, "(port)flashDemux2getPath_V_dout");
    sc_trace(mVcdFile, flashDemux2getPath_V_empty_n, "(port)flashDemux2getPath_V_empty_n");
    sc_trace(mVcdFile, flashDemux2getPath_V_read, "(port)flashDemux2getPath_V_read");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_din, "(port)flash_Disp2rec_V_V_din");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_full_n, "(port)flash_Disp2rec_V_V_full_n");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_write, "(port)flash_Disp2rec_V_V_write");
    sc_trace(mVcdFile, memRdCmd_V_TREADY, "(port)memRdCmd_V_TREADY");
    sc_trace(mVcdFile, memRdCmd_V_TDATA, "(port)memRdCmd_V_TDATA");
    sc_trace(mVcdFile, memRdCmd_V_TVALID, "(port)memRdCmd_V_TVALID");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm0, "ap_CS_fsm0");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm0_0, "ap_sig_cseq_ST_st1_fsm0_0");
    sc_trace(mVcdFile, ap_sig_bdd_23, "ap_sig_bdd_23");
    sc_trace(mVcdFile, ap_CS_fsm1, "ap_CS_fsm1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st0_fsm1_0, "ap_sig_cseq_ST_st0_fsm1_0");
    sc_trace(mVcdFile, ap_sig_bdd_34, "ap_sig_bdd_34");
    sc_trace(mVcdFile, tmp19_nbreadreq_fu_60_p3, "tmp19_nbreadreq_fu_60_p3");
    sc_trace(mVcdFile, ap_sig_bdd_52, "ap_sig_bdd_52");
    sc_trace(mVcdFile, tmp19_reg_149, "tmp19_reg_149");
    sc_trace(mVcdFile, ap_sig_bdd_63, "ap_sig_bdd_63");
    sc_trace(mVcdFile, ap_sig_ioackin_memRdCmd_V_TREADY, "ap_sig_ioackin_memRdCmd_V_TREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm1_1, "ap_sig_cseq_ST_st2_fsm1_1");
    sc_trace(mVcdFile, ap_sig_bdd_74, "ap_sig_bdd_74");
    sc_trace(mVcdFile, getCtrlWord_address_V_fu_89_p1, "getCtrlWord_address_V_fu_89_p1");
    sc_trace(mVcdFile, getCtrlWord_address_V_reg_153, "getCtrlWord_address_V_reg_153");
    sc_trace(mVcdFile, tmp_V_reg_158, "tmp_V_reg_158");
    sc_trace(mVcdFile, tmp_100_reg_164, "tmp_100_reg_164");
    sc_trace(mVcdFile, ap_reg_ioackin_memRdCmd_V_TREADY, "ap_reg_ioackin_memRdCmd_V_TREADY");
    sc_trace(mVcdFile, op2_assign_fu_113_p3, "op2_assign_fu_113_p3");
    sc_trace(mVcdFile, tmp_77_fu_120_p2, "tmp_77_fu_120_p2");
    sc_trace(mVcdFile, tmp_99_fu_125_p2, "tmp_99_fu_125_p2");
    sc_trace(mVcdFile, getCtrlWord_count_V_fu_130_p3, "getCtrlWord_count_V_fu_130_p3");
    sc_trace(mVcdFile, tmp_1_fu_137_p3, "tmp_1_fu_137_p3");
    sc_trace(mVcdFile, ap_NS_fsm0, "ap_NS_fsm0");
    sc_trace(mVcdFile, ap_NS_fsm1, "ap_NS_fsm1");
    sc_trace(mVcdFile, ap_sig_bdd_179, "ap_sig_bdd_179");
    sc_trace(mVcdFile, ap_sig_bdd_178, "ap_sig_bdd_178");
#endif

    }
}

memcachedPipeline_flashDispatch::~memcachedPipeline_flashDispatch() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void memcachedPipeline_flashDispatch::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm0 = ap_ST_st1_fsm0_0;
    } else {
        ap_CS_fsm0 = ap_NS_fsm0.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm1 = ap_ST_st0_fsm1_0;
    } else {
        ap_CS_fsm1 = ap_NS_fsm1.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_memRdCmd_V_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_178.read()) {
            if (!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read())))) {
                ap_reg_ioackin_memRdCmd_V_TREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_179.read()) {
                ap_reg_ioackin_memRdCmd_V_TREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getCtrlWord_address_V_reg_153 = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(tmp19_nbreadreq_fu_60_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            getCtrlWord_address_V_reg_153 = getCtrlWord_address_V_fu_89_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp19_reg_149 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp19_reg_149 = tmp19_nbreadreq_fu_60_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_100_reg_164 = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(tmp19_nbreadreq_fu_60_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_100_reg_164 = flashDemux2getPath_V_dout.read().range(47, 35);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_V_reg_158 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
             !esl_seteq<1,1,1>(tmp19_nbreadreq_fu_60_p3.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
            tmp_V_reg_158 = flashDemux2getPath_V_dout.read().range(47, 32);
        }
    }
}

void memcachedPipeline_flashDispatch::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read())))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st0_fsm1_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_178() {
    ap_sig_bdd_178 = (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_179() {
    ap_sig_bdd_179 = (!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read()) && esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_TREADY.read()));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_23() {
    ap_sig_bdd_23 = esl_seteq<1,1,1>(ap_CS_fsm0.read().range(0, 0), ap_const_lv1_1);
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_34() {
    ap_sig_bdd_34 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm1.read().range(0, 0));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_52() {
    ap_sig_bdd_52 = ((esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  !esl_seteq<1,1,1>(tmp19_nbreadreq_fu_60_p3.read(), ap_const_lv1_0)) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_63() {
    ap_sig_bdd_63 = (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_bdd_74() {
    ap_sig_bdd_74 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm1.read().range(1, 1));
}

void memcachedPipeline_flashDispatch::thread_ap_sig_cseq_ST_st0_fsm1_0() {
    if (ap_sig_bdd_34.read()) {
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_sig_cseq_ST_st1_fsm0_0() {
    if (ap_sig_bdd_23.read()) {
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_sig_cseq_ST_st2_fsm1_1() {
    if (ap_sig_bdd_74.read()) {
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_sig_ioackin_memRdCmd_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_memRdCmd_V_TREADY.read())) {
        ap_sig_ioackin_memRdCmd_V_TREADY = memRdCmd_V_TREADY.read();
    } else {
        ap_sig_ioackin_memRdCmd_V_TREADY = ap_const_logic_1;
    }
}

void memcachedPipeline_flashDispatch::thread_flashDemux2getPath_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
         !esl_seteq<1,1,1>(tmp19_nbreadreq_fu_60_p3.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
        flashDemux2getPath_V_read = ap_const_logic_1;
    } else {
        flashDemux2getPath_V_read = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_flash_Disp2rec_V_V_din() {
    flash_Disp2rec_V_V_din = tmp_V_reg_158.read();
}

void memcachedPipeline_flashDispatch::thread_flash_Disp2rec_V_V_write() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))))) {
        flash_Disp2rec_V_V_write = ap_const_logic_1;
    } else {
        flash_Disp2rec_V_V_write = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_getCtrlWord_address_V_fu_89_p1() {
    getCtrlWord_address_V_fu_89_p1 = flashDemux2getPath_V_dout.read().range(32-1, 0);
}

void memcachedPipeline_flashDispatch::thread_getCtrlWord_count_V_fu_130_p3() {
    getCtrlWord_count_V_fu_130_p3 = (!tmp_77_fu_120_p2.read()[0].is_01())? sc_lv<13>(): ((tmp_77_fu_120_p2.read()[0].to_bool())? tmp_99_fu_125_p2.read(): tmp_100_reg_164.read());
}

void memcachedPipeline_flashDispatch::thread_memRdCmd_V_TDATA() {
    memRdCmd_V_TDATA = esl_zext<48,45>(tmp_1_fu_137_p3.read());
}

void memcachedPipeline_flashDispatch::thread_memRdCmd_V_TVALID() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_memRdCmd_V_TREADY.read()))) {
        memRdCmd_V_TVALID = ap_const_logic_1;
    } else {
        memRdCmd_V_TVALID = ap_const_logic_0;
    }
}

void memcachedPipeline_flashDispatch::thread_op2_assign_fu_113_p3() {
    op2_assign_fu_113_p3 = esl_concat<13,3>(tmp_100_reg_164.read(), ap_const_lv3_0);
}

void memcachedPipeline_flashDispatch::thread_tmp19_nbreadreq_fu_60_p3() {
    tmp19_nbreadreq_fu_60_p3 =  (sc_lv<1>) (flashDemux2getPath_V_empty_n.read());
}

void memcachedPipeline_flashDispatch::thread_tmp_1_fu_137_p3() {
    tmp_1_fu_137_p3 = esl_concat<13,32>(getCtrlWord_count_V_fu_130_p3.read(), getCtrlWord_address_V_reg_153.read());
}

void memcachedPipeline_flashDispatch::thread_tmp_77_fu_120_p2() {
    tmp_77_fu_120_p2 = (!tmp_V_reg_158.read().is_01() || !op2_assign_fu_113_p3.read().is_01())? sc_lv<1>(): (sc_biguint<16>(tmp_V_reg_158.read()) > sc_biguint<16>(op2_assign_fu_113_p3.read()));
}

void memcachedPipeline_flashDispatch::thread_tmp_99_fu_125_p2() {
    tmp_99_fu_125_p2 = (!ap_const_lv13_1.is_01() || !tmp_100_reg_164.read().is_01())? sc_lv<13>(): (sc_biguint<13>(ap_const_lv13_1) + sc_biguint<13>(tmp_100_reg_164.read()));
}

void memcachedPipeline_flashDispatch::thread_ap_NS_fsm1() {
    switch (ap_CS_fsm1.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && !ap_sig_bdd_52.read())) {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_63.read() || (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && (!esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && 
   ap_sig_bdd_52.read())))) {
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            } else {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm0_0.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || ap_sig_bdd_52.read() || ((ap_sig_bdd_63.read() || 
   (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp19_reg_149.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_memRdCmd_V_TREADY.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm1_1.read()))))) {
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            } else {
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            }
            break;
        default : 
            ap_NS_fsm1 =  (sc_lv<2>) ("XX");
            break;
    }
}

void memcachedPipeline_flashDispatch::thread_ap_NS_fsm0() {
    switch (ap_CS_fsm0.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
break;
        default : 
            ap_NS_fsm0 = "X";
            break;
    }
}

}

