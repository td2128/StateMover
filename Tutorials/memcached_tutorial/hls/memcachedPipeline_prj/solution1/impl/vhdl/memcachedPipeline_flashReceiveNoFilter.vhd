-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity memcachedPipeline_flashReceiveNoFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flash_Disp2rec_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    flash_Disp2rec_V_V_empty_n : IN STD_LOGIC;
    flash_Disp2rec_V_V_read : OUT STD_LOGIC;
    memRdData_V_V_TVALID : IN STD_LOGIC;
    flashGetPath2remux_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    flashGetPath2remux_V_V_full_n : IN STD_LOGIC;
    flashGetPath2remux_V_V_write : OUT STD_LOGIC;
    memRdData_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    memRdData_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of memcachedPipeline_flashReceiveNoFilter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm0_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_st2_fsm1_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st0_fsm1_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFF8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm0 : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm0_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_CS_fsm1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm1 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm1_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal tmp_17_nbreadreq_fu_66_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nbreadreq_fu_74_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_67 : BOOLEAN;
    signal flashGetState_load_reg_203 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_17_reg_207 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_18_reg_211 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_reg_215 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_sig_bdd_95 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm1_1 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal flashGetState : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal getValueLength_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal getCounter : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal reg_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal tmp_41_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_219 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_reg_ppstg_tmp_41_reg_219_pp0_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_115_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_fu_155_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_133_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_149_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_50 : BOOLEAN;
    signal ap_sig_bdd_217 : BOOLEAN;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_sig_bdd_139 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm0) of the state machine. --
    ap_CS_fsm0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
            else
                ap_CS_fsm0 <= ap_NS_fsm0;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm1) of the state machine. --
    ap_CS_fsm1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
            else
                ap_CS_fsm1 <= ap_NS_fsm1;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- flashGetState assign process. --
    flashGetState_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                flashGetState <= ap_const_lv1_0;
            else
                if (ap_sig_bdd_215) then
                    if (ap_sig_bdd_217) then 
                        flashGetState <= ap_const_lv1_0;
                    elsif (ap_sig_bdd_50) then 
                        flashGetState <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- flashGetState_load_reg_203 assign process. --
    flashGetState_load_reg_203_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                flashGetState_load_reg_203 <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                    flashGetState_load_reg_203 <= flashGetState;
                end if; 
            end if;
        end if;
    end process;


    -- getCounter assign process. --
    getCounter_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                getCounter <= ap_const_lv8_0;
            else
                if (ap_sig_bdd_139) then
                    if (ap_sig_bdd_156) then 
                        getCounter <= ap_const_lv8_0;
                    elsif (ap_sig_bdd_86) then 
                        getCounter <= tmp_43_fu_185_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- getValueLength_V assign process. --
    getValueLength_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                getValueLength_V <= ap_const_lv16_0;
            else
                if (ap_sig_bdd_215) then
                    if (not((flashGetState = ap_const_lv1_0))) then 
                        getValueLength_V <= storemerge_fu_155_p3;
                    elsif (ap_sig_bdd_50) then 
                        getValueLength_V <= tmp_42_fu_115_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- reg_102 assign process. --
    reg_102_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                reg_102 <= ap_const_lv64_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not((flashGetState = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))))) then 
                    reg_102 <= memRdData_V_V_TDATA;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_17_reg_207 assign process. --
    tmp_17_reg_207_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_17_reg_207 <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (flashGetState = ap_const_lv1_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                    tmp_17_reg_207 <= tmp_17_nbreadreq_fu_66_p3;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_18_reg_211 assign process. --
    tmp_18_reg_211_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_18_reg_211 <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                    tmp_18_reg_211 <= grp_nbreadreq_fu_74_p3;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_41_reg_219 assign process. --
    tmp_41_reg_219_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_41_reg_219 <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not((flashGetState = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                    tmp_41_reg_219 <= tmp_41_fu_169_p2;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_reg_215 assign process. --
    tmp_reg_215_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_reg_215 <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((flashGetState = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                    tmp_reg_215 <= grp_nbreadreq_fu_74_p3;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm1) of the state machine. --
    ap_NS_fsm1_assign_proc : process (ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_CS_fsm1, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm1 is
            when ap_ST_st2_fsm1_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95)) and not(ap_sig_bdd_67))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95)) and (not((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and ap_sig_bdd_67)))) then
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                else
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                end if;
            when ap_ST_st0_fsm1_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                else
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                end if;
            when others =>  
                ap_NS_fsm1 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm0) of the state machine. --
    ap_NS_fsm0_assign_proc : process (ap_done_reg, ap_CS_fsm0, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm0 is
            when ap_ST_st1_fsm0_0 => 
                ap_NS_fsm0 <= ap_ST_st1_fsm0_0;
            when others =>  
                ap_NS_fsm0 <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_cseq_ST_st0_fsm1_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm1_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppstg_tmp_41_reg_219_pp0_it0 <= tmp_41_reg_219;

    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm1(1 downto 1));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_done_reg, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
                ap_sig_bdd_139 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95)));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(flashGetState_load_reg_203, tmp_reg_215, ap_reg_ppstg_tmp_41_reg_219_pp0_it0)
    begin
                ap_sig_bdd_156 <= (not((ap_const_lv1_0 = flashGetState_load_reg_203)) and not((ap_const_lv1_0 = tmp_reg_215)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_41_reg_219_pp0_it0)));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, grp_nbreadreq_fu_74_p3, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
                ap_sig_bdd_215 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(flashGetState, tmp_41_fu_169_p2)
    begin
                ap_sig_bdd_217 <= (not((flashGetState = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_41_fu_169_p2)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm0)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm0(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_34 <= (ap_const_lv1_1 = ap_CS_fsm1(0 downto 0));
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(tmp_17_nbreadreq_fu_66_p3, flashGetState)
    begin
                ap_sig_bdd_50 <= ((flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_start, ap_done_reg, flash_Disp2rec_V_V_empty_n, tmp_17_nbreadreq_fu_66_p3, grp_nbreadreq_fu_74_p3, memRdData_V_V_TVALID, flashGetState)
    begin
                ap_sig_bdd_67 <= (((flash_Disp2rec_V_V_empty_n = ap_const_logic_0) and (flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3))) or ((flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and (memRdData_V_V_TVALID = ap_const_logic_0)) or (not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and (memRdData_V_V_TVALID = ap_const_logic_0) and not((flashGetState = ap_const_lv1_0))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(flashGetState_load_reg_203, tmp_17_reg_207, tmp_18_reg_211)
    begin
                ap_sig_bdd_86 <= ((ap_const_lv1_0 = flashGetState_load_reg_203) and not((ap_const_lv1_0 = tmp_17_reg_207)) and not((ap_const_lv1_0 = tmp_18_reg_211)));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(flashGetPath2remux_V_V_full_n, flashGetState_load_reg_203, tmp_17_reg_207, tmp_18_reg_211, tmp_reg_215)
    begin
                ap_sig_bdd_95 <= (((flashGetPath2remux_V_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = flashGetState_load_reg_203) and not((ap_const_lv1_0 = tmp_17_reg_207)) and not((ap_const_lv1_0 = tmp_18_reg_211))) or ((flashGetPath2remux_V_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = flashGetState_load_reg_203)) and not((ap_const_lv1_0 = tmp_reg_215))));
    end process;


    -- ap_sig_cseq_ST_st0_fsm1_0 assign process. --
    ap_sig_cseq_ST_st0_fsm1_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm0_0 assign process. --
    ap_sig_cseq_ST_st1_fsm0_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm1_1 assign process. --
    ap_sig_cseq_ST_st2_fsm1_1_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_0;
        end if; 
    end process;

    flashGetPath2remux_V_V_din <= reg_102;

    -- flashGetPath2remux_V_V_write assign process. --
    flashGetPath2remux_V_V_write_assign_proc : process(ap_done_reg, flashGetState_load_reg_203, tmp_17_reg_207, tmp_18_reg_211, tmp_reg_215, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if ((((ap_const_lv1_0 = flashGetState_load_reg_203) and not((ap_const_lv1_0 = tmp_17_reg_207)) and not((ap_const_lv1_0 = tmp_18_reg_211)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95))) or (not((ap_const_lv1_0 = flashGetState_load_reg_203)) and not((ap_const_lv1_0 = tmp_reg_215)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_95))))) then 
            flashGetPath2remux_V_V_write <= ap_const_logic_1;
        else 
            flashGetPath2remux_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- flash_Disp2rec_V_V_read assign process. --
    flash_Disp2rec_V_V_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, tmp_17_nbreadreq_fu_66_p3, grp_nbreadreq_fu_74_p3, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1, flashGetState)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            flash_Disp2rec_V_V_read <= ap_const_logic_1;
        else 
            flash_Disp2rec_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_nbreadreq_fu_74_p3 <= (0=>memRdData_V_V_TVALID, others=>'-');
    icmp_fu_143_p2 <= "0" when (tmp_56_fu_133_p4 = ap_const_lv13_0) else "1";

    -- memRdData_V_V_TREADY assign process. --
    memRdData_V_V_TREADY_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, tmp_17_nbreadreq_fu_66_p3, grp_nbreadreq_fu_74_p3, ap_sig_bdd_67, ap_sig_bdd_95, ap_sig_cseq_ST_st2_fsm1_1, flashGetState)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (flashGetState = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_66_p3)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_74_p3)) and not((flashGetState = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_67 or (ap_sig_bdd_95 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))))) then 
            memRdData_V_V_TREADY <= ap_const_logic_1;
        else 
            memRdData_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_155_p3 <= 
        tmp_s_fu_149_p2 when (icmp_fu_143_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_17_nbreadreq_fu_66_p3 <= (0=>flash_Disp2rec_V_V_empty_n, others=>'-');
    tmp_41_fu_169_p2 <= "1" when (storemerge_fu_155_p3 = ap_const_lv16_0) else "0";
    tmp_42_fu_115_p2 <= std_logic_vector(unsigned(flash_Disp2rec_V_V_dout) + unsigned(ap_const_lv16_FFF8));
    tmp_43_fu_185_p2 <= std_logic_vector(unsigned(getCounter) + unsigned(ap_const_lv8_1));
    tmp_56_fu_133_p4 <= getValueLength_V(15 downto 3);
    tmp_s_fu_149_p2 <= std_logic_vector(unsigned(getValueLength_V) + unsigned(ap_const_lv16_FFF8));
end behav;
