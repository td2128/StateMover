// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_width_upsizer,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.671000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=305,HLS_SYN_LUT=310,HLS_VERSION=2018_3}" *)

module axis_width_upsizer (
        ap_clk,
        ap_rst_n,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TLAST,
        data_out_TDATA,
        data_out_TVALID,
        data_out_TREADY,
        data_out_TLAST,
        data_out_TKEEP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [7:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [0:0] data_in_TLAST;
output  [63:0] data_out_TDATA;
output   data_out_TVALID;
input   data_out_TREADY;
output  [0:0] data_out_TLAST;
output  [7:0] data_out_TKEEP;

reg data_in_TREADY;

 reg    ap_rst_n_inv;
reg   [63:0] data_out_V_data_V_1_data_out;
reg    data_out_V_data_V_1_vld_in;
wire    data_out_V_data_V_1_vld_out;
wire    data_out_V_data_V_1_ack_in;
wire    data_out_V_data_V_1_ack_out;
reg   [63:0] data_out_V_data_V_1_payload_A;
reg   [63:0] data_out_V_data_V_1_payload_B;
reg    data_out_V_data_V_1_sel_rd;
reg    data_out_V_data_V_1_sel_wr;
wire    data_out_V_data_V_1_sel;
wire    data_out_V_data_V_1_load_A;
wire    data_out_V_data_V_1_load_B;
reg   [1:0] data_out_V_data_V_1_state;
wire    data_out_V_data_V_1_state_cmp_full;
reg   [0:0] data_out_V_last_V_1_data_out;
reg    data_out_V_last_V_1_vld_in;
wire    data_out_V_last_V_1_vld_out;
wire    data_out_V_last_V_1_ack_in;
wire    data_out_V_last_V_1_ack_out;
reg   [0:0] data_out_V_last_V_1_payload_A;
reg   [0:0] data_out_V_last_V_1_payload_B;
reg    data_out_V_last_V_1_sel_rd;
reg    data_out_V_last_V_1_sel_wr;
wire    data_out_V_last_V_1_sel;
wire    data_out_V_last_V_1_load_A;
wire    data_out_V_last_V_1_load_B;
reg   [1:0] data_out_V_last_V_1_state;
wire    data_out_V_last_V_1_state_cmp_full;
reg   [7:0] data_out_V_keep_V_1_data_out;
reg    data_out_V_keep_V_1_vld_in;
wire    data_out_V_keep_V_1_vld_out;
wire    data_out_V_keep_V_1_ack_in;
wire    data_out_V_keep_V_1_ack_out;
reg   [7:0] data_out_V_keep_V_1_payload_A;
reg   [7:0] data_out_V_keep_V_1_payload_B;
reg    data_out_V_keep_V_1_sel_rd;
reg    data_out_V_keep_V_1_sel_wr;
wire    data_out_V_keep_V_1_sel;
wire    data_out_V_keep_V_1_load_A;
wire    data_out_V_keep_V_1_load_B;
reg   [1:0] data_out_V_keep_V_1_state;
wire    data_out_V_keep_V_1_state_cmp_full;
reg   [2:0] counter_V;
reg   [63:0] send_word_data_V;
reg    data_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_nbreadreq_fu_108_p4;
reg    data_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_393;
reg   [0:0] or_cond_reg_445;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_393_pp0_iter1_reg;
reg   [0:0] or_cond_reg_445_pp0_iter1_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op44_write_state2;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op56_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_last_V_reg_397;
wire   [63:0] p_Result_7_fu_219_p5;
wire   [2:0] t_V_load_fu_211_p1;
wire   [63:0] p_Result_6_fu_237_p5;
wire   [63:0] p_Result_5_fu_255_p5;
wire   [63:0] p_Result_4_fu_273_p5;
wire   [63:0] p_Result_3_fu_291_p5;
wire   [63:0] p_Result_2_fu_309_p5;
wire   [63:0] p_Result_1_fu_327_p5;
wire   [63:0] p_Result_s_fu_345_p5;
wire   [0:0] or_cond_fu_369_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139;
reg   [7:0] ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139;
wire   [63:0] ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179;
reg   [63:0] ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179;
wire   [2:0] tmp_7_fu_375_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_5_fu_363_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_334;
reg    ap_condition_368;

// power-on initialization
initial begin
#0 data_out_V_data_V_1_sel_rd = 1'b0;
#0 data_out_V_data_V_1_sel_wr = 1'b0;
#0 data_out_V_data_V_1_state = 2'd0;
#0 data_out_V_last_V_1_sel_rd = 1'b0;
#0 data_out_V_last_V_1_sel_wr = 1'b0;
#0 data_out_V_last_V_1_state = 2'd0;
#0 data_out_V_keep_V_1_sel_rd = 1'b0;
#0 data_out_V_keep_V_1_sel_wr = 1'b0;
#0 data_out_V_keep_V_1_state = 2'd0;
#0 counter_V = 3'd0;
#0 send_word_data_V = 64'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_data_V_1_ack_out == 1'b1) & (data_out_V_data_V_1_vld_out == 1'b1))) begin
            data_out_V_data_V_1_sel_rd <= ~data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_data_V_1_ack_in == 1'b1) & (data_out_V_data_V_1_vld_in == 1'b1))) begin
            data_out_V_data_V_1_sel_wr <= ~data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_data_V_1_state == 2'd2) & (data_out_V_data_V_1_vld_in == 1'b0)) | ((data_out_V_data_V_1_state == 2'd3) & (data_out_V_data_V_1_vld_in == 1'b0) & (data_out_V_data_V_1_ack_out == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd2;
        end else if ((((data_out_V_data_V_1_state == 2'd1) & (data_out_V_data_V_1_ack_out == 1'b0)) | ((data_out_V_data_V_1_state == 2'd3) & (data_out_V_data_V_1_ack_out == 1'b0) & (data_out_V_data_V_1_vld_in == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((data_out_V_data_V_1_vld_in == 1'b0) & (data_out_V_data_V_1_ack_out == 1'b1)) & ~((data_out_V_data_V_1_ack_out == 1'b0) & (data_out_V_data_V_1_vld_in == 1'b1)) & (data_out_V_data_V_1_state == 2'd3)) | ((data_out_V_data_V_1_state == 2'd1) & (data_out_V_data_V_1_ack_out == 1'b1)) | ((data_out_V_data_V_1_state == 2'd2) & (data_out_V_data_V_1_vld_in == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd3;
        end else begin
            data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_keep_V_1_ack_out == 1'b1) & (data_out_V_keep_V_1_vld_out == 1'b1))) begin
            data_out_V_keep_V_1_sel_rd <= ~data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_keep_V_1_ack_in == 1'b1) & (data_out_V_keep_V_1_vld_in == 1'b1))) begin
            data_out_V_keep_V_1_sel_wr <= ~data_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_keep_V_1_state == 2'd2) & (data_out_V_keep_V_1_vld_in == 1'b0)) | ((data_out_V_keep_V_1_state == 2'd3) & (data_out_V_keep_V_1_vld_in == 1'b0) & (data_out_V_keep_V_1_ack_out == 1'b1)))) begin
            data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((data_out_V_keep_V_1_state == 2'd1) & (data_out_V_keep_V_1_ack_out == 1'b0)) | ((data_out_V_keep_V_1_state == 2'd3) & (data_out_V_keep_V_1_ack_out == 1'b0) & (data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((data_out_V_keep_V_1_vld_in == 1'b0) & (data_out_V_keep_V_1_ack_out == 1'b1)) & ~((data_out_V_keep_V_1_ack_out == 1'b0) & (data_out_V_keep_V_1_vld_in == 1'b1)) & (data_out_V_keep_V_1_state == 2'd3)) | ((data_out_V_keep_V_1_state == 2'd1) & (data_out_V_keep_V_1_ack_out == 1'b1)) | ((data_out_V_keep_V_1_state == 2'd2) & (data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_out == 1'b1) & (data_out_V_last_V_1_vld_out == 1'b1))) begin
            data_out_V_last_V_1_sel_rd <= ~data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_in == 1'b1) & (data_out_V_last_V_1_vld_in == 1'b1))) begin
            data_out_V_last_V_1_sel_wr <= ~data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b0)) | ((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd2;
        end else if ((((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)) | ((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b0)))) begin
            data_out_V_last_V_1_state <= 2'd1;
        end else if ((((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b1)) | (~((data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)) & ~((data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)) & (data_out_V_last_V_1_state == 2'd3)) | ((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd3;
        end else begin
            data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_334)) begin
        if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_1_fu_327_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_2_fu_309_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd2))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_3_fu_291_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd3))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_4_fu_273_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd4))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_5_fu_255_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd5))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_6_fu_237_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd6))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_7_fu_219_p5;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd7))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= p_Result_s_fu_345_p5;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 <= ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_334)) begin
        if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd1;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd3;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd2))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd7;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd3))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd15;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd4))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd31;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd5))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd63;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd6))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd127;
        end else if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (t_V_load_fu_211_p1 == 3'd7))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= 8'd255;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_368)) begin
        if ((or_cond_fu_369_p2 == 1'd1)) begin
            counter_V <= 3'd0;
        end else if ((or_cond_fu_369_p2 == 1'd0)) begin
            counter_V <= tmp_7_fu_375_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_368)) begin
        if ((t_V_load_fu_211_p1 == 3'd7)) begin
            send_word_data_V <= p_Result_s_fu_345_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd0)) begin
            send_word_data_V <= p_Result_1_fu_327_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd1)) begin
            send_word_data_V <= p_Result_2_fu_309_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd2)) begin
            send_word_data_V <= p_Result_3_fu_291_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd3)) begin
            send_word_data_V <= p_Result_4_fu_273_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd4)) begin
            send_word_data_V <= p_Result_5_fu_255_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd5)) begin
            send_word_data_V <= p_Result_6_fu_237_p5;
        end else if ((t_V_load_fu_211_p1 == 3'd6)) begin
            send_word_data_V <= p_Result_7_fu_219_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_V_1_load_A == 1'b1)) begin
        data_out_V_data_V_1_payload_A <= ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_V_1_load_B == 1'b1)) begin
        data_out_V_data_V_1_payload_B <= ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_keep_V_1_load_A == 1'b1)) begin
        data_out_V_keep_V_1_payload_A <= ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_keep_V_1_load_B == 1'b1)) begin
        data_out_V_keep_V_1_payload_B <= ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_A == 1'b1)) begin
        data_out_V_last_V_1_payload_A <= tmp_last_V_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_B == 1'b1)) begin
        data_out_V_last_V_1_payload_B <= tmp_last_V_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond_reg_445 <= or_cond_fu_369_p2;
        tmp_last_V_reg_397 <= data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond_reg_445_pp0_iter1_reg <= or_cond_reg_445;
        tmp_reg_393 <= tmp_nbreadreq_fu_108_p4;
        tmp_reg_393_pp0_iter1_reg <= tmp_reg_393;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TDATA_blk_n = data_in_TVALID;
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_108_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TREADY = 1'b1;
    end else begin
        data_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((or_cond_reg_445_pp0_iter1_reg == 1'd1) & (tmp_reg_393_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_cond_reg_445 == 1'd1) & (tmp_reg_393 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_out_TDATA_blk_n = data_out_V_data_V_1_state[1'd1];
    end else begin
        data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out_V_data_V_1_sel == 1'b1)) begin
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_B;
    end else begin
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op44_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((data_out_V_keep_V_1_sel == 1'b1)) begin
        data_out_V_keep_V_1_data_out = data_out_V_keep_V_1_payload_B;
    end else begin
        data_out_V_keep_V_1_data_out = data_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op44_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((data_out_V_last_V_1_sel == 1'b1)) begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_B;
    end else begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op44_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (data_out_V_keep_V_1_ack_in == 1'b0))) | ((tmp_nbreadreq_fu_108_p4 == 1'd1) & (data_in_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (data_out_V_keep_V_1_ack_in == 1'b0))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_nbreadreq_fu_108_p4 == 1'd1) & (data_in_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (data_out_V_keep_V_1_ack_in == 1'b0))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_nbreadreq_fu_108_p4 == 1'd1) & (data_in_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_108_p4 == 1'd1) & (data_in_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op44_write_state2 == 1'b1) & (data_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op56_write_state3 == 1'b1) & (data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (data_out_V_keep_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_334 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_368 = ((tmp_nbreadreq_fu_108_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139 = 'bx;

always @ (*) begin
    ap_predicate_op44_write_state2 = ((or_cond_reg_445 == 1'd1) & (tmp_reg_393 == 1'd1));
end

always @ (*) begin
    ap_predicate_op56_write_state3 = ((or_cond_reg_445_pp0_iter1_reg == 1'd1) & (tmp_reg_393_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_out_TDATA = data_out_V_data_V_1_data_out;

assign data_out_TKEEP = data_out_V_keep_V_1_data_out;

assign data_out_TLAST = data_out_V_last_V_1_data_out;

assign data_out_TVALID = data_out_V_keep_V_1_state[1'd0];

assign data_out_V_data_V_1_ack_in = data_out_V_data_V_1_state[1'd1];

assign data_out_V_data_V_1_ack_out = data_out_TREADY;

assign data_out_V_data_V_1_load_A = (~data_out_V_data_V_1_sel_wr & data_out_V_data_V_1_state_cmp_full);

assign data_out_V_data_V_1_load_B = (data_out_V_data_V_1_state_cmp_full & data_out_V_data_V_1_sel_wr);

assign data_out_V_data_V_1_sel = data_out_V_data_V_1_sel_rd;

assign data_out_V_data_V_1_state_cmp_full = ((data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_data_V_1_vld_out = data_out_V_data_V_1_state[1'd0];

assign data_out_V_keep_V_1_ack_in = data_out_V_keep_V_1_state[1'd1];

assign data_out_V_keep_V_1_ack_out = data_out_TREADY;

assign data_out_V_keep_V_1_load_A = (~data_out_V_keep_V_1_sel_wr & data_out_V_keep_V_1_state_cmp_full);

assign data_out_V_keep_V_1_load_B = (data_out_V_keep_V_1_state_cmp_full & data_out_V_keep_V_1_sel_wr);

assign data_out_V_keep_V_1_sel = data_out_V_keep_V_1_sel_rd;

assign data_out_V_keep_V_1_state_cmp_full = ((data_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_keep_V_1_vld_out = data_out_V_keep_V_1_state[1'd0];

assign data_out_V_last_V_1_ack_in = data_out_V_last_V_1_state[1'd1];

assign data_out_V_last_V_1_ack_out = data_out_TREADY;

assign data_out_V_last_V_1_load_A = (~data_out_V_last_V_1_sel_wr & data_out_V_last_V_1_state_cmp_full);

assign data_out_V_last_V_1_load_B = (data_out_V_last_V_1_state_cmp_full & data_out_V_last_V_1_sel_wr);

assign data_out_V_last_V_1_sel = data_out_V_last_V_1_sel_rd;

assign data_out_V_last_V_1_state_cmp_full = ((data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_last_V_1_vld_out = data_out_V_last_V_1_state[1'd0];

assign or_cond_fu_369_p2 = (tmp_5_fu_363_p2 | data_in_TLAST);

assign p_Result_1_fu_327_p5 = {{send_word_data_V[63:8]}, {data_in_TDATA}};

assign p_Result_2_fu_309_p5 = {{send_word_data_V[63:16]}, {data_in_TDATA}, {send_word_data_V[7:0]}};

assign p_Result_3_fu_291_p5 = {{send_word_data_V[63:24]}, {data_in_TDATA}, {send_word_data_V[15:0]}};

assign p_Result_4_fu_273_p5 = {{send_word_data_V[63:32]}, {data_in_TDATA}, {send_word_data_V[23:0]}};

assign p_Result_5_fu_255_p5 = {{send_word_data_V[63:40]}, {data_in_TDATA}, {send_word_data_V[31:0]}};

assign p_Result_6_fu_237_p5 = {{send_word_data_V[63:48]}, {data_in_TDATA}, {send_word_data_V[39:0]}};

assign p_Result_7_fu_219_p5 = {{send_word_data_V[63:56]}, {data_in_TDATA}, {send_word_data_V[47:0]}};

assign p_Result_s_fu_345_p5 = {{data_in_TDATA}, {send_word_data_V[55:0]}};

assign t_V_load_fu_211_p1 = counter_V;

assign tmp_5_fu_363_p2 = ((counter_V == 3'd7) ? 1'b1 : 1'b0);

assign tmp_7_fu_375_p2 = (counter_V + 3'd1);

assign tmp_nbreadreq_fu_108_p4 = data_in_TVALID;

endmodule //axis_width_upsizer
