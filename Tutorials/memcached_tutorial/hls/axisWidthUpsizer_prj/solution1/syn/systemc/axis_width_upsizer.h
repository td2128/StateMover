// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axis_width_upsizer_HH_
#define _axis_width_upsizer_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct axis_width_upsizer : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > data_in_TDATA;
    sc_in< sc_logic > data_in_TVALID;
    sc_out< sc_logic > data_in_TREADY;
    sc_in< sc_lv<1> > data_in_TLAST;
    sc_out< sc_lv<64> > data_out_TDATA;
    sc_out< sc_logic > data_out_TVALID;
    sc_in< sc_logic > data_out_TREADY;
    sc_out< sc_lv<1> > data_out_TLAST;
    sc_out< sc_lv<8> > data_out_TKEEP;


    // Module declarations
    axis_width_upsizer(sc_module_name name);
    SC_HAS_PROCESS(axis_width_upsizer);

    ~axis_width_upsizer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<64> > data_out_V_data_V_1_data_out;
    sc_signal< sc_logic > data_out_V_data_V_1_vld_in;
    sc_signal< sc_logic > data_out_V_data_V_1_vld_out;
    sc_signal< sc_logic > data_out_V_data_V_1_ack_in;
    sc_signal< sc_logic > data_out_V_data_V_1_ack_out;
    sc_signal< sc_lv<64> > data_out_V_data_V_1_payload_A;
    sc_signal< sc_lv<64> > data_out_V_data_V_1_payload_B;
    sc_signal< sc_logic > data_out_V_data_V_1_sel_rd;
    sc_signal< sc_logic > data_out_V_data_V_1_sel_wr;
    sc_signal< sc_logic > data_out_V_data_V_1_sel;
    sc_signal< sc_logic > data_out_V_data_V_1_load_A;
    sc_signal< sc_logic > data_out_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_V_data_V_1_state;
    sc_signal< sc_logic > data_out_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > data_out_V_last_V_1_data_out;
    sc_signal< sc_logic > data_out_V_last_V_1_vld_in;
    sc_signal< sc_logic > data_out_V_last_V_1_vld_out;
    sc_signal< sc_logic > data_out_V_last_V_1_ack_in;
    sc_signal< sc_logic > data_out_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > data_out_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > data_out_V_last_V_1_payload_B;
    sc_signal< sc_logic > data_out_V_last_V_1_sel_rd;
    sc_signal< sc_logic > data_out_V_last_V_1_sel_wr;
    sc_signal< sc_logic > data_out_V_last_V_1_sel;
    sc_signal< sc_logic > data_out_V_last_V_1_load_A;
    sc_signal< sc_logic > data_out_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_V_last_V_1_state;
    sc_signal< sc_logic > data_out_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > data_out_V_keep_V_1_data_out;
    sc_signal< sc_logic > data_out_V_keep_V_1_vld_in;
    sc_signal< sc_logic > data_out_V_keep_V_1_vld_out;
    sc_signal< sc_logic > data_out_V_keep_V_1_ack_in;
    sc_signal< sc_logic > data_out_V_keep_V_1_ack_out;
    sc_signal< sc_lv<8> > data_out_V_keep_V_1_payload_A;
    sc_signal< sc_lv<8> > data_out_V_keep_V_1_payload_B;
    sc_signal< sc_logic > data_out_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > data_out_V_keep_V_1_sel_wr;
    sc_signal< sc_logic > data_out_V_keep_V_1_sel;
    sc_signal< sc_logic > data_out_V_keep_V_1_load_A;
    sc_signal< sc_logic > data_out_V_keep_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_V_keep_V_1_state;
    sc_signal< sc_logic > data_out_V_keep_V_1_state_cmp_full;
    sc_signal< sc_lv<3> > counter_V;
    sc_signal< sc_lv<64> > send_word_data_V;
    sc_signal< sc_logic > data_in_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_108_p4;
    sc_signal< sc_logic > data_out_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > tmp_reg_393;
    sc_signal< sc_lv<1> > or_cond_reg_445;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_reg_393_pp0_iter1_reg;
    sc_signal< sc_lv<1> > or_cond_reg_445_pp0_iter1_reg;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_predicate_op44_write_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_predicate_op56_write_state3;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_last_V_reg_397;
    sc_signal< sc_lv<64> > p_Result_7_fu_219_p5;
    sc_signal< sc_lv<3> > t_V_load_fu_211_p1;
    sc_signal< sc_lv<64> > p_Result_6_fu_237_p5;
    sc_signal< sc_lv<64> > p_Result_5_fu_255_p5;
    sc_signal< sc_lv<64> > p_Result_4_fu_273_p5;
    sc_signal< sc_lv<64> > p_Result_3_fu_291_p5;
    sc_signal< sc_lv<64> > p_Result_2_fu_309_p5;
    sc_signal< sc_lv<64> > p_Result_1_fu_327_p5;
    sc_signal< sc_lv<64> > p_Result_s_fu_345_p5;
    sc_signal< sc_lv<1> > or_cond_fu_369_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179;
    sc_signal< sc_lv<3> > tmp_7_fu_375_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_5_fu_363_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_334;
    sc_signal< bool > ap_condition_368;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_3F;
    static const sc_lv<8> ap_const_lv8_1F;
    static const sc_lv<8> ap_const_lv8_F;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<32> ap_const_lv32_3F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_334();
    void thread_ap_condition_368();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179();
    void thread_ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139();
    void thread_ap_predicate_op44_write_state2();
    void thread_ap_predicate_op56_write_state3();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_data_in_TDATA_blk_n();
    void thread_data_in_TREADY();
    void thread_data_out_TDATA();
    void thread_data_out_TDATA_blk_n();
    void thread_data_out_TKEEP();
    void thread_data_out_TLAST();
    void thread_data_out_TVALID();
    void thread_data_out_V_data_V_1_ack_in();
    void thread_data_out_V_data_V_1_ack_out();
    void thread_data_out_V_data_V_1_data_out();
    void thread_data_out_V_data_V_1_load_A();
    void thread_data_out_V_data_V_1_load_B();
    void thread_data_out_V_data_V_1_sel();
    void thread_data_out_V_data_V_1_state_cmp_full();
    void thread_data_out_V_data_V_1_vld_in();
    void thread_data_out_V_data_V_1_vld_out();
    void thread_data_out_V_keep_V_1_ack_in();
    void thread_data_out_V_keep_V_1_ack_out();
    void thread_data_out_V_keep_V_1_data_out();
    void thread_data_out_V_keep_V_1_load_A();
    void thread_data_out_V_keep_V_1_load_B();
    void thread_data_out_V_keep_V_1_sel();
    void thread_data_out_V_keep_V_1_state_cmp_full();
    void thread_data_out_V_keep_V_1_vld_in();
    void thread_data_out_V_keep_V_1_vld_out();
    void thread_data_out_V_last_V_1_ack_in();
    void thread_data_out_V_last_V_1_ack_out();
    void thread_data_out_V_last_V_1_data_out();
    void thread_data_out_V_last_V_1_load_A();
    void thread_data_out_V_last_V_1_load_B();
    void thread_data_out_V_last_V_1_sel();
    void thread_data_out_V_last_V_1_state_cmp_full();
    void thread_data_out_V_last_V_1_vld_in();
    void thread_data_out_V_last_V_1_vld_out();
    void thread_or_cond_fu_369_p2();
    void thread_p_Result_1_fu_327_p5();
    void thread_p_Result_2_fu_309_p5();
    void thread_p_Result_3_fu_291_p5();
    void thread_p_Result_4_fu_273_p5();
    void thread_p_Result_5_fu_255_p5();
    void thread_p_Result_6_fu_237_p5();
    void thread_p_Result_7_fu_219_p5();
    void thread_p_Result_s_fu_345_p5();
    void thread_t_V_load_fu_211_p1();
    void thread_tmp_5_fu_363_p2();
    void thread_tmp_7_fu_375_p2();
    void thread_tmp_nbreadreq_fu_108_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
