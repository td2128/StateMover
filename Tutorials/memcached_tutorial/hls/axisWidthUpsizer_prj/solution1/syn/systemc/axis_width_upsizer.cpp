// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axis_width_upsizer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_width_upsizer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_width_upsizer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> axis_width_upsizer::ap_ST_fsm_pp0_stage0 = "1";
const bool axis_width_upsizer::ap_const_boolean_1 = true;
const sc_lv<1> axis_width_upsizer::ap_const_lv1_0 = "0";
const sc_lv<1> axis_width_upsizer::ap_const_lv1_1 = "1";
const sc_lv<2> axis_width_upsizer::ap_const_lv2_0 = "00";
const sc_lv<2> axis_width_upsizer::ap_const_lv2_2 = "10";
const sc_lv<2> axis_width_upsizer::ap_const_lv2_3 = "11";
const sc_lv<2> axis_width_upsizer::ap_const_lv2_1 = "1";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_0 = "000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axis_width_upsizer::ap_const_boolean_0 = false;
const sc_lv<3> axis_width_upsizer::ap_const_lv3_6 = "110";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_5 = "101";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_4 = "100";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_3 = "11";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_2 = "10";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_1 = "1";
const sc_lv<3> axis_width_upsizer::ap_const_lv3_7 = "111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_FF = "11111111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_7F = "1111111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_3F = "111111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_1F = "11111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_F = "1111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_7 = "111";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_3 = "11";
const sc_lv<8> axis_width_upsizer::ap_const_lv8_1 = "1";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_30 = "110000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_37 = "110111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_28 = "101000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_2F = "101111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_20 = "100000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_27 = "100111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_18 = "11000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_1F = "11111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_10 = "10000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_17 = "10111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_8 = "1000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_F = "1111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_7 = "111";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_38 = "111000";
const sc_lv<32> axis_width_upsizer::ap_const_lv32_3F = "111111";

axis_width_upsizer::axis_width_upsizer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( data_in_TVALID );
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( data_out_V_last_V_1_ack_in );
    sensitive << ( data_out_V_keep_V_1_ack_in );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( data_in_TVALID );
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( data_out_V_last_V_1_ack_in );
    sensitive << ( data_out_V_keep_V_1_ack_in );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( data_in_TVALID );
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( data_out_V_last_V_1_ack_in );
    sensitive << ( data_out_V_keep_V_1_ack_in );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( data_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op56_write_state3 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( data_out_V_data_V_1_ack_in );
    sensitive << ( data_out_V_last_V_1_ack_in );
    sensitive << ( data_out_V_keep_V_1_ack_in );

    SC_METHOD(thread_ap_condition_334);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_368);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139);

    SC_METHOD(thread_ap_predicate_op44_write_state2);
    sensitive << ( tmp_reg_393 );
    sensitive << ( or_cond_reg_445 );

    SC_METHOD(thread_ap_predicate_op56_write_state3);
    sensitive << ( tmp_reg_393_pp0_iter1_reg );
    sensitive << ( or_cond_reg_445_pp0_iter1_reg );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_in_TDATA_blk_n);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );

    SC_METHOD(thread_data_in_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_TDATA);
    sensitive << ( data_out_V_data_V_1_data_out );

    SC_METHOD(thread_data_out_TDATA_blk_n);
    sensitive << ( data_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_393 );
    sensitive << ( or_cond_reg_445 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_393_pp0_iter1_reg );
    sensitive << ( or_cond_reg_445_pp0_iter1_reg );

    SC_METHOD(thread_data_out_TKEEP);
    sensitive << ( data_out_V_keep_V_1_data_out );

    SC_METHOD(thread_data_out_TLAST);
    sensitive << ( data_out_V_last_V_1_data_out );

    SC_METHOD(thread_data_out_TVALID);
    sensitive << ( data_out_V_keep_V_1_state );

    SC_METHOD(thread_data_out_V_data_V_1_ack_in);
    sensitive << ( data_out_V_data_V_1_state );

    SC_METHOD(thread_data_out_V_data_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_V_data_V_1_data_out);
    sensitive << ( data_out_V_data_V_1_payload_A );
    sensitive << ( data_out_V_data_V_1_payload_B );
    sensitive << ( data_out_V_data_V_1_sel );

    SC_METHOD(thread_data_out_V_data_V_1_load_A);
    sensitive << ( data_out_V_data_V_1_sel_wr );
    sensitive << ( data_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_data_V_1_load_B);
    sensitive << ( data_out_V_data_V_1_sel_wr );
    sensitive << ( data_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_data_V_1_sel);
    sensitive << ( data_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_data_out_V_data_V_1_state_cmp_full);
    sensitive << ( data_out_V_data_V_1_state );

    SC_METHOD(thread_data_out_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_V_data_V_1_vld_out);
    sensitive << ( data_out_V_data_V_1_state );

    SC_METHOD(thread_data_out_V_keep_V_1_ack_in);
    sensitive << ( data_out_V_keep_V_1_state );

    SC_METHOD(thread_data_out_V_keep_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_V_keep_V_1_data_out);
    sensitive << ( data_out_V_keep_V_1_payload_A );
    sensitive << ( data_out_V_keep_V_1_payload_B );
    sensitive << ( data_out_V_keep_V_1_sel );

    SC_METHOD(thread_data_out_V_keep_V_1_load_A);
    sensitive << ( data_out_V_keep_V_1_sel_wr );
    sensitive << ( data_out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_keep_V_1_load_B);
    sensitive << ( data_out_V_keep_V_1_sel_wr );
    sensitive << ( data_out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_keep_V_1_sel);
    sensitive << ( data_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_data_out_V_keep_V_1_state_cmp_full);
    sensitive << ( data_out_V_keep_V_1_state );

    SC_METHOD(thread_data_out_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_V_keep_V_1_vld_out);
    sensitive << ( data_out_V_keep_V_1_state );

    SC_METHOD(thread_data_out_V_last_V_1_ack_in);
    sensitive << ( data_out_V_last_V_1_state );

    SC_METHOD(thread_data_out_V_last_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_V_last_V_1_data_out);
    sensitive << ( data_out_V_last_V_1_payload_A );
    sensitive << ( data_out_V_last_V_1_payload_B );
    sensitive << ( data_out_V_last_V_1_sel );

    SC_METHOD(thread_data_out_V_last_V_1_load_A);
    sensitive << ( data_out_V_last_V_1_sel_wr );
    sensitive << ( data_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_last_V_1_load_B);
    sensitive << ( data_out_V_last_V_1_sel_wr );
    sensitive << ( data_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_last_V_1_sel);
    sensitive << ( data_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_data_out_V_last_V_1_state_cmp_full);
    sensitive << ( data_out_V_last_V_1_state );

    SC_METHOD(thread_data_out_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_V_last_V_1_vld_out);
    sensitive << ( data_out_V_last_V_1_state );

    SC_METHOD(thread_or_cond_fu_369_p2);
    sensitive << ( data_in_TLAST );
    sensitive << ( tmp_5_fu_363_p2 );

    SC_METHOD(thread_p_Result_1_fu_327_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_2_fu_309_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_3_fu_291_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_4_fu_273_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_5_fu_255_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_6_fu_237_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_7_fu_219_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_p_Result_s_fu_345_p5);
    sensitive << ( data_in_TDATA );
    sensitive << ( send_word_data_V );

    SC_METHOD(thread_t_V_load_fu_211_p1);
    sensitive << ( counter_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );

    SC_METHOD(thread_tmp_5_fu_363_p2);
    sensitive << ( counter_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_108_p4 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_7_fu_375_p2);
    sensitive << ( counter_V );

    SC_METHOD(thread_tmp_nbreadreq_fu_108_p4);
    sensitive << ( data_in_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    data_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    data_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    data_out_V_data_V_1_state = "00";
    data_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    data_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    data_out_V_last_V_1_state = "00";
    data_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    data_out_V_keep_V_1_sel_wr = SC_LOGIC_0;
    data_out_V_keep_V_1_state = "00";
    counter_V = "000";
    send_word_data_V = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_width_upsizer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, data_in_TDATA, "(port)data_in_TDATA");
    sc_trace(mVcdFile, data_in_TVALID, "(port)data_in_TVALID");
    sc_trace(mVcdFile, data_in_TREADY, "(port)data_in_TREADY");
    sc_trace(mVcdFile, data_in_TLAST, "(port)data_in_TLAST");
    sc_trace(mVcdFile, data_out_TDATA, "(port)data_out_TDATA");
    sc_trace(mVcdFile, data_out_TVALID, "(port)data_out_TVALID");
    sc_trace(mVcdFile, data_out_TREADY, "(port)data_out_TREADY");
    sc_trace(mVcdFile, data_out_TLAST, "(port)data_out_TLAST");
    sc_trace(mVcdFile, data_out_TKEEP, "(port)data_out_TKEEP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, data_out_V_data_V_1_data_out, "data_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, data_out_V_data_V_1_vld_in, "data_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, data_out_V_data_V_1_vld_out, "data_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, data_out_V_data_V_1_ack_in, "data_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, data_out_V_data_V_1_ack_out, "data_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, data_out_V_data_V_1_payload_A, "data_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, data_out_V_data_V_1_payload_B, "data_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, data_out_V_data_V_1_sel_rd, "data_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_V_data_V_1_sel_wr, "data_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_V_data_V_1_sel, "data_out_V_data_V_1_sel");
    sc_trace(mVcdFile, data_out_V_data_V_1_load_A, "data_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, data_out_V_data_V_1_load_B, "data_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, data_out_V_data_V_1_state, "data_out_V_data_V_1_state");
    sc_trace(mVcdFile, data_out_V_data_V_1_state_cmp_full, "data_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_out_V_last_V_1_data_out, "data_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, data_out_V_last_V_1_vld_in, "data_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, data_out_V_last_V_1_vld_out, "data_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, data_out_V_last_V_1_ack_in, "data_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, data_out_V_last_V_1_ack_out, "data_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, data_out_V_last_V_1_payload_A, "data_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, data_out_V_last_V_1_payload_B, "data_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, data_out_V_last_V_1_sel_rd, "data_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_V_last_V_1_sel_wr, "data_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_V_last_V_1_sel, "data_out_V_last_V_1_sel");
    sc_trace(mVcdFile, data_out_V_last_V_1_load_A, "data_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, data_out_V_last_V_1_load_B, "data_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, data_out_V_last_V_1_state, "data_out_V_last_V_1_state");
    sc_trace(mVcdFile, data_out_V_last_V_1_state_cmp_full, "data_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_out_V_keep_V_1_data_out, "data_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, data_out_V_keep_V_1_vld_in, "data_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, data_out_V_keep_V_1_vld_out, "data_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, data_out_V_keep_V_1_ack_in, "data_out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, data_out_V_keep_V_1_ack_out, "data_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, data_out_V_keep_V_1_payload_A, "data_out_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, data_out_V_keep_V_1_payload_B, "data_out_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, data_out_V_keep_V_1_sel_rd, "data_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_V_keep_V_1_sel_wr, "data_out_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_V_keep_V_1_sel, "data_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, data_out_V_keep_V_1_load_A, "data_out_V_keep_V_1_load_A");
    sc_trace(mVcdFile, data_out_V_keep_V_1_load_B, "data_out_V_keep_V_1_load_B");
    sc_trace(mVcdFile, data_out_V_keep_V_1_state, "data_out_V_keep_V_1_state");
    sc_trace(mVcdFile, data_out_V_keep_V_1_state_cmp_full, "data_out_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, counter_V, "counter_V");
    sc_trace(mVcdFile, send_word_data_V, "send_word_data_V");
    sc_trace(mVcdFile, data_in_TDATA_blk_n, "data_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_108_p4, "tmp_nbreadreq_fu_108_p4");
    sc_trace(mVcdFile, data_out_TDATA_blk_n, "data_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_reg_393, "tmp_reg_393");
    sc_trace(mVcdFile, or_cond_reg_445, "or_cond_reg_445");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_reg_393_pp0_iter1_reg, "tmp_reg_393_pp0_iter1_reg");
    sc_trace(mVcdFile, or_cond_reg_445_pp0_iter1_reg, "or_cond_reg_445_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_predicate_op44_write_state2, "ap_predicate_op44_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_predicate_op56_write_state3, "ap_predicate_op56_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_last_V_reg_397, "tmp_last_V_reg_397");
    sc_trace(mVcdFile, p_Result_7_fu_219_p5, "p_Result_7_fu_219_p5");
    sc_trace(mVcdFile, t_V_load_fu_211_p1, "t_V_load_fu_211_p1");
    sc_trace(mVcdFile, p_Result_6_fu_237_p5, "p_Result_6_fu_237_p5");
    sc_trace(mVcdFile, p_Result_5_fu_255_p5, "p_Result_5_fu_255_p5");
    sc_trace(mVcdFile, p_Result_4_fu_273_p5, "p_Result_4_fu_273_p5");
    sc_trace(mVcdFile, p_Result_3_fu_291_p5, "p_Result_3_fu_291_p5");
    sc_trace(mVcdFile, p_Result_2_fu_309_p5, "p_Result_2_fu_309_p5");
    sc_trace(mVcdFile, p_Result_1_fu_327_p5, "p_Result_1_fu_327_p5");
    sc_trace(mVcdFile, p_Result_s_fu_345_p5, "p_Result_s_fu_345_p5");
    sc_trace(mVcdFile, or_cond_fu_369_p2, "or_cond_fu_369_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139, "ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139, "ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179, "ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179, "ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179");
    sc_trace(mVcdFile, tmp_7_fu_375_p2, "tmp_7_fu_375_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_5_fu_363_p2, "tmp_5_fu_363_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_334, "ap_condition_334");
    sc_trace(mVcdFile, ap_condition_368, "ap_condition_368");
#endif

    }
    mHdltvinHandle.open("axis_width_upsizer.hdltvin.dat");
    mHdltvoutHandle.open("axis_width_upsizer.hdltvout.dat");
}

axis_width_upsizer::~axis_width_upsizer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void axis_width_upsizer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_334.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
             esl_seteq<1,3,3>(ap_const_lv3_0, t_V_load_fu_211_p1.read()))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_1_fu_327_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_1))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_2_fu_309_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_2))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_3_fu_291_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_3))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_4_fu_273_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_4))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_5_fu_255_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_5))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_6_fu_237_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_6))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_7_fu_219_p5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_7))) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = p_Result_s_fu_345_p5.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179 = ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_334.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
             esl_seteq<1,3,3>(ap_const_lv3_0, t_V_load_fu_211_p1.read()))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_1;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_1))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_3;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_2))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_7;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_3))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_F;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_4))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_1F;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_5))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_3F;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_6))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_7F;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
                    esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_7))) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_const_lv8_FF;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139 = ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_368.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_369_p2.read())) {
            counter_V = ap_const_lv3_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_369_p2.read())) {
            counter_V = tmp_7_fu_375_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_vld_out.read()))) {
            data_out_V_data_V_1_sel_rd =  (sc_logic) (~data_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_ack_in.read()))) {
            data_out_V_data_V_1_sel_wr =  (sc_logic) (~data_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            data_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            data_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(data_out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_ack_out.read()))))) {
            data_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            data_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_vld_out.read()))) {
            data_out_V_keep_V_1_sel_rd =  (sc_logic) (~data_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_ack_in.read()))) {
            data_out_V_keep_V_1_sel_wr =  (sc_logic) (~data_out_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_keep_V_1_state.read())))) {
            data_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_keep_V_1_state.read())))) {
            data_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_ack_out.read()))))) {
            data_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            data_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_vld_out.read()))) {
            data_out_V_last_V_1_sel_rd =  (sc_logic) (~data_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_ack_in.read()))) {
            data_out_V_last_V_1_sel_wr =  (sc_logic) (~data_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_last_V_1_state.read())))) {
            data_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_last_V_1_state.read())))) {
            data_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_ack_out.read()))))) {
            data_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            data_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_368.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_7)) {
            send_word_data_V = p_Result_s_fu_345_p5.read();
        } else if (esl_seteq<1,3,3>(ap_const_lv3_0, t_V_load_fu_211_p1.read())) {
            send_word_data_V = p_Result_1_fu_327_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_1)) {
            send_word_data_V = p_Result_2_fu_309_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_2)) {
            send_word_data_V = p_Result_3_fu_291_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_3)) {
            send_word_data_V = p_Result_4_fu_273_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_4)) {
            send_word_data_V = p_Result_5_fu_255_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_5)) {
            send_word_data_V = p_Result_6_fu_237_p5.read();
        } else if (esl_seteq<1,3,3>(t_V_load_fu_211_p1.read(), ap_const_lv3_6)) {
            send_word_data_V = p_Result_7_fu_219_p5.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_load_A.read())) {
        data_out_V_data_V_1_payload_A = ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_load_B.read())) {
        data_out_V_data_V_1_payload_B = ap_phi_reg_pp0_iter1_tmp_data_V_1_reg_179.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_load_A.read())) {
        data_out_V_keep_V_1_payload_A = ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_load_B.read())) {
        data_out_V_keep_V_1_payload_B = ap_phi_reg_pp0_iter1_tmp_keep_V_reg_139.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_load_A.read())) {
        data_out_V_last_V_1_payload_A = tmp_last_V_reg_397.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_load_B.read())) {
        data_out_V_last_V_1_payload_B = tmp_last_V_reg_397.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        or_cond_reg_445 = or_cond_fu_369_p2.read();
        tmp_last_V_reg_397 = data_in_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        or_cond_reg_445_pp0_iter1_reg = or_cond_reg_445.read();
        tmp_reg_393 = tmp_nbreadreq_fu_108_p4.read();
        tmp_reg_393_pp0_iter1_reg = tmp_reg_393.read();
    }
}

void axis_width_upsizer::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void axis_width_upsizer::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_width_upsizer::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_in.read()))));
}

void axis_width_upsizer::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void axis_width_upsizer::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void axis_width_upsizer::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()));
}

void axis_width_upsizer::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()));
}

void axis_width_upsizer::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_width_upsizer::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op56_write_state3.read()));
}

void axis_width_upsizer::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_keep_V_1_ack_in.read()));
}

void axis_width_upsizer::thread_ap_condition_334() {
    ap_condition_334 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void axis_width_upsizer::thread_ap_condition_368() {
    ap_condition_368 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void axis_width_upsizer::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void axis_width_upsizer::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179() {
    ap_phi_reg_pp0_iter0_tmp_data_V_1_reg_179 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
}

void axis_width_upsizer::thread_ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139() {
    ap_phi_reg_pp0_iter0_tmp_keep_V_reg_139 =  (sc_lv<8>) ("XXXXXXXX");
}

void axis_width_upsizer::thread_ap_predicate_op44_write_state2() {
    ap_predicate_op44_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_393.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_445.read()));
}

void axis_width_upsizer::thread_ap_predicate_op56_write_state3() {
    ap_predicate_op56_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_393_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_445_pp0_iter1_reg.read()));
}

void axis_width_upsizer::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_width_upsizer::thread_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()))) {
        data_in_TDATA_blk_n = data_in_TVALID.read();
    } else {
        data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_width_upsizer::thread_data_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_108_p4.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_in_TREADY = ap_const_logic_1;
    } else {
        data_in_TREADY = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_data_out_TDATA() {
    data_out_TDATA = data_out_V_data_V_1_data_out.read();
}

void axis_width_upsizer::thread_data_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_393.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_445.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_393_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_445_pp0_iter1_reg.read())))) {
        data_out_TDATA_blk_n = data_out_V_data_V_1_state.read()[1];
    } else {
        data_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_width_upsizer::thread_data_out_TKEEP() {
    data_out_TKEEP = data_out_V_keep_V_1_data_out.read();
}

void axis_width_upsizer::thread_data_out_TLAST() {
    data_out_TLAST = data_out_V_last_V_1_data_out.read();
}

void axis_width_upsizer::thread_data_out_TVALID() {
    data_out_TVALID = data_out_V_keep_V_1_state.read()[0];
}

void axis_width_upsizer::thread_data_out_V_data_V_1_ack_in() {
    data_out_V_data_V_1_ack_in = data_out_V_data_V_1_state.read()[1];
}

void axis_width_upsizer::thread_data_out_V_data_V_1_ack_out() {
    data_out_V_data_V_1_ack_out = data_out_TREADY.read();
}

void axis_width_upsizer::thread_data_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_data_V_1_sel.read())) {
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_B.read();
    } else {
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_A.read();
    }
}

void axis_width_upsizer::thread_data_out_V_data_V_1_load_A() {
    data_out_V_data_V_1_load_A = (data_out_V_data_V_1_state_cmp_full.read() & ~data_out_V_data_V_1_sel_wr.read());
}

void axis_width_upsizer::thread_data_out_V_data_V_1_load_B() {
    data_out_V_data_V_1_load_B = (data_out_V_data_V_1_sel_wr.read() & data_out_V_data_V_1_state_cmp_full.read());
}

void axis_width_upsizer::thread_data_out_V_data_V_1_sel() {
    data_out_V_data_V_1_sel = data_out_V_data_V_1_sel_rd.read();
}

void axis_width_upsizer::thread_data_out_V_data_V_1_state_cmp_full() {
    data_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!data_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_width_upsizer::thread_data_out_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_data_out_V_data_V_1_vld_out() {
    data_out_V_data_V_1_vld_out = data_out_V_data_V_1_state.read()[0];
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_ack_in() {
    data_out_V_keep_V_1_ack_in = data_out_V_keep_V_1_state.read()[1];
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_ack_out() {
    data_out_V_keep_V_1_ack_out = data_out_TREADY.read();
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_keep_V_1_sel.read())) {
        data_out_V_keep_V_1_data_out = data_out_V_keep_V_1_payload_B.read();
    } else {
        data_out_V_keep_V_1_data_out = data_out_V_keep_V_1_payload_A.read();
    }
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_load_A() {
    data_out_V_keep_V_1_load_A = (data_out_V_keep_V_1_state_cmp_full.read() & ~data_out_V_keep_V_1_sel_wr.read());
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_load_B() {
    data_out_V_keep_V_1_load_B = (data_out_V_keep_V_1_sel_wr.read() & data_out_V_keep_V_1_state_cmp_full.read());
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_sel() {
    data_out_V_keep_V_1_sel = data_out_V_keep_V_1_sel_rd.read();
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_state_cmp_full() {
    data_out_V_keep_V_1_state_cmp_full =  (sc_logic) ((!data_out_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_data_out_V_keep_V_1_vld_out() {
    data_out_V_keep_V_1_vld_out = data_out_V_keep_V_1_state.read()[0];
}

void axis_width_upsizer::thread_data_out_V_last_V_1_ack_in() {
    data_out_V_last_V_1_ack_in = data_out_V_last_V_1_state.read()[1];
}

void axis_width_upsizer::thread_data_out_V_last_V_1_ack_out() {
    data_out_V_last_V_1_ack_out = data_out_TREADY.read();
}

void axis_width_upsizer::thread_data_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_last_V_1_sel.read())) {
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_B.read();
    } else {
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_A.read();
    }
}

void axis_width_upsizer::thread_data_out_V_last_V_1_load_A() {
    data_out_V_last_V_1_load_A = (data_out_V_last_V_1_state_cmp_full.read() & ~data_out_V_last_V_1_sel_wr.read());
}

void axis_width_upsizer::thread_data_out_V_last_V_1_load_B() {
    data_out_V_last_V_1_load_B = (data_out_V_last_V_1_sel_wr.read() & data_out_V_last_V_1_state_cmp_full.read());
}

void axis_width_upsizer::thread_data_out_V_last_V_1_sel() {
    data_out_V_last_V_1_sel = data_out_V_last_V_1_sel_rd.read();
}

void axis_width_upsizer::thread_data_out_V_last_V_1_state_cmp_full() {
    data_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!data_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_width_upsizer::thread_data_out_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_width_upsizer::thread_data_out_V_last_V_1_vld_out() {
    data_out_V_last_V_1_vld_out = data_out_V_last_V_1_state.read()[0];
}

void axis_width_upsizer::thread_or_cond_fu_369_p2() {
    or_cond_fu_369_p2 = (data_in_TLAST.read() | tmp_5_fu_363_p2.read());
}

void axis_width_upsizer::thread_p_Result_1_fu_327_p5() {
    p_Result_1_fu_327_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_0, ap_const_lv32_7);
}

void axis_width_upsizer::thread_p_Result_2_fu_309_p5() {
    p_Result_2_fu_309_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_8, ap_const_lv32_F);
}

void axis_width_upsizer::thread_p_Result_3_fu_291_p5() {
    p_Result_3_fu_291_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_10, ap_const_lv32_17);
}

void axis_width_upsizer::thread_p_Result_4_fu_273_p5() {
    p_Result_4_fu_273_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_18, ap_const_lv32_1F);
}

void axis_width_upsizer::thread_p_Result_5_fu_255_p5() {
    p_Result_5_fu_255_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_20, ap_const_lv32_27);
}

void axis_width_upsizer::thread_p_Result_6_fu_237_p5() {
    p_Result_6_fu_237_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_28, ap_const_lv32_2F);
}

void axis_width_upsizer::thread_p_Result_7_fu_219_p5() {
    p_Result_7_fu_219_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_30, ap_const_lv32_37);
}

void axis_width_upsizer::thread_p_Result_s_fu_345_p5() {
    p_Result_s_fu_345_p5 = esl_partset<64,64,8,32,32>(send_word_data_V.read(), data_in_TDATA.read(), ap_const_lv32_38, ap_const_lv32_3F);
}

void axis_width_upsizer::thread_t_V_load_fu_211_p1() {
    t_V_load_fu_211_p1 = counter_V.read();
}

void axis_width_upsizer::thread_tmp_5_fu_363_p2() {
    tmp_5_fu_363_p2 = (!counter_V.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(counter_V.read() == ap_const_lv3_7);
}

void axis_width_upsizer::thread_tmp_7_fu_375_p2() {
    tmp_7_fu_375_p2 = (!counter_V.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(counter_V.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void axis_width_upsizer::thread_tmp_nbreadreq_fu_108_p4() {
    tmp_nbreadreq_fu_108_p4 =  (sc_lv<1>) ((data_in_TVALID.read()));
}

void axis_width_upsizer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void axis_width_upsizer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TDATA\" :  \"" << data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TVALID\" :  \"" << data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_in_TREADY\" :  \"" << data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TLAST\" :  \"" << data_in_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TDATA\" :  \"" << data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TVALID\" :  \"" << data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_TREADY\" :  \"" << data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TLAST\" :  \"" << data_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TKEEP\" :  \"" << data_out_TKEEP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

