// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flashCmdAggregator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flashCmdAggregator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flashCmdAggregator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> flashCmdAggregator::ap_ST_fsm_state1 = "1";
const sc_lv<32> flashCmdAggregator::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool flashCmdAggregator::ap_const_boolean_1 = true;
const sc_lv<1> flashCmdAggregator::ap_const_lv1_1 = "1";
const sc_lv<1> flashCmdAggregator::ap_const_lv1_0 = "0";

flashCmdAggregator::flashCmdAggregator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_ap_condition_69);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op12_write_state1);
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( tmp_4_nbreadreq_fu_44_p3 );

    SC_METHOD(thread_ap_predicate_op9_read_state1);
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( tmp_4_nbreadreq_fu_44_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_flashAggregateMemCmd_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( tmp_4_nbreadreq_fu_44_p3 );

    SC_METHOD(thread_flashAggregateMemCmd_1_din);
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op12_write_state1 );
    sensitive << ( tmp_3_fu_75_p3 );
    sensitive << ( tmp_1_fu_88_p3 );
    sensitive << ( ap_condition_69 );

    SC_METHOD(thread_flashAggregateMemCmd_1_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_rdCmdIn_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );

    SC_METHOD(thread_rdCmdIn_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_tmp19_fu_84_p1);
    sensitive << ( rdCmdIn_V_TDATA );

    SC_METHOD(thread_tmp_1_fu_88_p3);
    sensitive << ( tmp19_fu_84_p1 );

    SC_METHOD(thread_tmp_2_fu_71_p1);
    sensitive << ( wrCmdIn_V_TDATA );

    SC_METHOD(thread_tmp_3_fu_75_p3);
    sensitive << ( tmp_2_fu_71_p1 );

    SC_METHOD(thread_tmp_4_nbreadreq_fu_44_p3);
    sensitive << ( wrCmdIn_V_TVALID );

    SC_METHOD(thread_tmp_nbreadreq_fu_36_p3);
    sensitive << ( rdCmdIn_V_TVALID );

    SC_METHOD(thread_wrCmdIn_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( tmp_4_nbreadreq_fu_44_p3 );

    SC_METHOD(thread_wrCmdIn_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rdCmdIn_V_TVALID );
    sensitive << ( wrCmdIn_V_TVALID );
    sensitive << ( flashAggregateMemCmd_1_full_n );
    sensitive << ( tmp_nbreadreq_fu_36_p3 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op12_write_state1 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flashCmdAggregator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rdCmdIn_V_TDATA, "(port)rdCmdIn_V_TDATA");
    sc_trace(mVcdFile, rdCmdIn_V_TVALID, "(port)rdCmdIn_V_TVALID");
    sc_trace(mVcdFile, rdCmdIn_V_TREADY, "(port)rdCmdIn_V_TREADY");
    sc_trace(mVcdFile, wrCmdIn_V_TDATA, "(port)wrCmdIn_V_TDATA");
    sc_trace(mVcdFile, wrCmdIn_V_TVALID, "(port)wrCmdIn_V_TVALID");
    sc_trace(mVcdFile, wrCmdIn_V_TREADY, "(port)wrCmdIn_V_TREADY");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_din, "(port)flashAggregateMemCmd_1_din");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_full_n, "(port)flashAggregateMemCmd_1_full_n");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_write, "(port)flashAggregateMemCmd_1_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, rdCmdIn_V_TDATA_blk_n, "rdCmdIn_V_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_36_p3, "tmp_nbreadreq_fu_36_p3");
    sc_trace(mVcdFile, wrCmdIn_V_TDATA_blk_n, "wrCmdIn_V_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_4_nbreadreq_fu_44_p3, "tmp_4_nbreadreq_fu_44_p3");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_blk_n, "flashAggregateMemCmd_1_blk_n");
    sc_trace(mVcdFile, ap_predicate_op9_read_state1, "ap_predicate_op9_read_state1");
    sc_trace(mVcdFile, ap_predicate_op12_write_state1, "ap_predicate_op12_write_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_3_fu_75_p3, "tmp_3_fu_75_p3");
    sc_trace(mVcdFile, tmp_1_fu_88_p3, "tmp_1_fu_88_p3");
    sc_trace(mVcdFile, tmp_2_fu_71_p1, "tmp_2_fu_71_p1");
    sc_trace(mVcdFile, tmp19_fu_84_p1, "tmp19_fu_84_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_69, "ap_condition_69");
#endif

    }
}

flashCmdAggregator::~flashCmdAggregator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void flashCmdAggregator::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
}

void flashCmdAggregator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flashCmdAggregator::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read())));
}

void flashCmdAggregator::thread_ap_condition_69() {
    ap_condition_69 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))));
}

void flashCmdAggregator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void flashCmdAggregator::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flashCmdAggregator::thread_ap_predicate_op12_write_state1() {
    ap_predicate_op12_write_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_nbreadreq_fu_44_p3.read()));
}

void flashCmdAggregator::thread_ap_predicate_op9_read_state1() {
    ap_predicate_op9_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_nbreadreq_fu_44_p3.read()));
}

void flashCmdAggregator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flashCmdAggregator::thread_flashAggregateMemCmd_1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_nbreadreq_fu_44_p3.read())))) {
        flashAggregateMemCmd_1_blk_n = flashAggregateMemCmd_1_full_n.read();
    } else {
        flashAggregateMemCmd_1_blk_n = ap_const_logic_1;
    }
}

void flashCmdAggregator::thread_flashAggregateMemCmd_1_din() {
    if (esl_seteq<1,1,1>(ap_condition_69.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1)) {
            flashAggregateMemCmd_1_din = tmp_1_fu_88_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) {
            flashAggregateMemCmd_1_din = tmp_3_fu_75_p3.read();
        } else {
            flashAggregateMemCmd_1_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        flashAggregateMemCmd_1_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void flashCmdAggregator::thread_flashAggregateMemCmd_1_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read())))))) {
        flashAggregateMemCmd_1_write = ap_const_logic_1;
    } else {
        flashAggregateMemCmd_1_write = ap_const_logic_0;
    }
}

void flashCmdAggregator::thread_rdCmdIn_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1))) {
        rdCmdIn_V_TDATA_blk_n = rdCmdIn_V_TVALID.read();
    } else {
        rdCmdIn_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void flashCmdAggregator::thread_rdCmdIn_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))))) {
        rdCmdIn_V_TREADY = ap_const_logic_1;
    } else {
        rdCmdIn_V_TREADY = ap_const_logic_0;
    }
}

void flashCmdAggregator::thread_tmp19_fu_84_p1() {
    tmp19_fu_84_p1 = rdCmdIn_V_TDATA.read().range(45-1, 0);
}

void flashCmdAggregator::thread_tmp_1_fu_88_p3() {
    tmp_1_fu_88_p3 = esl_concat<1,45>(ap_const_lv1_0, tmp19_fu_84_p1.read());
}

void flashCmdAggregator::thread_tmp_2_fu_71_p1() {
    tmp_2_fu_71_p1 = wrCmdIn_V_TDATA.read().range(45-1, 0);
}

void flashCmdAggregator::thread_tmp_3_fu_75_p3() {
    tmp_3_fu_75_p3 = esl_concat<1,45>(ap_const_lv1_1, tmp_2_fu_71_p1.read());
}

void flashCmdAggregator::thread_tmp_4_nbreadreq_fu_44_p3() {
    tmp_4_nbreadreq_fu_44_p3 =  (sc_lv<1>) (wrCmdIn_V_TVALID.read());
}

void flashCmdAggregator::thread_tmp_nbreadreq_fu_36_p3() {
    tmp_nbreadreq_fu_36_p3 =  (sc_lv<1>) (rdCmdIn_V_TVALID.read());
}

void flashCmdAggregator::thread_wrCmdIn_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_nbreadreq_fu_44_p3.read()))) {
        wrCmdIn_V_TDATA_blk_n = wrCmdIn_V_TVALID.read();
    } else {
        wrCmdIn_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void flashCmdAggregator::thread_wrCmdIn_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_0, wrCmdIn_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_write_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rdCmdIn_V_TVALID.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_36_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, flashAggregateMemCmd_1_full_n.read()))))) {
        wrCmdIn_V_TREADY = ap_const_logic_1;
    } else {
        wrCmdIn_V_TREADY = ap_const_logic_0;
    }
}

void flashCmdAggregator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

