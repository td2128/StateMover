// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flashModel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<64> flashModel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_logic flashModel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flashModel::ap_const_logic_0 = sc_dt::Log_0;

flashModel::flashModel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    flashCmdAggregator_U0 = new flashCmdAggregator("flashCmdAggregator_U0");
    flashCmdAggregator_U0->ap_clk(ap_clk);
    flashCmdAggregator_U0->ap_rst(ap_rst_n_inv);
    flashCmdAggregator_U0->ap_start(flashCmdAggregator_U0_ap_start);
    flashCmdAggregator_U0->ap_done(flashCmdAggregator_U0_ap_done);
    flashCmdAggregator_U0->ap_continue(flashCmdAggregator_U0_ap_continue);
    flashCmdAggregator_U0->ap_idle(flashCmdAggregator_U0_ap_idle);
    flashCmdAggregator_U0->ap_ready(flashCmdAggregator_U0_ap_ready);
    flashCmdAggregator_U0->rdCmdIn_V_TDATA(rdCmdIn_V_TDATA);
    flashCmdAggregator_U0->rdCmdIn_V_TVALID(rdCmdIn_V_TVALID);
    flashCmdAggregator_U0->rdCmdIn_V_TREADY(flashCmdAggregator_U0_rdCmdIn_V_TREADY);
    flashCmdAggregator_U0->wrCmdIn_V_TDATA(wrCmdIn_V_TDATA);
    flashCmdAggregator_U0->wrCmdIn_V_TVALID(wrCmdIn_V_TVALID);
    flashCmdAggregator_U0->wrCmdIn_V_TREADY(flashCmdAggregator_U0_wrCmdIn_V_TREADY);
    flashCmdAggregator_U0->flashAggregateMemCmd_1_din(flashCmdAggregator_U0_flashAggregateMemCmd_1_din);
    flashCmdAggregator_U0->flashAggregateMemCmd_1_full_n(flashAggregateMemCmd_1_full_n);
    flashCmdAggregator_U0->flashAggregateMemCmd_1_write(flashCmdAggregator_U0_flashAggregateMemCmd_1_write);
    flashMemAccess_U0 = new flashMemAccess("flashMemAccess_U0");
    flashMemAccess_U0->ap_clk(ap_clk);
    flashMemAccess_U0->ap_rst(ap_rst_n_inv);
    flashMemAccess_U0->ap_start(flashMemAccess_U0_ap_start);
    flashMemAccess_U0->ap_done(flashMemAccess_U0_ap_done);
    flashMemAccess_U0->ap_continue(flashMemAccess_U0_ap_continue);
    flashMemAccess_U0->ap_idle(flashMemAccess_U0_ap_idle);
    flashMemAccess_U0->ap_ready(flashMemAccess_U0_ap_ready);
    flashMemAccess_U0->flashAggregateMemCmd_1_dout(flashAggregateMemCmd_1_dout);
    flashMemAccess_U0->flashAggregateMemCmd_1_empty_n(flashAggregateMemCmd_1_empty_n);
    flashMemAccess_U0->flashAggregateMemCmd_1_read(flashMemAccess_U0_flashAggregateMemCmd_1_read);
    flashMemAccess_U0->wrDataIn_V_V_TVALID(wrDataIn_V_V_TVALID);
    flashMemAccess_U0->rdDataOut_V_V_TREADY(rdDataOut_V_V_TREADY);
    flashMemAccess_U0->rdDataOut_V_V_TDATA(flashMemAccess_U0_rdDataOut_V_V_TDATA);
    flashMemAccess_U0->rdDataOut_V_V_TVALID(flashMemAccess_U0_rdDataOut_V_V_TVALID);
    flashMemAccess_U0->wrDataIn_V_V_TDATA(wrDataIn_V_V_TDATA);
    flashMemAccess_U0->wrDataIn_V_V_TREADY(flashMemAccess_U0_wrDataIn_V_V_TREADY);
    flashAggregateMemCmd_1_U = new fifo_w46_d16_A("flashAggregateMemCmd_1_U");
    flashAggregateMemCmd_1_U->clk(ap_clk);
    flashAggregateMemCmd_1_U->reset(ap_rst_n_inv);
    flashAggregateMemCmd_1_U->if_read_ce(ap_var_for_const0);
    flashAggregateMemCmd_1_U->if_write_ce(ap_var_for_const0);
    flashAggregateMemCmd_1_U->if_din(flashCmdAggregator_U0_flashAggregateMemCmd_1_din);
    flashAggregateMemCmd_1_U->if_full_n(flashAggregateMemCmd_1_full_n);
    flashAggregateMemCmd_1_U->if_write(flashCmdAggregator_U0_flashAggregateMemCmd_1_write);
    flashAggregateMemCmd_1_U->if_dout(flashAggregateMemCmd_1_dout);
    flashAggregateMemCmd_1_U->if_empty_n(flashAggregateMemCmd_1_empty_n);
    flashAggregateMemCmd_1_U->if_read(flashMemAccess_U0_flashAggregateMemCmd_1_read);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_flashCmdAggregator_U0_ap_continue);

    SC_METHOD(thread_flashCmdAggregator_U0_ap_start);

    SC_METHOD(thread_flashCmdAggregator_U0_start_full_n);

    SC_METHOD(thread_flashCmdAggregator_U0_start_write);

    SC_METHOD(thread_flashMemAccess_U0_ap_continue);

    SC_METHOD(thread_flashMemAccess_U0_ap_start);

    SC_METHOD(thread_flashMemAccess_U0_start_full_n);

    SC_METHOD(thread_flashMemAccess_U0_start_write);

    SC_METHOD(thread_rdCmdIn_V_TREADY);
    sensitive << ( flashCmdAggregator_U0_rdCmdIn_V_TREADY );

    SC_METHOD(thread_rdDataOut_V_V_TDATA);
    sensitive << ( flashMemAccess_U0_rdDataOut_V_V_TDATA );

    SC_METHOD(thread_rdDataOut_V_V_TVALID);
    sensitive << ( flashMemAccess_U0_rdDataOut_V_V_TVALID );

    SC_METHOD(thread_wrCmdIn_V_TREADY);
    sensitive << ( flashCmdAggregator_U0_wrCmdIn_V_TREADY );

    SC_METHOD(thread_wrDataIn_V_V_TREADY);
    sensitive << ( flashMemAccess_U0_wrDataIn_V_V_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flashModel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, rdCmdIn_V_TDATA, "(port)rdCmdIn_V_TDATA");
    sc_trace(mVcdFile, rdDataOut_V_V_TDATA, "(port)rdDataOut_V_V_TDATA");
    sc_trace(mVcdFile, wrCmdIn_V_TDATA, "(port)wrCmdIn_V_TDATA");
    sc_trace(mVcdFile, wrDataIn_V_V_TDATA, "(port)wrDataIn_V_V_TDATA");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, rdCmdIn_V_TVALID, "(port)rdCmdIn_V_TVALID");
    sc_trace(mVcdFile, rdCmdIn_V_TREADY, "(port)rdCmdIn_V_TREADY");
    sc_trace(mVcdFile, wrCmdIn_V_TVALID, "(port)wrCmdIn_V_TVALID");
    sc_trace(mVcdFile, wrCmdIn_V_TREADY, "(port)wrCmdIn_V_TREADY");
    sc_trace(mVcdFile, rdDataOut_V_V_TVALID, "(port)rdDataOut_V_V_TVALID");
    sc_trace(mVcdFile, rdDataOut_V_V_TREADY, "(port)rdDataOut_V_V_TREADY");
    sc_trace(mVcdFile, wrDataIn_V_V_TVALID, "(port)wrDataIn_V_V_TVALID");
    sc_trace(mVcdFile, wrDataIn_V_V_TREADY, "(port)wrDataIn_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, flashCmdAggregator_U0_ap_start, "flashCmdAggregator_U0_ap_start");
    sc_trace(mVcdFile, flashCmdAggregator_U0_ap_done, "flashCmdAggregator_U0_ap_done");
    sc_trace(mVcdFile, flashCmdAggregator_U0_ap_continue, "flashCmdAggregator_U0_ap_continue");
    sc_trace(mVcdFile, flashCmdAggregator_U0_ap_idle, "flashCmdAggregator_U0_ap_idle");
    sc_trace(mVcdFile, flashCmdAggregator_U0_ap_ready, "flashCmdAggregator_U0_ap_ready");
    sc_trace(mVcdFile, flashCmdAggregator_U0_rdCmdIn_V_TREADY, "flashCmdAggregator_U0_rdCmdIn_V_TREADY");
    sc_trace(mVcdFile, flashCmdAggregator_U0_wrCmdIn_V_TREADY, "flashCmdAggregator_U0_wrCmdIn_V_TREADY");
    sc_trace(mVcdFile, flashCmdAggregator_U0_flashAggregateMemCmd_1_din, "flashCmdAggregator_U0_flashAggregateMemCmd_1_din");
    sc_trace(mVcdFile, flashCmdAggregator_U0_flashAggregateMemCmd_1_write, "flashCmdAggregator_U0_flashAggregateMemCmd_1_write");
    sc_trace(mVcdFile, flashMemAccess_U0_ap_start, "flashMemAccess_U0_ap_start");
    sc_trace(mVcdFile, flashMemAccess_U0_ap_done, "flashMemAccess_U0_ap_done");
    sc_trace(mVcdFile, flashMemAccess_U0_ap_continue, "flashMemAccess_U0_ap_continue");
    sc_trace(mVcdFile, flashMemAccess_U0_ap_idle, "flashMemAccess_U0_ap_idle");
    sc_trace(mVcdFile, flashMemAccess_U0_ap_ready, "flashMemAccess_U0_ap_ready");
    sc_trace(mVcdFile, flashMemAccess_U0_flashAggregateMemCmd_1_read, "flashMemAccess_U0_flashAggregateMemCmd_1_read");
    sc_trace(mVcdFile, flashMemAccess_U0_rdDataOut_V_V_TDATA, "flashMemAccess_U0_rdDataOut_V_V_TDATA");
    sc_trace(mVcdFile, flashMemAccess_U0_rdDataOut_V_V_TVALID, "flashMemAccess_U0_rdDataOut_V_V_TVALID");
    sc_trace(mVcdFile, flashMemAccess_U0_wrDataIn_V_V_TREADY, "flashMemAccess_U0_wrDataIn_V_V_TREADY");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_full_n, "flashAggregateMemCmd_1_full_n");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_dout, "flashAggregateMemCmd_1_dout");
    sc_trace(mVcdFile, flashAggregateMemCmd_1_empty_n, "flashAggregateMemCmd_1_empty_n");
    sc_trace(mVcdFile, flashCmdAggregator_U0_start_full_n, "flashCmdAggregator_U0_start_full_n");
    sc_trace(mVcdFile, flashCmdAggregator_U0_start_write, "flashCmdAggregator_U0_start_write");
    sc_trace(mVcdFile, flashMemAccess_U0_start_full_n, "flashMemAccess_U0_start_full_n");
    sc_trace(mVcdFile, flashMemAccess_U0_start_write, "flashMemAccess_U0_start_write");
#endif

    }
    mHdltvinHandle.open("flashModel.hdltvin.dat");
    mHdltvoutHandle.open("flashModel.hdltvout.dat");
}

flashModel::~flashModel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete flashCmdAggregator_U0;
    delete flashMemAccess_U0;
    delete flashAggregateMemCmd_1_U;
}

void flashModel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void flashModel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void flashModel::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void flashModel::thread_flashCmdAggregator_U0_ap_continue() {
    flashCmdAggregator_U0_ap_continue = ap_const_logic_1;
}

void flashModel::thread_flashCmdAggregator_U0_ap_start() {
    flashCmdAggregator_U0_ap_start = ap_const_logic_1;
}

void flashModel::thread_flashCmdAggregator_U0_start_full_n() {
    flashCmdAggregator_U0_start_full_n = ap_const_logic_1;
}

void flashModel::thread_flashCmdAggregator_U0_start_write() {
    flashCmdAggregator_U0_start_write = ap_const_logic_0;
}

void flashModel::thread_flashMemAccess_U0_ap_continue() {
    flashMemAccess_U0_ap_continue = ap_const_logic_1;
}

void flashModel::thread_flashMemAccess_U0_ap_start() {
    flashMemAccess_U0_ap_start = ap_const_logic_1;
}

void flashModel::thread_flashMemAccess_U0_start_full_n() {
    flashMemAccess_U0_start_full_n = ap_const_logic_1;
}

void flashModel::thread_flashMemAccess_U0_start_write() {
    flashMemAccess_U0_start_write = ap_const_logic_0;
}

void flashModel::thread_rdCmdIn_V_TREADY() {
    rdCmdIn_V_TREADY = flashCmdAggregator_U0_rdCmdIn_V_TREADY.read();
}

void flashModel::thread_rdDataOut_V_V_TDATA() {
    rdDataOut_V_V_TDATA = flashMemAccess_U0_rdDataOut_V_V_TDATA.read();
}

void flashModel::thread_rdDataOut_V_V_TVALID() {
    rdDataOut_V_V_TVALID = flashMemAccess_U0_rdDataOut_V_V_TVALID.read();
}

void flashModel::thread_wrCmdIn_V_TREADY() {
    wrCmdIn_V_TREADY = flashCmdAggregator_U0_wrCmdIn_V_TREADY.read();
}

void flashModel::thread_wrDataIn_V_V_TREADY() {
    wrDataIn_V_V_TREADY = flashMemAccess_U0_wrDataIn_V_V_TREADY.read();
}

void flashModel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"rdCmdIn_V_TDATA\" :  \"" << rdCmdIn_V_TDATA.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"rdDataOut_V_V_TDATA\" :  \"" << rdDataOut_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wrCmdIn_V_TDATA\" :  \"" << wrCmdIn_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wrDataIn_V_V_TDATA\" :  \"" << wrDataIn_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rdCmdIn_V_TVALID\" :  \"" << rdCmdIn_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rdCmdIn_V_TREADY\" :  \"" << rdCmdIn_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wrCmdIn_V_TVALID\" :  \"" << wrCmdIn_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wrCmdIn_V_TREADY\" :  \"" << wrCmdIn_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rdDataOut_V_V_TVALID\" :  \"" << rdDataOut_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rdDataOut_V_V_TREADY\" :  \"" << rdDataOut_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wrDataIn_V_V_TVALID\" :  \"" << wrDataIn_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wrDataIn_V_V_TREADY\" :  \"" << wrDataIn_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

