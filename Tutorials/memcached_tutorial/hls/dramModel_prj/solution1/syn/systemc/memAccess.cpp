// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "memAccess.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic memAccess::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic memAccess::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> memAccess::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> memAccess::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> memAccess::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> memAccess::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> memAccess::ap_ST_iter2_fsm_state0 = "1";
const sc_lv<32> memAccess::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool memAccess::ap_const_boolean_1 = true;
const sc_lv<1> memAccess::ap_const_lv1_0 = "0";
const sc_lv<1> memAccess::ap_const_lv1_1 = "1";
const sc_lv<32> memAccess::ap_const_lv32_1 = "1";
const sc_lv<2> memAccess::ap_const_lv2_0 = "00";
const sc_lv<2> memAccess::ap_const_lv2_2 = "10";
const sc_lv<2> memAccess::ap_const_lv2_3 = "11";
const sc_lv<2> memAccess::ap_const_lv2_1 = "1";
const sc_lv<8> memAccess::ap_const_lv8_1 = "1";
const sc_lv<8> memAccess::ap_const_lv8_FF = "11111111";
const sc_lv<12> memAccess::ap_const_lv12_1 = "1";
const sc_lv<32> memAccess::ap_const_lv32_C = "1100";
const sc_lv<32> memAccess::ap_const_lv32_13 = "10011";
const sc_lv<32> memAccess::ap_const_lv32_14 = "10100";
const bool memAccess::ap_const_boolean_0 = false;

memAccess::memAccess(sc_module_name name) : sc_module(name), mVcdFile(0) {
    memArray_V_U = new memAccess_memArray_V("memArray_V_U");
    memArray_V_U->clk(ap_clk);
    memArray_V_U->reset(ap_rst);
    memArray_V_U->address0(memArray_V_address0);
    memArray_V_U->ce0(memArray_V_ce0);
    memArray_V_U->we0(memArray_V_we0);
    memArray_V_U->d0(wrDataIn_V_V_TDATA);
    memArray_V_U->q0(memArray_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_aggregateMemCmd_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );

    SC_METHOD(thread_aggregateMemCmd_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state0);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_predicate_op53_write_state3 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( rdDataOut_V_V_1_ack_in );

    SC_METHOD(thread_ap_condition_401);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( memState );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_enable_operation_22);
    sensitive << ( ap_predicate_op22_load_state1 );

    SC_METHOD(thread_ap_enable_operation_35);
    sensitive << ( ap_predicate_op35_store_state1 );

    SC_METHOD(thread_ap_enable_operation_43);
    sensitive << ( ap_predicate_op43_load_state2 );

    SC_METHOD(thread_ap_enable_operation_45);
    sensitive << ( ap_predicate_op45_store_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);

    SC_METHOD(thread_ap_enable_state1_pp0_iter0_stage0);
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_enable_state2_pp0_iter1_stage0);
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );
    sensitive << ( ap_CS_iter2_fsm_state0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_predicate_op11_read_state1);
    sensitive << ( tmp_nbreadreq_fu_70_p3 );
    sensitive << ( memState );

    SC_METHOD(thread_ap_predicate_op22_load_state1);
    sensitive << ( memState );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_ap_predicate_op33_read_state1);
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( memState );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_ap_predicate_op35_store_state1);
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( memState );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_ap_predicate_op43_load_state2);
    sensitive << ( memState_load_reg_236 );
    sensitive << ( inputWord_rdOrWr_V_l_reg_240 );

    SC_METHOD(thread_ap_predicate_op44_write_state2);
    sensitive << ( memState_load_reg_236 );
    sensitive << ( inputWord_rdOrWr_V_l_reg_240 );

    SC_METHOD(thread_ap_predicate_op45_store_state2);
    sensitive << ( memState_load_reg_236 );
    sensitive << ( inputWord_rdOrWr_V_l_reg_240 );
    sensitive << ( tmp_1_reg_257 );

    SC_METHOD(thread_ap_predicate_op53_write_state3);
    sensitive << ( memState_load_reg_236_pp0_iter1_reg );
    sensitive << ( inputWord_rdOrWr_V_l_reg_240_pp0_iter1_reg );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_grp_fu_128_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( memState );
    sensitive << ( inputWord_count_V );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_grp_fu_133_p2);
    sensitive << ( inputWord_count_V );

    SC_METHOD(thread_grp_fu_144_p2);
    sensitive << ( inputWord_address_V );

    SC_METHOD(thread_memArray_V_address0);
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( inputWord_rdOrWr_V );
    sensitive << ( tmp_6_i_fu_226_p1 );
    sensitive << ( tmp_9_i_fu_231_p1 );
    sensitive << ( ap_condition_401 );

    SC_METHOD(thread_memArray_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( memState );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_memArray_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( tmp_1_nbreadreq_fu_84_p3 );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( memState );
    sensitive << ( inputWord_rdOrWr_V );

    SC_METHOD(thread_rdDataOut_V_V_1_ack_in);
    sensitive << ( rdDataOut_V_V_1_state );

    SC_METHOD(thread_rdDataOut_V_V_1_ack_out);
    sensitive << ( rdDataOut_V_V_TREADY );

    SC_METHOD(thread_rdDataOut_V_V_1_data_out);
    sensitive << ( rdDataOut_V_V_1_payload_A );
    sensitive << ( rdDataOut_V_V_1_payload_B );
    sensitive << ( rdDataOut_V_V_1_sel );

    SC_METHOD(thread_rdDataOut_V_V_1_load_A);
    sensitive << ( rdDataOut_V_V_1_sel_wr );
    sensitive << ( rdDataOut_V_V_1_state_cmp_full );

    SC_METHOD(thread_rdDataOut_V_V_1_load_B);
    sensitive << ( rdDataOut_V_V_1_sel_wr );
    sensitive << ( rdDataOut_V_V_1_state_cmp_full );

    SC_METHOD(thread_rdDataOut_V_V_1_sel);
    sensitive << ( rdDataOut_V_V_1_sel_rd );

    SC_METHOD(thread_rdDataOut_V_V_1_state_cmp_full);
    sensitive << ( rdDataOut_V_V_1_state );

    SC_METHOD(thread_rdDataOut_V_V_1_vld_in);
    sensitive << ( ap_done_reg );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_rdDataOut_V_V_1_vld_out);
    sensitive << ( rdDataOut_V_V_1_state );

    SC_METHOD(thread_rdDataOut_V_V_TDATA);
    sensitive << ( rdDataOut_V_V_1_data_out );

    SC_METHOD(thread_rdDataOut_V_V_TDATA_blk_n);
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_predicate_op53_write_state3 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( rdDataOut_V_V_1_state );

    SC_METHOD(thread_rdDataOut_V_V_TVALID);
    sensitive << ( rdDataOut_V_V_1_state );

    SC_METHOD(thread_tmp_1_nbreadreq_fu_84_p3);
    sensitive << ( wrDataIn_V_V_TVALID );

    SC_METHOD(thread_tmp_3_fu_180_p1);
    sensitive << ( aggregateMemCmd_V_dout );

    SC_METHOD(thread_tmp_6_i_fu_226_p1);
    sensitive << ( inputWord_address_V );

    SC_METHOD(thread_tmp_9_i_fu_231_p1);
    sensitive << ( inputWord_address_V );

    SC_METHOD(thread_tmp_nbreadreq_fu_70_p3);
    sensitive << ( aggregateMemCmd_V_empty_n );

    SC_METHOD(thread_wrDataIn_V_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );

    SC_METHOD(thread_wrDataIn_V_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( aggregateMemCmd_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( wrDataIn_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state1 );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( rdDataOut_V_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    rdDataOut_V_V_1_sel_rd = SC_LOGIC_0;
    rdDataOut_V_V_1_sel_wr = SC_LOGIC_0;
    rdDataOut_V_V_1_state = "00";
    memState = "0";
    inputWord_address_V = "000000000000";
    inputWord_count_V = "00000000";
    inputWord_rdOrWr_V = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "memAccess_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, aggregateMemCmd_V_dout, "(port)aggregateMemCmd_V_dout");
    sc_trace(mVcdFile, aggregateMemCmd_V_empty_n, "(port)aggregateMemCmd_V_empty_n");
    sc_trace(mVcdFile, aggregateMemCmd_V_read, "(port)aggregateMemCmd_V_read");
    sc_trace(mVcdFile, wrDataIn_V_V_TVALID, "(port)wrDataIn_V_V_TVALID");
    sc_trace(mVcdFile, rdDataOut_V_V_TREADY, "(port)rdDataOut_V_V_TREADY");
    sc_trace(mVcdFile, rdDataOut_V_V_TDATA, "(port)rdDataOut_V_V_TDATA");
    sc_trace(mVcdFile, rdDataOut_V_V_TVALID, "(port)rdDataOut_V_V_TVALID");
    sc_trace(mVcdFile, wrDataIn_V_V_TDATA, "(port)wrDataIn_V_V_TDATA");
    sc_trace(mVcdFile, wrDataIn_V_V_TREADY, "(port)wrDataIn_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state0, "ap_CS_iter2_fsm_state0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_70_p3, "tmp_nbreadreq_fu_70_p3");
    sc_trace(mVcdFile, ap_predicate_op11_read_state1, "ap_predicate_op11_read_state1");
    sc_trace(mVcdFile, tmp_1_nbreadreq_fu_84_p3, "tmp_1_nbreadreq_fu_84_p3");
    sc_trace(mVcdFile, ap_predicate_op33_read_state1, "ap_predicate_op33_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, rdDataOut_V_V_1_ack_in, "rdDataOut_V_V_1_ack_in");
    sc_trace(mVcdFile, memState_load_reg_236, "memState_load_reg_236");
    sc_trace(mVcdFile, inputWord_rdOrWr_V_l_reg_240, "inputWord_rdOrWr_V_l_reg_240");
    sc_trace(mVcdFile, ap_predicate_op44_write_state2, "ap_predicate_op44_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, memState_load_reg_236_pp0_iter1_reg, "memState_load_reg_236_pp0_iter1_reg");
    sc_trace(mVcdFile, inputWord_rdOrWr_V_l_reg_240_pp0_iter1_reg, "inputWord_rdOrWr_V_l_reg_240_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_predicate_op53_write_state3, "ap_predicate_op53_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, rdDataOut_V_V_1_data_out, "rdDataOut_V_V_1_data_out");
    sc_trace(mVcdFile, rdDataOut_V_V_1_vld_in, "rdDataOut_V_V_1_vld_in");
    sc_trace(mVcdFile, rdDataOut_V_V_1_vld_out, "rdDataOut_V_V_1_vld_out");
    sc_trace(mVcdFile, rdDataOut_V_V_1_ack_out, "rdDataOut_V_V_1_ack_out");
    sc_trace(mVcdFile, rdDataOut_V_V_1_payload_A, "rdDataOut_V_V_1_payload_A");
    sc_trace(mVcdFile, rdDataOut_V_V_1_payload_B, "rdDataOut_V_V_1_payload_B");
    sc_trace(mVcdFile, rdDataOut_V_V_1_sel_rd, "rdDataOut_V_V_1_sel_rd");
    sc_trace(mVcdFile, rdDataOut_V_V_1_sel_wr, "rdDataOut_V_V_1_sel_wr");
    sc_trace(mVcdFile, rdDataOut_V_V_1_sel, "rdDataOut_V_V_1_sel");
    sc_trace(mVcdFile, rdDataOut_V_V_1_load_A, "rdDataOut_V_V_1_load_A");
    sc_trace(mVcdFile, rdDataOut_V_V_1_load_B, "rdDataOut_V_V_1_load_B");
    sc_trace(mVcdFile, rdDataOut_V_V_1_state, "rdDataOut_V_V_1_state");
    sc_trace(mVcdFile, rdDataOut_V_V_1_state_cmp_full, "rdDataOut_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, memState, "memState");
    sc_trace(mVcdFile, inputWord_address_V, "inputWord_address_V");
    sc_trace(mVcdFile, inputWord_count_V, "inputWord_count_V");
    sc_trace(mVcdFile, inputWord_rdOrWr_V, "inputWord_rdOrWr_V");
    sc_trace(mVcdFile, memArray_V_address0, "memArray_V_address0");
    sc_trace(mVcdFile, memArray_V_ce0, "memArray_V_ce0");
    sc_trace(mVcdFile, memArray_V_we0, "memArray_V_we0");
    sc_trace(mVcdFile, memArray_V_q0, "memArray_V_q0");
    sc_trace(mVcdFile, rdDataOut_V_V_TDATA_blk_n, "rdDataOut_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, wrDataIn_V_V_TDATA_blk_n, "wrDataIn_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, aggregateMemCmd_V_blk_n, "aggregateMemCmd_V_blk_n");
    sc_trace(mVcdFile, grp_fu_128_p2, "grp_fu_128_p2");
    sc_trace(mVcdFile, tmp_1_reg_257, "tmp_1_reg_257");
    sc_trace(mVcdFile, tmp_6_i_fu_226_p1, "tmp_6_i_fu_226_p1");
    sc_trace(mVcdFile, tmp_9_i_fu_231_p1, "tmp_9_i_fu_231_p1");
    sc_trace(mVcdFile, tmp_3_fu_180_p1, "tmp_3_fu_180_p1");
    sc_trace(mVcdFile, grp_fu_144_p2, "grp_fu_144_p2");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_predicate_op22_load_state1, "ap_predicate_op22_load_state1");
    sc_trace(mVcdFile, ap_enable_operation_22, "ap_enable_operation_22");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_state1_pp0_iter0_stage0, "ap_enable_state1_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_predicate_op43_load_state2, "ap_predicate_op43_load_state2");
    sc_trace(mVcdFile, ap_enable_operation_43, "ap_enable_operation_43");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_state2_pp0_iter1_stage0, "ap_enable_state2_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_predicate_op35_store_state1, "ap_predicate_op35_store_state1");
    sc_trace(mVcdFile, ap_enable_operation_35, "ap_enable_operation_35");
    sc_trace(mVcdFile, ap_predicate_op45_store_state2, "ap_predicate_op45_store_state2");
    sc_trace(mVcdFile, ap_enable_operation_45, "ap_enable_operation_45");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_401, "ap_condition_401");
#endif

    }
}

memAccess::~memAccess() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete memArray_V_U;
}

void memAccess::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
                    !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_128_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_128_p2.read())))) {
        inputWord_address_V = grp_fu_144_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                esl_seteq<1,1,1>(memState.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_nbreadreq_fu_70_p3.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        inputWord_address_V = tmp_3_fu_180_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_128_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_128_p2.read())))) {
        inputWord_count_V = grp_fu_133_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                esl_seteq<1,1,1>(memState.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_nbreadreq_fu_70_p3.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        inputWord_count_V = aggregateMemCmd_V_dout.read().range(19, 12);
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_128_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_128_p2.read())))) {
        memState = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                esl_seteq<1,1,1>(memState.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_nbreadreq_fu_70_p3.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        memState = ap_const_lv1_1;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        rdDataOut_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_vld_out.read()))) {
            rdDataOut_V_V_1_sel_rd =  (sc_logic) (~rdDataOut_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        rdDataOut_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_ack_in.read()))) {
            rdDataOut_V_V_1_sel_wr =  (sc_logic) (~rdDataOut_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        rdDataOut_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_2)))) {
            rdDataOut_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_1)))) {
            rdDataOut_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(rdDataOut_V_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_ack_out.read()))))) {
            rdDataOut_V_V_1_state = ap_const_lv2_3;
        } else {
            rdDataOut_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(memState.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_70_p3.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        inputWord_rdOrWr_V = aggregateMemCmd_V_dout.read().range(20, 20);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        inputWord_rdOrWr_V_l_reg_240 = inputWord_rdOrWr_V.read();
        memState_load_reg_236 = memState.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        inputWord_rdOrWr_V_l_reg_240_pp0_iter1_reg = inputWord_rdOrWr_V_l_reg_240.read();
        memState_load_reg_236_pp0_iter1_reg = memState_load_reg_236.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_load_A.read())) {
        rdDataOut_V_V_1_payload_A = memArray_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_load_B.read())) {
        rdDataOut_V_V_1_payload_B = memArray_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        tmp_1_reg_257 =  (sc_lv<1>) (wrDataIn_V_V_TVALID.read());
    }
}

void memAccess::thread_aggregateMemCmd_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        aggregateMemCmd_V_blk_n = aggregateMemCmd_V_empty_n.read();
    } else {
        aggregateMemCmd_V_blk_n = ap_const_logic_1;
    }
}

void memAccess::thread_aggregateMemCmd_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        aggregateMemCmd_V_read = ap_const_logic_1;
    } else {
        aggregateMemCmd_V_read = ap_const_logic_0;
    }
}

void memAccess::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void memAccess::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void memAccess::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void memAccess::thread_ap_CS_iter2_fsm_state0() {
    ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm.read()[0];
}

void memAccess::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void memAccess::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void memAccess::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()));
}

void memAccess::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void memAccess::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()));
}

void memAccess::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void memAccess::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()));
}

void memAccess::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read());
}

void memAccess::thread_ap_condition_401() {
    ap_condition_401 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void memAccess::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void memAccess::thread_ap_enable_operation_22() {
    ap_enable_operation_22 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op22_load_state1.read());
}

void memAccess::thread_ap_enable_operation_35() {
    ap_enable_operation_35 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_store_state1.read());
}

void memAccess::thread_ap_enable_operation_43() {
    ap_enable_operation_43 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_load_state2.read());
}

void memAccess::thread_ap_enable_operation_45() {
    ap_enable_operation_45 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_store_state2.read());
}

void memAccess::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void memAccess::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_const_logic_0;
}

void memAccess::thread_ap_enable_state1_pp0_iter0_stage0() {
    ap_enable_state1_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_1));
}

void memAccess::thread_ap_enable_state2_pp0_iter1_stage0() {
    ap_enable_state2_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_1));
}

void memAccess::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void memAccess::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void memAccess::thread_ap_predicate_op11_read_state1() {
    ap_predicate_op11_read_state1 = (esl_seteq<1,1,1>(memState.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_70_p3.read(), ap_const_lv1_1));
}

void memAccess::thread_ap_predicate_op22_load_state1() {
    ap_predicate_op22_load_state1 = (esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read()));
}

void memAccess::thread_ap_predicate_op33_read_state1() {
    ap_predicate_op33_read_state1 = (esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()));
}

void memAccess::thread_ap_predicate_op35_store_state1() {
    ap_predicate_op35_store_state1 = (esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()));
}

void memAccess::thread_ap_predicate_op43_load_state2() {
    ap_predicate_op43_load_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, memState_load_reg_236.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V_l_reg_240.read()));
}

void memAccess::thread_ap_predicate_op44_write_state2() {
    ap_predicate_op44_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, memState_load_reg_236.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V_l_reg_240.read()));
}

void memAccess::thread_ap_predicate_op45_store_state2() {
    ap_predicate_op45_store_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, memState_load_reg_236.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V_l_reg_240.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_257.read()));
}

void memAccess::thread_ap_predicate_op53_write_state3() {
    ap_predicate_op53_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, memState_load_reg_236_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V_l_reg_240_pp0_iter1_reg.read()));
}

void memAccess::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void memAccess::thread_grp_fu_128_p2() {
    grp_fu_128_p2 = (!inputWord_count_V.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(inputWord_count_V.read() == ap_const_lv8_1);
}

void memAccess::thread_grp_fu_133_p2() {
    grp_fu_133_p2 = (!inputWord_count_V.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<8>(): (sc_biguint<8>(inputWord_count_V.read()) + sc_bigint<8>(ap_const_lv8_FF));
}

void memAccess::thread_grp_fu_144_p2() {
    grp_fu_144_p2 = (!inputWord_address_V.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(inputWord_address_V.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void memAccess::thread_memArray_V_address0() {
    if (esl_seteq<1,1,1>(ap_condition_401.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()))) {
            memArray_V_address0 =  (sc_lv<12>) (tmp_9_i_fu_231_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read())) {
            memArray_V_address0 =  (sc_lv<12>) (tmp_6_i_fu_226_p1.read());
        } else {
            memArray_V_address0 = "XXXXXXXXXXXX";
        }
    } else {
        memArray_V_address0 = "XXXXXXXXXXXX";
    }
}

void memAccess::thread_memArray_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, inputWord_rdOrWr_V.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read())))))) {
        memArray_V_ce0 = ap_const_logic_1;
    } else {
        memArray_V_ce0 = ap_const_logic_0;
    }
}

void memAccess::thread_memArray_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(memState.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, inputWord_rdOrWr_V.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_84_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        memArray_V_we0 = ap_const_logic_1;
    } else {
        memArray_V_we0 = ap_const_logic_0;
    }
}

void memAccess::thread_rdDataOut_V_V_1_ack_in() {
    rdDataOut_V_V_1_ack_in = rdDataOut_V_V_1_state.read()[1];
}

void memAccess::thread_rdDataOut_V_V_1_ack_out() {
    rdDataOut_V_V_1_ack_out = rdDataOut_V_V_TREADY.read();
}

void memAccess::thread_rdDataOut_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, rdDataOut_V_V_1_sel.read())) {
        rdDataOut_V_V_1_data_out = rdDataOut_V_V_1_payload_B.read();
    } else {
        rdDataOut_V_V_1_data_out = rdDataOut_V_V_1_payload_A.read();
    }
}

void memAccess::thread_rdDataOut_V_V_1_load_A() {
    rdDataOut_V_V_1_load_A = (rdDataOut_V_V_1_state_cmp_full.read() & ~rdDataOut_V_V_1_sel_wr.read());
}

void memAccess::thread_rdDataOut_V_V_1_load_B() {
    rdDataOut_V_V_1_load_B = (rdDataOut_V_V_1_sel_wr.read() & rdDataOut_V_V_1_state_cmp_full.read());
}

void memAccess::thread_rdDataOut_V_V_1_sel() {
    rdDataOut_V_V_1_sel = rdDataOut_V_V_1_sel_rd.read();
}

void memAccess::thread_rdDataOut_V_V_1_state_cmp_full() {
    rdDataOut_V_V_1_state_cmp_full =  (sc_logic) ((!rdDataOut_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(rdDataOut_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void memAccess::thread_rdDataOut_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        rdDataOut_V_V_1_vld_in = ap_const_logic_1;
    } else {
        rdDataOut_V_V_1_vld_in = ap_const_logic_0;
    }
}

void memAccess::thread_rdDataOut_V_V_1_vld_out() {
    rdDataOut_V_V_1_vld_out = rdDataOut_V_V_1_state.read()[0];
}

void memAccess::thread_rdDataOut_V_V_TDATA() {
    rdDataOut_V_V_TDATA = rdDataOut_V_V_1_data_out.read();
}

void memAccess::thread_rdDataOut_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read())))) {
        rdDataOut_V_V_TDATA_blk_n = rdDataOut_V_V_1_state.read()[1];
    } else {
        rdDataOut_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void memAccess::thread_rdDataOut_V_V_TVALID() {
    rdDataOut_V_V_TVALID = rdDataOut_V_V_1_state.read()[0];
}

void memAccess::thread_tmp_1_nbreadreq_fu_84_p3() {
    tmp_1_nbreadreq_fu_84_p3 =  (sc_lv<1>) (wrDataIn_V_V_TVALID.read());
}

void memAccess::thread_tmp_3_fu_180_p1() {
    tmp_3_fu_180_p1 = aggregateMemCmd_V_dout.read().range(12-1, 0);
}

void memAccess::thread_tmp_6_i_fu_226_p1() {
    tmp_6_i_fu_226_p1 = esl_zext<64,12>(inputWord_address_V.read());
}

void memAccess::thread_tmp_9_i_fu_231_p1() {
    tmp_9_i_fu_231_p1 = esl_zext<64,12>(inputWord_address_V.read());
}

void memAccess::thread_tmp_nbreadreq_fu_70_p3() {
    tmp_nbreadreq_fu_70_p3 =  (sc_lv<1>) (aggregateMemCmd_V_empty_n.read());
}

void memAccess::thread_wrDataIn_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        wrDataIn_V_V_TDATA_blk_n = wrDataIn_V_V_TVALID.read();
    } else {
        wrDataIn_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void memAccess::thread_wrDataIn_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
        wrDataIn_V_V_TREADY = ap_const_logic_1;
    } else {
        wrDataIn_V_V_TREADY = ap_const_logic_0;
    }
}

void memAccess::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void memAccess::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || 
    esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, aggregateMemCmd_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, wrDataIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void memAccess::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
  esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_0)))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, rdDataOut_V_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

