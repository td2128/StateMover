// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dramModel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.183500,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=114,HLS_SYN_DSP=0,HLS_SYN_FF=1114,HLS_SYN_LUT=323,HLS_VERSION=2018_3}" *)

module dramModel (
        rdCmdIn_V_TDATA,
        rdDataOut_V_V_TDATA,
        wrCmdIn_V_TDATA,
        wrDataIn_V_V_TDATA,
        ap_clk,
        ap_rst_n,
        rdCmdIn_V_TVALID,
        rdCmdIn_V_TREADY,
        wrCmdIn_V_TVALID,
        wrCmdIn_V_TREADY,
        rdDataOut_V_V_TVALID,
        rdDataOut_V_V_TREADY,
        wrDataIn_V_V_TVALID,
        wrDataIn_V_V_TREADY
);


input  [39:0] rdCmdIn_V_TDATA;
output  [511:0] rdDataOut_V_V_TDATA;
input  [39:0] wrCmdIn_V_TDATA;
input  [511:0] wrDataIn_V_V_TDATA;
input   ap_clk;
input   ap_rst_n;
input   rdCmdIn_V_TVALID;
output   rdCmdIn_V_TREADY;
input   wrCmdIn_V_TVALID;
output   wrCmdIn_V_TREADY;
output   rdDataOut_V_V_TVALID;
input   rdDataOut_V_V_TREADY;
input   wrDataIn_V_V_TVALID;
output   wrDataIn_V_V_TREADY;

 reg    ap_rst_n_inv;
wire    cmdAggregator_U0_ap_start;
wire    cmdAggregator_U0_ap_done;
wire    cmdAggregator_U0_ap_continue;
wire    cmdAggregator_U0_ap_idle;
wire    cmdAggregator_U0_ap_ready;
wire   [20:0] cmdAggregator_U0_aggregateMemCmd_V_din;
wire    cmdAggregator_U0_aggregateMemCmd_V_write;
wire    cmdAggregator_U0_rdCmdIn_V_TREADY;
wire    cmdAggregator_U0_wrCmdIn_V_TREADY;
wire    memAccess_U0_ap_start;
wire    memAccess_U0_ap_done;
wire    memAccess_U0_ap_continue;
wire    memAccess_U0_ap_idle;
wire    memAccess_U0_ap_ready;
wire    memAccess_U0_aggregateMemCmd_V_read;
wire   [511:0] memAccess_U0_rdDataOut_V_V_TDATA;
wire    memAccess_U0_rdDataOut_V_V_TVALID;
wire    memAccess_U0_wrDataIn_V_V_TREADY;
wire    ap_sync_continue;
wire    aggregateMemCmd_V_full_n;
wire   [20:0] aggregateMemCmd_V_dout;
wire    aggregateMemCmd_V_empty_n;
wire    cmdAggregator_U0_start_full_n;
wire    cmdAggregator_U0_start_write;
wire    memAccess_U0_start_full_n;
wire    memAccess_U0_start_write;

cmdAggregator cmdAggregator_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cmdAggregator_U0_ap_start),
    .ap_done(cmdAggregator_U0_ap_done),
    .ap_continue(cmdAggregator_U0_ap_continue),
    .ap_idle(cmdAggregator_U0_ap_idle),
    .ap_ready(cmdAggregator_U0_ap_ready),
    .rdCmdIn_V_TVALID(rdCmdIn_V_TVALID),
    .wrCmdIn_V_TVALID(wrCmdIn_V_TVALID),
    .aggregateMemCmd_V_din(cmdAggregator_U0_aggregateMemCmd_V_din),
    .aggregateMemCmd_V_full_n(aggregateMemCmd_V_full_n),
    .aggregateMemCmd_V_write(cmdAggregator_U0_aggregateMemCmd_V_write),
    .rdCmdIn_V_TDATA(rdCmdIn_V_TDATA),
    .rdCmdIn_V_TREADY(cmdAggregator_U0_rdCmdIn_V_TREADY),
    .wrCmdIn_V_TDATA(wrCmdIn_V_TDATA),
    .wrCmdIn_V_TREADY(cmdAggregator_U0_wrCmdIn_V_TREADY)
);

memAccess memAccess_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(memAccess_U0_ap_start),
    .ap_done(memAccess_U0_ap_done),
    .ap_continue(memAccess_U0_ap_continue),
    .ap_idle(memAccess_U0_ap_idle),
    .ap_ready(memAccess_U0_ap_ready),
    .aggregateMemCmd_V_dout(aggregateMemCmd_V_dout),
    .aggregateMemCmd_V_empty_n(aggregateMemCmd_V_empty_n),
    .aggregateMemCmd_V_read(memAccess_U0_aggregateMemCmd_V_read),
    .wrDataIn_V_V_TVALID(wrDataIn_V_V_TVALID),
    .rdDataOut_V_V_TREADY(rdDataOut_V_V_TREADY),
    .rdDataOut_V_V_TDATA(memAccess_U0_rdDataOut_V_V_TDATA),
    .rdDataOut_V_V_TVALID(memAccess_U0_rdDataOut_V_V_TVALID),
    .wrDataIn_V_V_TDATA(wrDataIn_V_V_TDATA),
    .wrDataIn_V_V_TREADY(memAccess_U0_wrDataIn_V_V_TREADY)
);

fifo_w21_d16_A aggregateMemCmd_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cmdAggregator_U0_aggregateMemCmd_V_din),
    .if_full_n(aggregateMemCmd_V_full_n),
    .if_write(cmdAggregator_U0_aggregateMemCmd_V_write),
    .if_dout(aggregateMemCmd_V_dout),
    .if_empty_n(aggregateMemCmd_V_empty_n),
    .if_read(memAccess_U0_aggregateMemCmd_V_read)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign cmdAggregator_U0_ap_continue = 1'b1;

assign cmdAggregator_U0_ap_start = 1'b1;

assign cmdAggregator_U0_start_full_n = 1'b1;

assign cmdAggregator_U0_start_write = 1'b0;

assign memAccess_U0_ap_continue = 1'b1;

assign memAccess_U0_ap_start = 1'b1;

assign memAccess_U0_start_full_n = 1'b1;

assign memAccess_U0_start_write = 1'b0;

assign rdCmdIn_V_TREADY = cmdAggregator_U0_rdCmdIn_V_TREADY;

assign rdDataOut_V_V_TDATA = memAccess_U0_rdDataOut_V_V_TDATA;

assign rdDataOut_V_V_TVALID = memAccess_U0_rdDataOut_V_V_TVALID;

assign wrCmdIn_V_TREADY = cmdAggregator_U0_wrCmdIn_V_TREADY;

assign wrDataIn_V_V_TREADY = memAccess_U0_wrDataIn_V_V_TREADY;

endmodule //dramModel
